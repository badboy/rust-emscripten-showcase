// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 12048;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([1,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,7,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,4,0,0,0,10,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,15,0,0,0,16,0,0,0,4,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,12,0,0,0,4,0,0,0,27,0,0,0,29,0,0,0,16,0,0,0,4,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,4,0,0,0,4,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,12,0,0,0,4,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,4,0,0,0,4,0,0,0,44,0,0,0,45,0,0,0,8,0,0,0,4,0,0,0,46,0,0,0,47,0,0,0,8,0,0,0,4,0,0,0,48,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2,0,2,3,0,0,0,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,2,0,0,0,0,6,0,2,0,0,7,0,0,2,8,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,2,4,0,0,12,0,2,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,80,7,0,0,13,0,0,0,0,1,2,3,3,3,4,3,3,3,3,3,3,5,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,222,25,0,0,192,1,0,0,184,7,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,0,0,0,0,255,3,0,0,0,0,0,0,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,192,1,0,192,255,0,0,0,0,0,0,255,3,255,3,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,255,255,255,255,231,1,0,0,0,0,0,0,128,0,0,0,254,3,0,7,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,2,4,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,255,3,0,0,0,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,192,255,255,255,255,255,255,50,0,0,0,4,0,0,0,4,0,0,0,51,0,0,0,52,0,0,0,4,0,0,0,4,0,0,0,53,0,0,0,54,0,0,0,4,0,0,0,4,0,0,0,55,0,0,0,56,0,0,0,8,0,0,0,4,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,56,0,0,0,4,0,0,0,4,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16,240,225,210,195,180,20,0,0,10,0,0,0,173,0,0,0,252,42,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,49,22,0,0,50,0,0,0,93,21,0,0,43,0,0,0,248,21,0,0,8,0,0,0,0,22,0,0,15,0,0,0,15,22,0,0,3,0,0,0,18,22,0,0,1,0,0,0,83,24,0,0,1,0,0,0,197,21,0,0,51,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,28,0,0,0,8,23,0,0,21,0,0,0,29,23,0,0,1,0,0,0,41,23,0,0,29,0,0,0,54,0,0,0,41,23,0,0,29,0,0,0,59,0,0,0,130,23,0,0,36,0,0,0,166,23,0,0,3,0,0,0,113,23,0,0,17,0,0,0,202,0,0,0,252,42,0,0,0,0,0,0,169,23,0,0,11,0,0,0,180,23,0,0,1,0,0,0,10,0,0,0,93,24,0,0,2,0,0,0,95,24,0,0,2,0,0,0,97,24,0,0,3,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,84,24,0,0,9,0,0,0,100,24,0,0,44,0,0,0,144,24,0,0,11,0,0,0,155,24,0,0,2,0,0,0,157,24,0,0,35,0,0,0,21,0,0,0,218,24,0,0,37,0,0,0,188,0,0,0,21,25,0,0,17,0,0,0,255,24,0,0,22,0,0,0,146,25,0,0,25,0,0,0,97,0,0,0,64,10,0,0,1,0,0,0,252,42,0,0,0,0,0,0,158,27,0,0,30,0,0,0,67,0,0,0,158,27,0,0,30,0,0,0,63,0,0,0,228,27,0,0,36,0,0,0,205,27,0,0,23,0,0,0,1,2,0,0,188,27,0,0,17,0,0,0,205,27,0,0,23,0,0,0,69,2,0,0,49,0,0,0,30,28,0,0,60,0,0,0,8,28,0,0,22,0,0,0,122,10,0,0,141,28,0,0,43,0,0,0,184,28,0,0,21,0,0,0,61,1,0,0,205,28,0,0,32,0,0,0,237,28,0,0,18,0,0,0,252,42,0,0,0,0,0,0,255,28,0,0,22,0,0,0,108,3,0,0,255,28,0,0,22,0,0,0,96,3,0,0,184,28,0,0,21,0,0,0,179,2,0,0,29,29,0,0,26,0,0,0,9,2,0,0,4,11,0,0,3,0,0,0,55,29,0,0,44,0,0,0,99,29,0,0,11,0,0,0,110,29,0,0,2,0,0,0,112,29,0,0,21,0,0,0,15,3,0,0,48,11,0,0,2,0,0,0,252,42,0,0,0,0,0,0,133,29,0,0,2,0,0,0,135,29,0,0,27,0,0,0,24,0,0,0,181,29,0,0,40,0,0,0,162,29,0,0,19,0,0,0,32,1,0,0,65,31,0,0,14,0,0,0,79,31,0,0,4,0,0,0,83,31,0,0,16,0,0,0,31,31,0,0,1,0,0,0,246,30,0,0,22,0,0,0,183,6,0,0,12,31,0,0,6,0,0,0,18,31,0,0,8,0,0,0,26,31,0,0,5,0,0,0,31,31,0,0,1,0,0,0,32,31,0,0,33,0,0,0,246,30,0,0,22,0,0,0,185,6,0,0,119,31,0,0,36,0,0,0,99,31,0,0,20,0,0,0,11,2,0,0,252,42,0,0,0,0,0,0,111,32,0,0,1,0,0,0,105,32,0,0,2,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,32,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,252,42,0,0,0,0,0,0,34,24,0,0,1,0,0,0,105,32,0,0,2,0,0,0,252,42,0,0,0,0,0,0,111,32,0,0,1,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,252,42,0,0,0,0,0,0,252,42,0,0,0,0,0,0,252,42,0,0,0,0,0,0,113,32,0,0,6,0,0,0,119,32,0,0,34,0,0,0,99,31,0,0,20,0,0,0,29,2,0,0,46,24,0,0,1,0,0,0,252,42,0,0,0,0,0,0,252,42,0,0,0,0,0,0,155,32,0,0,22,0,0,0,177,32,0,0,13,0,0,0,99,31,0,0,20,0,0,0,35,2,0,0,5,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,65,0,0,0,4,43,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,13,0,0,173,0,120,3,121,3,139,3,141,3,162,3,87,5,88,5,96,5,136,5,144,5,28,6,29,6,221,6,14,7,15,7,75,7,76,7,46,8,47,8,63,8,92,8,93,8,161,8,255,8,120,9,128,9,132,9,141,9,142,9,145,9,146,9,169,9,177,9,186,9,187,9,197,9,198,9,201,9,202,9,222,9,228,9,229,9,4,10,17,10,18,10,41,10,49,10,52,10,55,10,58,10,59,10,61,10,73,10,74,10,93,10,132,10,142,10,146,10,169,10,177,10,180,10,186,10,187,10,198,10,202,10,206,10,207,10,228,10,229,10,4,11,13,11,14,11,17,11,18,11,41,11,49,11,52,11,58,11,59,11,69,11,70,11,73,11,74,11,94,11,100,11,101,11,132,11,145,11,155,11,157,11,201,11,206,11,207,11,4,12,13,12,17,12,41,12,52,12,69,12,73,12,87,12,100,12,101,12,128,12,129,12,132,12,141,12,145,12,169,12,180,12,186,12,187,12,197,12,201,12,223,12,228,12,229,12,240,12,4,13,13,13,17,13,59,13,60,13,69,13,73,13,100,13,101,13,128,13,129,13,132,13,178,13,188,13,190,13,191,13,213,13,215,13,131,14,133,14,134,14,137,14,139,14,140,14,152,14,160,14,164,14,166,14,168,14,169,14,172,14,186,14,190,14,191,14,197,14,199,14,206,14,207,14,218,14,219,14,72,15,152,15,189,15,205,15,198,16,206,16,207,16,73,18,78,18,79,18,87,18,89,18,94,18,95,18,137,18,142,18,143,18,177,18,182,18,183,18,191,18,193,18,198,18,199,18,215,18,17,19,22,19,23,19,91,19,92,19,128,22,13,23,109,23,113,23,222,23,223,23,14,24,15,24,110,25,111,25,28,26,29,26,95,26,125,26,126,26,22,31,23,31,30,31,31,31,70,31,71,31,78,31,79,31,88,31,90,31,92,31,94,31,126,31,127,31,181,31,197,31,212,31,213,31,220,31,240,31,241,31,245,31,114,32,115,32,143,32,0,39,47,44,95,44,38,45,46,45,47,45,167,45,175,45,183,45,191,45,199,45,207,45,215,45,223,45,154,46,64,48,151,48,152,48,143,49,31,50,255,50,143,167,206,169,78,170,79,170,90,170,91,170,7,171,8,171,15,171,16,171,39,171,238,171,239,171,110,250,111,250,55,251,61,251,63,251,66,251,69,251,144,253,145,253,254,253,255,253,83,254,103,254,117,254,200,255,201,255,208,255,209,255,216,255,217,255,231,255,254,255,255,255,0,0,32,0,127,0,34,0,127,3,5,0,40,5,9,0,139,5,4,0,200,5,8,0,235,5,5,0,245,5,17,0,178,7,14,0,251,7,5,0,95,8,65,0,173,8,55,0,179,9,3,0,207,9,8,0,216,9,4,0,252,9,5,0,11,10,4,0,67,10,4,0,78,10,3,0,82,10,7,0,95,10,7,0,118,10,11,0,209,10,15,0,242,10,15,0,78,11,8,0,88,11,4,0,120,11,10,0,139,11,3,0,150,11,3,0,160,11,3,0,165,11,3,0,171,11,3,0,186,11,4,0,195,11,3,0,209,11,6,0,216,11,14,0,251,11,6,0,58,12,3,0,78,12,7,0,90,12,6,0,112,12,8,0,206,12,7,0,215,12,7,0,243,12,15,0,79,13,8,0,88,13,8,0,118,13,3,0,151,13,3,0,199,13,3,0,203,13,4,0,224,13,18,0,245,13,12,0,59,14,4,0,92,14,37,0,142,14,6,0,224,14,32,0,109,15,4,0,219,15,37,0,200,16,5,0,125,19,3,0,154,19,6,0,245,19,11,0,157,22,3,0,241,22,15,0,21,23,11,0,55,23,9,0,84,23,12,0,116,23,12,0,234,23,6,0,250,23,6,0,26,24,6,0,120,24,8,0,171,24,5,0,246,24,10,0,29,25,3,0,44,25,4,0,60,25,4,0,65,25,3,0,117,25,11,0,172,25,4,0,202,25,6,0,219,25,3,0,138,26,6,0,154,26,6,0,174,26,82,0,76,27,4,0,125,27,3,0,244,27,8,0,56,28,3,0,74,28,3,0,128,28,64,0,200,28,8,0,247,28,9,0,231,29,21,0,255,31,17,0,40,32,8,0,95,32,17,0,157,32,3,0,186,32,22,0,241,32,15,0,138,33,6,0,244,35,12,0,39,36,25,0,75,36,21,0,77,43,3,0,90,43,166,0,244,44,5,0,40,45,5,0,104,45,7,0,113,45,14,0,151,45,9,0,60,46,68,0,244,46,12,0,214,47,26,0,252,47,5,0,0,49,5,0,46,49,3,0,187,49,5,0,228,49,12,0,0,52,192,25,0,78,0,82,141,164,3,0,199,164,9,0,44,166,20,0,152,166,7,0,248,166,8,0,148,167,12,0,171,167,77,0,44,168,4,0,58,168,6,0,120,168,8,0,197,168,9,0,218,168,6,0,252,168,4,0,84,169,11,0,125,169,3,0,218,169,4,0,224,169,32,0,55,170,9,0,124,170,4,0,195,170,24,0,247,170,10,0,23,171,9,0,47,171,145,0,250,171,182,43,199,215,4,0,252,215,4,33,218,250,38,0,7,251,12,0,24,251,5,0,194,251,17,0,64,253,16,0,200,253,40,0,26,254,6,0,39,254,9,0,108,254,4,0,253,254,4,0,191,255,3,0,221,255,3,0,239,255,13,0,12,0,39,0,59,0,62,0,78,0,79,0,31,3,158,3,158,4,159,4,6,8,7,8,9,8,54,8,61,8,62,8,86,8,4,10,20,10,24,10,86,11,87,11,189,16,53,17,39,209,40,209,85,212,157,212,160,212,161,212,163,212,164,212,167,212,168,212,173,212,186,212,188,212,196,212,6,213,11,213,12,213,21,213,29,213,58,213,63,213,69,213,81,213,166,214,167,214,204,215,205,215,4,238,32,238,35,238,37,238,38,238,40,238,51,238,56,238,58,238,72,238,74,238,76,238,80,238,83,238,85,238,86,238,88,238,90,238,92,238,94,238,96,238,99,238,101,238,102,238,107,238,115,238,120,238,125,238,127,238,138,238,164,238,170,238,175,240,176,240,191,240,192,240,208,240,47,241,54,243,197,243,63,244,65,244,248,244,62,245,63,245,94,0,34,0,251,0,5,0,3,1,4,0,52,1,3,0,139,1,5,0,156,1,52,0,254,1,130,0,157,2,3,0,209,2,47,0,36,3,12,0,75,3,53,0,196,3,4,0,214,3,42,0,170,4,86,3,57,8,3,0,96,8,160,0,28,9,3,0,58,9,5,0,64,9,64,0,184,9,6,0,192,9,64,0,7,10,5,0,52,10,4,0,59,10,4,0,72,10,8,0,89,10,7,0,128,10,128,0,54,11,3,0,115,11,5,0,128,11,128,0,73,12,23,2,127,14,129,1,78,16,4,0,112,16,16,0,194,16,14,0,233,16,7,0,250,16,6,0,68,17,60,0,201,17,7,0,218,17,166,4,184,22,8,0,202,22,54,9,111,35,145,0,99,36,13,0,116,36,140,11,47,52,209,51,57,106,199,4,69,111,11,0,127,111,16,0,160,111,96,64,2,176,254,31,246,208,10,0,115,209,8,0,222,209,34,0,70,210,186,0,87,211,9,0,114,211,142,0,71,213,3,0,0,216,0,22,60,238,6,0,67,238,4,0,156,238,5,0,188,238,52,0,242,238,14,1,44,240,4,0,148,240,12,0,224,240,32,0,11,241,5,0,108,241,4,0,155,241,75,0,3,242,13,0,59,242,5,0,73,242,7,0,82,242,174,0,33,243,15,0,125,243,3,0,148,243,12,0,203,243,21,0,241,243,15,0,253,244,3,0,68,245,12,0,104,245,147,0,65,246,4,0,80,246,48,0,198,246,58,0,116,247,140,8,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,115,114,99,47,108,105,98,46,114,115,78,117,108,69,114,114,111,114,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,114,119,108,111,99,107,32,109,97,120,105,109,117,109,32,114,101,97,100,101,114,32,99,111,117,110,116,32,101,120,99,101,101,100,101,100,114,119,108,111,99,107,32,114,101,97,100,32,108,111,99,107,32,119,111,117,108,100,32,114,101,115,117,108,116,32,105,110,32,100,101,97,100,108,111,99,107,99,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,84,76,83,32,118,97,108,117,101,32,100,117,114,105,110,103,32,111,114,32,97,102,116,101,114,32,105,116,32,105,115,32,100,101,115,116,114,111,121,101,100,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,97,110,105,99,107,105,110,103,46,32,97,98,111,114,116,105,110,103,46,10,66,111,120,60,65,110,121,62,60,117,110,110,97,109,101,100,62,102,111,114,109,97,116,116,101,114,32,101,114,114,111,114,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,119,104,111,108,101,32,98,117,102,102,101,114,1,110,111,116,101,58,32,82,117,110,32,119,105,116,104,32,96,82,85,83,84,95,66,65,67,75,84,82,65,67,69,61,49,96,32,102,111,114,32,97,32,98,97,99,107,116,114,97,99,101,46,10,116,104,114,101,97,100,32,39,39,32,112,97,110,105,99,107,101,100,32,97,116,32,39,39,44,32,58,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,66,111,114,114,111,119,77,117,116,69,114,114,111,114,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,97,110,105,99,46,32,97,98,111,114,116,105,110,103,46,10,99,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,84,76,83,32,118,97,108,117,101,32,100,117,114,105,110,103,32,111,114,32,97,102,116,101,114,32,105,116,32,105,115,32,100,101,115,116,114,111,121,101,100,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,66,111,114,114,111,119,77,117,116,69,114,114,111,114,97,108,114,101,97,100,121,32,109,117,116,97,98,108,121,32,98,111,114,114,111,119,101,100,66,111,114,114,111,119,69,114,114,111,114,102,111,114,109,97,116,116,101,114,32,101,114,114,111,114,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,119,104,111,108,101,32,98,117,102,102,101,114,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,10,83,116,114,105,110,103,69,114,114,111,114,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,114,119,108,111,99,107,46,114,115,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,115,114,99,47,108,105,98,115,116,100,47,101,110,118,46,114,115,102,97,105,108,101,100,32,116,111,32,103,101,116,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,96,96,58,32,32,40,111,115,32,101,114,114,111,114,32,41,100,97,116,97,32,112,114,111,118,105,100,101,100,32,99,111,110,116,97,105,110,115,32,97,32,110,117,108,32,98,121,116,101,46,82,85,83,84,95,66,65,67,75,84,82,65,67,69,48,69,95,90,78,90,78,58,58,95,36,36,36,83,80,36,64,36,66,80,36,42,36,82,70,36,38,36,76,84,36,60,36,71,84,36,62,36,76,80,36,40,36,82,80,36,36,67,36,44,36,117,55,101,36,126,36,117,50,48,36,32,36,117,50,55,36,39,36,117,53,98,36,91,36,117,53,100,36,93,36,117,55,98,36,123,36,117,55,100,36,125,36,117,51,98,36,59,36,117,50,98,36,43,36,117,50,50,36,34,10,60,117,110,107,110,111,119,110,62,32,32,58,32,32,45,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,32,40,108,101,102,116,58,32,96,96,44,32,114,105,103,104,116,58,32,96,96,41,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,107,101,121,32,33,61,32,48,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,99,111,109,109,111,110,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,32,46,46,46,32,60,102,114,97,109,101,115,32,111,109,105,116,116,101,100,62,10,115,116,97,99,107,32,98,97,99,107,116,114,97,99,101,58,10,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,116,104,114,101,97,100,32,110,97,109,101,32,109,97,121,32,110,111,116,32,99,111,110,116,97,105,110,32,105,110,116,101,114,105,111,114,32,110,117,108,108,32,98,121,116,101,115,115,116,114,101,114,114,111,114,95,114,32,102,97,105,108,117,114,101,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,111,115,46,114,115,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,7,0,0,8,0,0,0,6,0,0,0,0,0,8,0,8,0,0,0,0,0,8,0,9,6,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,114,99,47,108,105,98,114,117,115,116,99,95,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,115,114,99,47,108,105,98,97,108,108,111,99,47,114,97,119,95,118,101,99,46,114,115,84,114,105,101,100,32,116,111,32,115,104,114,105,110,107,32,116,111,32,97,32,108,97,114,103,101,114,32,99,97,112,97,99,105,116,121,115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115,102,114,111,109,95,115,116,114,95,114,97,100,105,120,95,105,110,116,58,32,109,117,115,116,32,108,105,101,32,105,110,32,116,104,101,32,114,97,110,103,101,32,96,91,50,44,32,51,54,93,96,32,45,32,102,111,117,110,100,32,80,97,114,115,101,73,110,116,69,114,114,111,114,107,105,110,100,69,109,112,116,121,73,110,118,97,108,105,100,68,105,103,105,116,79,118,101,114,102,108,111,119,85,110,100,101,114,102,108,111,119,99,97,108,108,101,100,32,96,79,112,116,105,111,110,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,32,96,78,111,110,101,96,32,118,97,108,117,101,115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,116,104,101,32,108,101,110,32,105,115,32,32,98,117,116,32,116,104,101,32,105,110,100,101,120,32,105,115,32,115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115,78,111,110,101,83,111,109,101,115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,32,40,108,101,102,116,58,32,96,96,44,32,114,105,103,104,116,58,32,96,96,41,115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115,58,32,115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,95,112,114,105,118,97,116,101,46,114,115,115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115,116,111,95,100,105,103,105,116,58,32,114,97,100,105,120,32,105,115,32,116,111,111,32,104,105,103,104,32,40,109,97,120,105,109,117,109,32,51,54,41,85,116,102,56,69,114,114,111,114,118,97,108,105,100,95,117,112,95,116,111,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,91,46,46,46,93,115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115,105,110,100,101,120,32,32,97,110,100,47,111,114,32,32,105,110,32,96,96,32,100,111,32,110,111,116,32,108,105,101,32,111,110,32,99,104,97,114,97,99,116,101,114,32,98,111,117,110,100,97,114,121,98,101,103,105,110,32,60,61,32,101,110,100,32,40,32,60,61,32,41,32,119,104,101,110,32,115,108,105,99,105,110,103,32,96,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,105,110,100,101,120,32,60,32,115,101,108,102,46,108,101,110,40,41,10,125,32,125,48,48,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,49,48,49,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,50,48,50,49,50,50,50,51,50,52,50,53,50,54,50,55,50,56,50,57,51,48,51,49,51,50,51,51,51,52,51,53,51,54,51,55,51,56,51,57,52,48,52,49,52,50,52,51,52,52,52,53,52,54,52,55,52,56,52,57,53,48,53,49,53,50,53,51,53,52,53,53,53,54,53,55,53,56,53,57,54,48,54,49,54,50,54,51,54,52,54,53,54,54,54,55,54,56,54,57,55,48,55,49,55,50,55,51,55,52,55,53,55,54,55,55,55,56,55,57,56,48,56,49,56,50,56,51,56,52,56,53,56,54,56,55,56,56,56,57,57,48,57,49,57,50,57,51,57,52,57,53,57,54,57,55,57,56,57,57,32,123,58,32,32,32,32,32,10,41,105,110,100,101,120,32,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,115,108,105,99,101,32,111,102,32,108,101,110,103,116,104,32,44,32,115,108,105,99,101,32,105,110,100,101,120,32,115,116,97,114,116,115,32,97,116,32,32,98,117,116,32,101,110,100,115,32,97,116,32,48,120,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  function _pthread_mutexattr_settype() {}

  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() { return 0; }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }

   
  Module["_pthread_self"] = _pthread_self;

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _pthread_mutexattr_destroy() {}

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~010000000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~00004000 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }

  function _llvm_trap() {
      abort('trap!');
    }

  var _llvm_ctlz_i32=true;

  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Module.dynCall('iii', [0, arg]);
        if (ret !== 0) return;
      }
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_rwlock_rdlock() { return 0; }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;


  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i8=undefined;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((addr)>>2)]=fname;
      HEAP32[(((addr)+(4))>>2)]=0;
      HEAP32[(((addr)+(8))>>2)]=0;
      HEAP32[(((addr)+(12))>>2)]=0;
      return 1;
    }

  function _pthread_mutex_destroy() {}

  function _pthread_mutexattr_init() {}

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function _pthread_rwlock_unlock() { return 0; }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_key_create": _pthread_key_create, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___buildEnvironment": ___buildEnvironment, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "___setErrNo": ___setErrNo, "_pthread_key_delete": _pthread_key_delete, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "_pthread_getspecific": _pthread_getspecific, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "__emscripten_traverse_stack": __emscripten_traverse_stack, "_abort": _abort, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_setspecific": _pthread_setspecific, "_dladdr": _dladdr, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall4": ___syscall4, "_pthread_cond_destroy": _pthread_cond_destroy, "_llvm_trap": _llvm_trap, "_pthread_mutex_init": _pthread_mutex_init, "__Unwind_Backtrace": __Unwind_Backtrace, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_key_create=env._pthread_key_create;
  var __Unwind_FindEnclosingFunction=env.__Unwind_FindEnclosingFunction;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var _pthread_rwlock_unlock=env._pthread_rwlock_unlock;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___buildEnvironment=env.___buildEnvironment;
  var __Unwind_GetIPInfo=env.__Unwind_GetIPInfo;
  var _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy;
  var ___setErrNo=env.___setErrNo;
  var _pthread_key_delete=env._pthread_key_delete;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_rwlock_rdlock=env._pthread_rwlock_rdlock;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var _abort=env._abort;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var _pthread_setspecific=env._pthread_setspecific;
  var _dladdr=env._dladdr;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall4=env.___syscall4;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _llvm_trap=env._llvm_trap;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var __Unwind_Backtrace=env.__Unwind_Backtrace;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h27a2fd2e6d62165aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$idx$i$i = 0, $$idx$val = 0, $$idx$val$i$i = 0, $$idx$val$pre = 0, $$overflow = 0, $$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $iter$sroa$0$017 = 0, $ptr$0$i$i = 0, $return$0$sroa$speculated$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$idx$i$i = ((($0)) + 4|0);
 $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
 $5 = (($$idx$val$i$i) - ($4))|0;
 $6 = ($5>>>0)<($2>>>0);
 do {
  if ($6) {
   $$arith = (($4) + ($2))|0;
   $$overflow = ($$arith>>>0)<($4>>>0);
   if ($$overflow) {
    __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(5240,17);
    // unreachable;
   }
   $7 = $$idx$val$i$i << 1;
   $8 = ($$arith>>>0)>=($7>>>0);
   $return$0$sroa$speculated$i$i$i$i = $8 ? $$arith : $7;
   $9 = ($return$0$sroa$speculated$i$i$i$i|0)<(0);
   if ($9) {
    __ZN4core9panicking5panic17hf2309629b2721756E(2676);
    // unreachable;
   }
   $10 = ($$idx$val$i$i|0)==(0);
   if ($10) {
    $11 = (___rust_allocate($return$0$sroa$speculated$i$i$i$i,1)|0);
    $ptr$0$i$i = $11;
   } else {
    $12 = HEAP32[$0>>2]|0;
    $13 = (___rust_reallocate($12,$$idx$val$i$i,$return$0$sroa$speculated$i$i$i$i,1)|0);
    $ptr$0$i$i = $13;
   }
   $14 = ($ptr$0$i$i|0)==(0|0);
   if ($14) {
    __ZN5alloc3oom3oom17ha2998ef21a53f982E();
    // unreachable;
   } else {
    HEAP32[$0>>2] = $ptr$0$i$i;
    HEAP32[$$idx$i$i>>2] = $return$0$sroa$speculated$i$i$i$i;
    break;
   }
  }
 } while(0);
 $15 = ($2|0)==(0);
 if ($15) {
  return;
 }
 $$idx$val$pre = HEAP32[$3>>2]|0;
 $$idx$val = $$idx$val$pre;$iter$sroa$0$017 = 0;
 while(1) {
  $16 = (($iter$sroa$0$017) + 1)|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + ($$idx$val)|0);
  $19 = (($1) + ($iter$sroa$0$017)|0);
  $$val = HEAP8[$19>>0]|0;
  HEAP8[$18>>0] = $$val;
  $20 = (($$idx$val) + 1)|0;
  HEAP32[$3>>2] = $20;
  $exitcond = ($16|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$idx$val = $20;$iter$sroa$0$017 = $16;
  }
 }
 return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h80c2a148e28b9a5dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp7$sroa$0$0 = 0, $tmp7$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $8 = (___rust_allocate(4,1)|0);
   $tmp7$sroa$0$0 = 4;$tmp7$sroa$5$0 = $8;
  } else {
   $4 = $2 << 1;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17hf2309629b2721756E(2676);
    // unreachable;
   } else {
    $6 = HEAP32[$0>>2]|0;
    $7 = (___rust_reallocate($6,$2,$4,1)|0);
    $tmp7$sroa$0$0 = $4;$tmp7$sroa$5$0 = $7;
    break;
   }
  }
 } while(0);
 $9 = ($tmp7$sroa$5$0|0)==(0|0);
 if ($9) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $tmp7$sroa$5$0;
  HEAP32[$1>>2] = $tmp7$sroa$0$0;
  return;
 }
}
function __ZN4core6result13unwrap_failed17h0599078157cc6e6bE($0) {
 $0 = $0|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$idx1$i = 0, $$idx1$val$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0;
 var $not$$i$i$i$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 56|0;
 $error = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 5257;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 ;HEAP32[$error>>2]=HEAP32[$0>>2]|0;HEAP32[$error+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$0+12>>2]|0;
 $2 = HEAP32[714]|0;
 $3 = HEAP32[(2860)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$tmp7>>2] = $4;
 $6 = ((($tmp7)) + 4|0);
 HEAP32[$6>>2] = (66);
 $7 = ((($tmp7)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($tmp7)) + 12|0);
 HEAP32[$8>>2] = (67);
 HEAP32[$tmp2>>2] = $2;
 $9 = ((($tmp2)) + 4|0);
 HEAP32[$9>>2] = $3;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($tmp2)) + 16|0);
 HEAP32[$10>>2] = $tmp7;
 $11 = ((($tmp2)) + 20|0);
 HEAP32[$11>>2] = 2;
 __THREW__ = 0;
 invoke_vii(68,($tmp2|0),(2844|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 $$idx1$i = ((($error)) + 8|0);
 $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
 $not$$i$i$i$i$i = ($$idx1$val$i|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($13|0);
  // unreachable;
 }
 $$idx$i = ((($error)) + 4|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 ___rust_deallocate($$idx$val$i,$$idx1$val$i,1);
 ___resumeException($13|0);
 // unreachable;
}
function __ZN4drop17h8fd25e300f123baaE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h7f4511395b6d9de2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN51__LT_sha1__Digest_u20_as_u20_core__fmt__Display_GT_3fmt17hf35a1975467f52ccE($2,$1)|0);
 return ($3|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h52db261aac16412dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load$i$i$i$i = 0, $$fca$1$load$i$i$i$i = 0, $$fca$1$load$i$i$pre$i$i = 0, $$fca$2$load$i$i$i$i = 0, $$fca$3$load$i$i$i$i = 0, $$idx$i$i$i = 0, $$idx$val$i$i$i = 0, $$pre$i$i$i = 0, $$repack10$i$i$i$i = 0, $$repack12$i$i$i$i = 0, $$repack14$i$i$i$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i$i$i$i = 0, $buf21$i$i$i$i = 0, $pos$0$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep17$i$i$i$i = 0, $scevgep18$i$i$i$i = 0, $scevgep1819$i$i$i$i = 0, $scevgep22$i$i$i$i = 0, $scevgep2223$i$i$i$i = 0, $tmp9$i$i = 0;
 var $umax$i$i$i$i = 0, $umax20$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $buf$i$i$i$i = sp + 16|0;
 $tmp9$i$i = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($1>>>0)<(128);
 if ($4) {
  $5 = $1&255;
  $6 = ((($3)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$idx$i$i$i = ((($3)) + 4|0);
  $$idx$val$i$i$i = HEAP32[$$idx$i$i$i>>2]|0;
  $8 = ($7|0)==($$idx$val$i$i$i|0);
  if ($8) {
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h80c2a148e28b9a5dE($3);
   $$pre$i$i$i = HEAP32[$6>>2]|0;
   $11 = $$pre$i$i$i;
  } else {
   $11 = $7;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($11)|0);
  HEAP8[$10>>0] = $5;
  $12 = HEAP32[$6>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$6>>2] = $13;
  STACKTOP = sp;return 0;
 }
 $buf21$i$i$i$i = $buf$i$i$i$i;
 $scevgep$i$i$i$i = ((($buf$i$i$i$i)) + 4|0);
 $scevgep17$i$i$i$i = $scevgep$i$i$i$i;
 $scevgep18$i$i$i$i = ((($buf$i$i$i$i)) + 1|0);
 $scevgep1819$i$i$i$i = $scevgep18$i$i$i$i;
 $14 = ($scevgep17$i$i$i$i>>>0)>($scevgep1819$i$i$i$i>>>0);
 $umax$i$i$i$i = $14 ? $scevgep17$i$i$i$i : $scevgep1819$i$i$i$i;
 $umax20$i$i$i$i = $umax$i$i$i$i;
 $15 = (0 - ($buf21$i$i$i$i))|0;
 $scevgep22$i$i$i$i = (($umax20$i$i$i$i) + ($15)|0);
 $scevgep2223$i$i$i$i = $scevgep22$i$i$i$i;
 _memset(($buf$i$i$i$i|0),0,($scevgep2223$i$i$i$i|0))|0;
 $16 = ($1>>>0)<(2048);
 do {
  if ($16) {
   $17 = $1 >>> 6;
   $18 = $17 & 31;
   $19 = $18&255;
   $20 = ((($buf$i$i$i$i)) + 2|0);
   $21 = $19 | -64;
   HEAP8[$20>>0] = $21;
   $22 = $1 & 63;
   $23 = $22&255;
   $24 = ((($buf$i$i$i$i)) + 3|0);
   $25 = $23 | -128;
   HEAP8[$24>>0] = $25;
   $$fca$1$load$i$i$pre$i$i = HEAP8[$scevgep18$i$i$i$i>>0]|0;
   $$fca$1$load$i$i$i$i = $$fca$1$load$i$i$pre$i$i;$$fca$2$load$i$i$i$i = $21;$$fca$3$load$i$i$i$i = $25;$pos$0$i$i$i$i = 2;
  } else {
   $26 = ($1>>>0)<(65536);
   if ($26) {
    $27 = $1 >>> 12;
    $28 = $27 & 15;
    $29 = $28&255;
    $30 = $29 | -32;
    HEAP8[$scevgep18$i$i$i$i>>0] = $30;
    $31 = $1 >>> 6;
    $32 = $31 & 63;
    $33 = $32&255;
    $34 = ((($buf$i$i$i$i)) + 2|0);
    $35 = $33 | -128;
    HEAP8[$34>>0] = $35;
    $36 = $1 & 63;
    $37 = $36&255;
    $38 = ((($buf$i$i$i$i)) + 3|0);
    $39 = $37 | -128;
    HEAP8[$38>>0] = $39;
    $$fca$1$load$i$i$i$i = $30;$$fca$2$load$i$i$i$i = $35;$$fca$3$load$i$i$i$i = $39;$pos$0$i$i$i$i = 1;
    break;
   } else {
    $40 = $1 >>> 18;
    $41 = $40 & 7;
    $42 = $41&255;
    $43 = $42 | -16;
    HEAP8[$buf$i$i$i$i>>0] = $43;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45&255;
    $47 = $46 | -128;
    HEAP8[$scevgep18$i$i$i$i>>0] = $47;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49&255;
    $51 = ((($buf$i$i$i$i)) + 2|0);
    $52 = $50 | -128;
    HEAP8[$51>>0] = $52;
    $53 = $1 & 63;
    $54 = $53&255;
    $55 = ((($buf$i$i$i$i)) + 3|0);
    $56 = $54 | -128;
    HEAP8[$55>>0] = $56;
    $$fca$1$load$i$i$i$i = $47;$$fca$2$load$i$i$i$i = $52;$$fca$3$load$i$i$i$i = $56;$pos$0$i$i$i$i = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load$i$i$i$i = HEAP8[$buf$i$i$i$i>>0]|0;
 HEAP8[$tmp9$i$i>>0] = $$fca$0$load$i$i$i$i;
 $$repack10$i$i$i$i = ((($tmp9$i$i)) + 1|0);
 HEAP8[$$repack10$i$i$i$i>>0] = $$fca$1$load$i$i$i$i;
 $$repack12$i$i$i$i = ((($tmp9$i$i)) + 2|0);
 HEAP8[$$repack12$i$i$i$i>>0] = $$fca$2$load$i$i$i$i;
 $$repack14$i$i$i$i = ((($tmp9$i$i)) + 3|0);
 HEAP8[$$repack14$i$i$i$i>>0] = $$fca$3$load$i$i$i$i;
 $57 = ((($tmp9$i$i)) + 4|0);
 HEAP32[$57>>2] = $pos$0$i$i$i$i;
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp9$i$i);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h27a2fd2e6d62165aE($3,$$sreg$field,$$sreg$field2);
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hab13550c701a111cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $tmp3$i = 0, $tmp5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3$i = sp + 24|0;
 $tmp5$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$tmp3$i>>2] = $2;
 ;HEAP32[$tmp5$i>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3$i,8,$tmp5$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h983826f6a6667ffdE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h27a2fd2e6d62165aE($3,$1,$2);
 return 0;
}
function _digest($0) {
 $0 = $0|0;
 var $$idx$val$i$i = 0, $$idx1$val$i$i = 0, $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field7 = 0, $$sreg1$index6 = 0, $$sreg2$field = 0, $$sreg2$field10 = 0, $$sreg2$index9 = 0, $$sroa_idx29$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $cstr = 0, $digest$sroa$0 = 0, $e$sroa$4$0$$sroa_idx47$i = 0, $e$sroa$5$0$$sroa_idx49$i = 0, $e$sroa$6$0$$sroa_idx51$i = 0, $m = 0, $not$$i$i$i$i$i$i = 0, $not$$i$i$i$i$i12$i = 0, $self$i = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$12$0$$sroa_idx40$i = 0;
 var $self$sroa$12$0$copyload$i = 0, $self$sroa$13$0$$sroa_idx43$i = 0, $self$sroa$13$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx33$i = 0, $self$sroa$6$0$copyload$i = 0, $self$sroa$9$0$$sroa_idx36$i = 0, $self$sroa$9$0$copyload$i = 0, $switch3$i = 0, $tmp0$sroa$4$0$$sroa_idx2$i$i = 0, $tmp0$sroa$5$0$$sroa_idx4$i$i = 0, $tmp1$i = 0, $tmp10 = 0, $tmp2$i = 0, $tmp3$i$i = 0, $tmp3$sroa$4$0$$sroa_idx19$i = 0, $tmp3$sroa$5$0$$sroa_idx21$i = 0, $tmp3$sroa$624$0$$sroa_idx26$i = 0, $tmp3$sroa$7$0$$sroa_idx28$i = 0, $tmp5$i = 0, $tmp5$i$i = 0;
 var $tmp7 = 0, $tmp8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $1 = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $tmp5$i = sp + 296|0;
 $tmp1$i = sp + 280|0;
 $tmp2$i = sp + 264|0;
 $tmp3$i$i = sp + 256|0;
 $tmp5$i$i = sp + 232|0;
 $self$i = sp + 312|0;
 $buf$i = sp + 216|0;
 $tmp8$i = sp + 208|0;
 $m = sp + 112|0;
 $digest$sroa$0 = sp + 96|0;
 $cstr = sp + 88|0;
 $tmp7 = sp + 64|0;
 $tmp10 = sp + 40|0;
 __ZN3std3ffi5c_str4CStr8from_ptr17hccf32a6a0d5018c7E($3,$0);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index3 = ((($3)) + 4|0);
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0;
 __ZN4sha14Sha13new17h7cb51e5f28df2658E($m);
 __ZN3std3ffi5c_str4CStr8to_bytes17h354e9e9265613016E($2,$$sreg$field,$$sreg$field4);
 $$sreg1$field = HEAP32[$2>>2]|0;
 $$sreg1$index6 = ((($2)) + 4|0);
 $$sreg1$field7 = HEAP32[$$sreg1$index6>>2]|0;
 __ZN4sha14Sha16update17ha59e12737c3d1516E($m,$$sreg1$field,$$sreg1$field7);
 __ZN4sha14Sha16digest17h81db70ae2ae4eda5E($tmp7,$m);
 HEAP32[$self$i>>2] = $tmp7;
 HEAP32[$buf$i>>2] = 1;
 $tmp0$sroa$4$0$$sroa_idx2$i$i = ((($buf$i)) + 4|0);
 HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i$i>>2] = 0;
 $tmp0$sroa$5$0$$sroa_idx4$i$i = ((($buf$i)) + 8|0);
 HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i$i>>2] = 0;
 $4 = HEAP32[654]|0;
 $5 = HEAP32[(2620)>>2]|0;
 $6 = $self$i;
 HEAP32[$tmp8$i>>2] = $6;
 $7 = ((($tmp8$i)) + 4|0);
 HEAP32[$7>>2] = (69);
 HEAP32[$tmp3$i$i>>2] = $buf$i;
 HEAP32[$tmp5$i$i>>2] = $4;
 $tmp3$sroa$4$0$$sroa_idx19$i = ((($tmp5$i$i)) + 4|0);
 HEAP32[$tmp3$sroa$4$0$$sroa_idx19$i>>2] = $5;
 $tmp3$sroa$5$0$$sroa_idx21$i = ((($tmp5$i$i)) + 8|0);
 HEAP32[$tmp3$sroa$5$0$$sroa_idx21$i>>2] = 0;
 $tmp3$sroa$624$0$$sroa_idx26$i = ((($tmp5$i$i)) + 16|0);
 HEAP32[$tmp3$sroa$624$0$$sroa_idx26$i>>2] = $tmp8$i;
 $tmp3$sroa$7$0$$sroa_idx28$i = ((($tmp5$i$i)) + 20|0);
 HEAP32[$tmp3$sroa$7$0$$sroa_idx28$i>>2] = 1;
 __THREW__ = 0;
 (invoke_iiii(70,($tmp3$i$i|0),(8|0),($tmp5$i$i|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L1: do {
  if (!($9)) {
   $11 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i$i>>2]|0;
   $12 = HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i$i>>2]|0;
   $13 = ($12>>>0)<($11>>>0);
   if ($13) {
    __THREW__ = 0;
    invoke_vi(71,(2656|0));
    $14 = __THREW__; __THREW__ = 0;
    break;
   }
   $15 = ($11|0)==(0);
   do {
    if ($15) {
     $16 = $buf$i;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($16) + 4)|0;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $22 = $buf$i;
     $23 = $22;
     HEAP32[$23>>2] = 1;
     $24 = (($22) + 4)|0;
     $25 = $24;
     HEAP32[$25>>2] = 0;
     $not$$i$i$i$i$i12$i = ($21|0)==(0);
     if (!($not$$i$i$i$i$i12$i)) {
      $26 = $18;
      ___rust_deallocate($26,$21,1);
     }
    } else {
     $27 = ($12|0)==($11|0);
     if (!($27)) {
      $28 = HEAP32[$buf$i>>2]|0;
      $29 = (___rust_reallocate($28,$12,$11,1)|0);
      $30 = ($29|0)==(0|0);
      if ($30) {
       __THREW__ = 0;
       invoke_v(72);
       $31 = __THREW__; __THREW__ = 0;
       break L1;
      } else {
       HEAP32[$buf$i>>2] = $29;
       HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i$i>>2] = $11;
       break;
      }
     }
    }
   } while(0);
   ;HEAP32[$digest$sroa$0>>2]=HEAP32[$buf$i>>2]|0;HEAP32[$digest$sroa$0+4>>2]=HEAP32[$buf$i+4>>2]|0;HEAP32[$digest$sroa$0+8>>2]=HEAP32[$buf$i+8>>2]|0;
   ;HEAP32[$tmp2$i>>2]=HEAP32[$digest$sroa$0>>2]|0;HEAP32[$tmp2$i+4>>2]=HEAP32[$digest$sroa$0+4>>2]|0;HEAP32[$tmp2$i+8>>2]=HEAP32[$digest$sroa$0+8>>2]|0;
   __ZN106__LT_collections__string__String_u20_as_u20_core__convert__Into_LT_collections__vec__Vec_LT_u8_GT__GT__GT_4into17h685d95728ce4f82cE($tmp1$i,$tmp2$i);
   __ZN3std3ffi5c_str7CString4_new17hdb108839b3ef2883E($tmp10,$tmp1$i);
   $self$sroa$0$0$copyload$i = HEAP32[$tmp10>>2]|0;
   $self$sroa$6$0$$sroa_idx33$i = ((($tmp10)) + 4|0);
   $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx33$i>>2]|0;
   $self$sroa$9$0$$sroa_idx36$i = ((($tmp10)) + 8|0);
   $self$sroa$9$0$copyload$i = HEAP32[$self$sroa$9$0$$sroa_idx36$i>>2]|0;
   $switch3$i = ($self$sroa$0$0$copyload$i|0)==(1);
   if ($switch3$i) {
    $self$sroa$13$0$$sroa_idx43$i = ((($tmp10)) + 16|0);
    $self$sroa$13$0$copyload$i = HEAP32[$self$sroa$13$0$$sroa_idx43$i>>2]|0;
    $self$sroa$12$0$$sroa_idx40$i = ((($tmp10)) + 12|0);
    $self$sroa$12$0$copyload$i = HEAP32[$self$sroa$12$0$$sroa_idx40$i>>2]|0;
    HEAP32[$tmp5$i>>2] = $self$sroa$6$0$copyload$i;
    $e$sroa$4$0$$sroa_idx47$i = ((($tmp5$i)) + 4|0);
    HEAP32[$e$sroa$4$0$$sroa_idx47$i>>2] = $self$sroa$9$0$copyload$i;
    $e$sroa$5$0$$sroa_idx49$i = ((($tmp5$i)) + 8|0);
    HEAP32[$e$sroa$5$0$$sroa_idx49$i>>2] = $self$sroa$12$0$copyload$i;
    $e$sroa$6$0$$sroa_idx51$i = ((($tmp5$i)) + 12|0);
    HEAP32[$e$sroa$6$0$$sroa_idx51$i>>2] = $self$sroa$13$0$copyload$i;
    __ZN4core6result13unwrap_failed17h0599078157cc6e6bE($tmp5$i);
    // unreachable;
   }
   HEAP32[$cstr>>2] = $self$sroa$6$0$copyload$i;
   $$sroa_idx29$i = ((($cstr)) + 4|0);
   HEAP32[$$sroa_idx29$i>>2] = $self$sroa$9$0$copyload$i;
   __ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17h28f74963dd69ab05E($1,$cstr);
   $$sreg2$field = HEAP32[$1>>2]|0;
   $$sreg2$index9 = ((($1)) + 4|0);
   $$sreg2$field10 = HEAP32[$$sreg2$index9>>2]|0;
   $33 = (__ZN3std3ffi5c_str4CStr6as_ptr17h37ea75dc7b793328E($$sreg2$field,$$sreg2$field10)|0);
   $34 = HEAP32[$$sroa_idx29$i>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    STACKTOP = sp;return ($33|0);
   }
   $36 = HEAP32[$cstr>>2]|0;
   ___rust_deallocate($36,$34,1);
   STACKTOP = sp;return ($33|0);
  }
 } while(0);
 $10 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 $$idx1$val$i$i = HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i$i>>2]|0;
 $not$$i$i$i$i$i$i = ($$idx1$val$i$i|0)==(0);
 if ($not$$i$i$i$i$i$i) {
  ___resumeException($10|0);
  // unreachable;
 }
 $$idx$val$i$i = HEAP32[$buf$i>>2]|0;
 ___rust_deallocate($$idx$val$i$i,$$idx1$val$i$i,1);
 ___resumeException($10|0);
 // unreachable;
 return (0)|0;
}
function __ZN4sha14Sha13new17h7cb51e5f28df2658E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $scevgep = 0, $scevgep13 = 0, $scevgep1314 = 0, $scevgep8 = 0, $scevgep9 = 0, $scevgep910 = 0, $tmp0$sroa$0$0$$sroa_idx = 0, $tmp0$sroa$4$0$$sroa_idx = 0, $tmp1 = 0, $tmp112 = 0, $umax = 0, $umax11 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp1 = sp;
 $tmp112 = $tmp1;
 $scevgep = ((($tmp1)) + 64|0);
 $scevgep8 = $scevgep;
 $scevgep9 = ((($tmp1)) + 1|0);
 $scevgep910 = $scevgep9;
 $1 = ($scevgep8>>>0)>($scevgep910>>>0);
 $umax = $1 ? $scevgep8 : $scevgep910;
 $umax11 = $umax;
 $2 = (0 - ($tmp112))|0;
 $scevgep13 = (($umax11) + ($2)|0);
 $scevgep1314 = $scevgep13;
 _memset(($tmp1|0),0,($scevgep1314|0))|0;
 ;HEAP32[$0>>2]=HEAP32[2176>>2]|0;HEAP32[$0+4>>2]=HEAP32[2176+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[2176+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[2176+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[2176+16>>2]|0;
 $tmp0$sroa$0$0$$sroa_idx = ((($0)) + 20|0);
 HEAP32[$tmp0$sroa$0$0$$sroa_idx>>2] = 0;
 $tmp0$sroa$4$0$$sroa_idx = ((($0)) + 24|0);
 dest=$tmp0$sroa$4$0$$sroa_idx; src=$tmp1; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($0)) + 88|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4sha14Sha16update17ha59e12737c3d1516E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $input$sroa$0$0$i = 0, $input$sroa$9$0$i = 0, $iter$sroa$0$0$i3$in = 0, $iter$sroa$5$0$i4 = 0, $return$0$sroa$speculated$i$i = 0, $return$0$sroa$speculated$i$i$i = 0, $switchtmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 88|0);
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre = ((($0)) + 24|0);
 do {
  if ($6) {
   $input$sroa$0$0$i = $1;$input$sroa$9$0$i = $2;
  } else {
   $7 = (64 - ($5))|0;
   $8 = ($7>>>0)>=($2>>>0);
   $return$0$sroa$speculated$i$i = $8 ? $2 : $7;
   $9 = (($return$0$sroa$speculated$i$i) + ($5))|0;
   $10 = ($9>>>0)<($5>>>0);
   if ($10) {
    __ZN4core5slice22slice_index_order_fail17h9c242137b61045c7E($5,$9);
    // unreachable;
   }
   $11 = ($9>>>0)>(64);
   if ($11) {
    __ZN4core5slice20slice_index_len_fail17h4749ae34ab6ab5b2E($9,64);
    // unreachable;
   }
   $12 = ($return$0$sroa$speculated$i$i|0)==(0);
   if (!($12)) {
    $13 = (((($0)) + 24|0) + ($5)|0);
    _memcpy(($13|0),($1|0),($return$0$sroa$speculated$i$i|0))|0;
   }
   $14 = ($9|0)==(64);
   if ($14) {
    $15 = $3;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($15) + 4)|0;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = (_i64Add(($17|0),($20|0),64,0)|0);
    $22 = tempRet0;
    $23 = $3;
    $24 = $23;
    HEAP32[$24>>2] = $21;
    $25 = (($23) + 4)|0;
    $26 = $25;
    HEAP32[$26>>2] = $22;
    __ZN4sha19Sha1State7process17h72516447efce2567E($0,$$pre,64);
    HEAP32[$4>>2] = 0;
    $27 = (($1) + ($return$0$sroa$speculated$i$i)|0);
    $28 = (($2) - ($return$0$sroa$speculated$i$i))|0;
    $input$sroa$0$0$i = $27;$input$sroa$9$0$i = $28;
    break;
   }
   $29 = HEAP32[$4>>2]|0;
   $30 = (($29) + ($return$0$sroa$speculated$i$i))|0;
   HEAP32[$4>>2] = $30;
   return;
  }
 } while(0);
 $31 = ($input$sroa$9$0$i|0)==(0);
 if ($31) {
  return;
 } else {
  $iter$sroa$0$0$i3$in = $input$sroa$0$0$i;$iter$sroa$5$0$i4 = $input$sroa$9$0$i;
 }
 while(1) {
  $32 = ($iter$sroa$5$0$i4>>>0)>(64);
  $return$0$sroa$speculated$i$i$i = $32 ? 64 : $iter$sroa$5$0$i4;
  $33 = (($iter$sroa$0$0$i3$in) + ($return$0$sroa$speculated$i$i$i)|0);
  $34 = (($iter$sroa$5$0$i4) - ($return$0$sroa$speculated$i$i$i))|0;
  $switchtmp$i = ($iter$sroa$0$0$i3$in|0)==(0|0);
  if ($switchtmp$i) {
   label = 17;
   break;
  }
  $35 = ($return$0$sroa$speculated$i$i$i|0)==(64);
  if ($35) {
   $36 = $3;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (_i64Add(($38|0),($41|0),64,0)|0);
   $43 = tempRet0;
   $44 = $3;
   $45 = $44;
   HEAP32[$45>>2] = $42;
   $46 = (($44) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = $43;
   __ZN4sha19Sha1State7process17h72516447efce2567E($0,$iter$sroa$0$0$i3$in,64);
  } else {
   _memcpy(($$pre|0),($iter$sroa$0$0$i3$in|0),($return$0$sroa$speculated$i$i$i|0))|0;
   HEAP32[$4>>2] = $return$0$sroa$speculated$i$i$i;
  }
  $48 = ($34|0)==(0);
  if ($48) {
   label = 17;
   break;
  } else {
   $iter$sroa$0$0$i3$in = $33;$iter$sroa$5$0$i4 = $34;
  }
 }
 if ((label|0) == 17) {
  return;
 }
}
function __ZN4sha19Sha1State7process17h72516447efce2567E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $a$0118 = 0, $b$0117 = 0, $b$0117$phi = 0, $c$0116 = 0, $d$0115 = 0, $d$0115$phi = 0;
 var $e$0114 = 0, $e$0114$phi = 0, $exitcond = 0, $iter$sroa$0$0$in120 = 0, $iter$sroa$10$0122 = 0, $iter$sroa$5$0121 = 0, $iter2$sroa$0$0119 = 0, $iter2$sroa$0$0119$phi = 0, $iter4$sroa$0$0113 = 0, $iter4$sroa$0$0113$phi = 0, $return$0$sroa$speculated$i$i$i = 0, $scevgep = 0, $scevgep128 = 0, $scevgep129 = 0, $scevgep129130 = 0, $tmp99$sroa$0$0 = 0, $tmp99$sroa$8$0 = 0, $uglygep = 0, $uglygep134 = 0, $umax = 0;
 var $umax131132 = 0, $words = 0, $words133 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $words = sp;
 $words133 = $words;
 $scevgep = ((($words)) + 320|0);
 $scevgep128 = $scevgep;
 $scevgep129 = ((($words)) + 4|0);
 $scevgep129130 = $scevgep129;
 $3 = ($scevgep128>>>0)>($scevgep129130>>>0);
 $umax = $3 ? $scevgep128 : $scevgep129130;
 $umax131132 = $umax;
 $4 = $words133 ^ -1;
 $uglygep = (($umax131132) + ($4)|0);
 $uglygep134 = $uglygep;
 $5 = (($uglygep134) + 4)|0;
 $6 = $5 & -4;
 _memset(($words|0),0,($6|0))|0;
 $7 = ($2|0)==(0);
 L1: do {
  if ($7) {
   $61 = 17;$iter2$sroa$0$0119 = 16;
  } else {
   $iter$sroa$0$0$in120 = $1;$iter$sroa$10$0122 = 0;$iter$sroa$5$0121 = $2;
   while(1) {
    $8 = ($iter$sroa$5$0121>>>0)>(4);
    $return$0$sroa$speculated$i$i$i = $8 ? 4 : $iter$sroa$5$0121;
    $9 = (($iter$sroa$0$0$in120) + ($return$0$sroa$speculated$i$i$i)|0);
    $10 = (($iter$sroa$5$0121) - ($return$0$sroa$speculated$i$i$i))|0;
    $11 = (($iter$sroa$10$0122) + 1)|0;
    $12 = ($return$0$sroa$speculated$i$i$i>>>0)>(3);
    if (!($12)) {
     label = 16;
     break;
    }
    $13 = ($iter$sroa$10$0122>>>0)<(80);
    if (!($13)) {
     label = 17;
     break;
    }
    $14 = ((($iter$sroa$0$0$in120)) + 3|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ((($iter$sroa$0$0$in120)) + 2|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $19 << 8;
    $21 = $20 | $16;
    $22 = ((($iter$sroa$0$0$in120)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 << 16;
    $26 = $21 | $25;
    $27 = HEAP8[$iter$sroa$0$0$in120>>0]|0;
    $28 = $27&255;
    $29 = $28 << 24;
    $30 = (($words) + ($iter$sroa$10$0122<<2)|0);
    $31 = $26 | $29;
    HEAP32[$30>>2] = $31;
    $32 = ($10|0)==(0);
    if ($32) {
     $61 = 17;$iter2$sroa$0$0119 = 16;
     break L1;
    } else {
     $iter$sroa$0$0$in120 = $9;$iter$sroa$10$0122 = $11;$iter$sroa$5$0121 = $10;
    }
   }
   if ((label|0) == 16) {
    __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2196,3,$return$0$sroa$speculated$i$i$i);
    // unreachable;
   }
   else if ((label|0) == 17) {
    __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2196,$iter$sroa$10$0122,80);
    // unreachable;
   }
  }
 } while(0);
 while(1) {
  $42 = (($iter2$sroa$0$0119) + -3)|0;
  $43 = (($iter2$sroa$0$0119) + -8)|0;
  $44 = (($iter2$sroa$0$0119) + -14)|0;
  $45 = (($iter2$sroa$0$0119) + -16)|0;
  $46 = (($words) + ($42<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($words) + ($43<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 ^ $47;
  $51 = (($words) + ($44<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $50 ^ $52;
  $54 = (($words) + ($45<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $53 ^ $55;
  $57 = $56 << 1;
  $58 = $56 >>> 31;
  $59 = $57 | $58;
  $60 = (($words) + ($iter2$sroa$0$0119<<2)|0);
  HEAP32[$60>>2] = $59;
  $62 = ($61>>>0)<(80);
  $63 = (($61) + 1)|0;
  if ($62) {
   $iter2$sroa$0$0119$phi = $61;$61 = $63;$iter2$sroa$0$0119 = $iter2$sroa$0$0119$phi;
  } else {
   break;
  }
 }
 $33 = HEAP32[$0>>2]|0;
 $34 = ((($0)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($0)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($0)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $96 = 1;$a$0118 = $33;$b$0117 = $35;$c$0116 = $37;$d$0115 = $39;$e$0114 = $41;$iter4$sroa$0$0113 = 0;
 while(1) {
  $71 = ($iter4$sroa$0$0113>>>0)<(20);
  do {
   if ($71) {
    $72 = $c$0116 ^ $d$0115;
    $73 = $72 & $b$0117;
    $74 = $73 ^ $d$0115;
    $tmp99$sroa$0$0 = $74;$tmp99$sroa$8$0 = 1518500249;
   } else {
    $83 = ($iter4$sroa$0$0113>>>0)<(40);
    if ($83) {
     $75 = $c$0116 ^ $d$0115;
     $76 = $75 ^ $b$0117;
     $tmp99$sroa$0$0 = $76;$tmp99$sroa$8$0 = 1859775393;
     break;
    }
    $84 = ($iter4$sroa$0$0113>>>0)<(60);
    if ($84) {
     $77 = $b$0117 & $c$0116;
     $78 = $b$0117 | $c$0116;
     $79 = $78 & $d$0115;
     $80 = $79 | $77;
     $tmp99$sroa$0$0 = $80;$tmp99$sroa$8$0 = -1894007588;
     break;
    } else {
     $81 = $c$0116 ^ $d$0115;
     $82 = $81 ^ $b$0117;
     $tmp99$sroa$0$0 = $82;$tmp99$sroa$8$0 = -899497514;
     break;
    }
   }
  } while(0);
  $85 = $a$0118 << 5;
  $86 = $a$0118 >>> 27;
  $87 = $85 | $86;
  $88 = (($words) + ($iter4$sroa$0$0113<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + ($e$0114))|0;
  $91 = (($90) + ($tmp99$sroa$8$0))|0;
  $92 = (($91) + ($tmp99$sroa$0$0))|0;
  $65 = (($92) + ($89))|0;
  $93 = $b$0117 << 30;
  $94 = $b$0117 >>> 2;
  $68 = $93 | $94;
  $95 = (($96) + 1)|0;
  $exitcond = ($95|0)==(81);
  if ($exitcond) {
   break;
  } else {
   $iter4$sroa$0$0113$phi = $96;$e$0114$phi = $d$0115;$d$0115$phi = $c$0116;$b$0117$phi = $a$0118;$96 = $95;$a$0118 = $65;$c$0116 = $68;$iter4$sroa$0$0113 = $iter4$sroa$0$0113$phi;$e$0114 = $e$0114$phi;$d$0115 = $d$0115$phi;$b$0117 = $b$0117$phi;
  }
 }
 $64 = (($33) + ($65))|0;
 HEAP32[$0>>2] = $64;
 $66 = (($35) + ($a$0118))|0;
 HEAP32[$34>>2] = $66;
 $67 = (($37) + ($68))|0;
 HEAP32[$36>>2] = $67;
 $69 = (($39) + ($c$0116))|0;
 HEAP32[$38>>2] = $69;
 $70 = (($41) + ($d$0115))|0;
 HEAP32[$40>>2] = $70;
 STACKTOP = sp;return;
}
function __ZN4sha14Sha16digest17h81db70ae2ae4eda5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $extra$1$sroa_idx = 0, $extra$2$sroa_idx = 0, $extra$3$sroa_idx = 0, $extra$4$sroa_idx = 0, $extra$5$sroa_idx = 0, $extra$6$sroa_idx = 0, $extra$7$sroa_idx = 0, $last = 0, $last73 = 0, $scevgep = 0, $scevgep69 = 0, $scevgep70 = 0, $scevgep7071 = 0;
 var $scevgep74 = 0, $scevgep7475 = 0, $state = 0, $umax = 0, $umax72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $state = sp + 8|0;
 $extra = sp;
 $last = sp + 32|0;
 $last73 = $last;
 ;HEAP32[$state>>2]=HEAP32[$1>>2]|0;HEAP32[$state+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$state+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$state+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$state+16>>2]=HEAP32[$1+16>>2]|0;
 $2 = ((($1)) + 88|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_i64Add(($10|0),0,($5|0),($8|0))|0);
 $12 = tempRet0;
 $13 = (_bitshift64Shl(($11|0),($12|0),3)|0);
 $14 = tempRet0;
 $15 = (_bitshift64Lshr(($11|0),($12|0),53)|0);
 $16 = tempRet0;
 $17 = $15&255;
 $18 = (_bitshift64Lshr(($11|0),($12|0),45)|0);
 $19 = tempRet0;
 $20 = $18&255;
 $21 = (_bitshift64Lshr(($11|0),($12|0),37)|0);
 $22 = tempRet0;
 $23 = $21&255;
 $24 = (_bitshift64Lshr(($11|0),($12|0),29)|0);
 $25 = tempRet0;
 $26 = $24&255;
 $27 = (_bitshift64Lshr(($11|0),($12|0),21)|0);
 $28 = tempRet0;
 $29 = $27&255;
 $30 = (_bitshift64Lshr(($11|0),($12|0),13)|0);
 $31 = tempRet0;
 $32 = $30&255;
 $33 = (_bitshift64Lshr(($11|0),($12|0),5)|0);
 $34 = tempRet0;
 $35 = $33&255;
 $36 = $13&255;
 HEAP8[$extra>>0] = $17;
 $extra$1$sroa_idx = ((($extra)) + 1|0);
 HEAP8[$extra$1$sroa_idx>>0] = $20;
 $extra$2$sroa_idx = ((($extra)) + 2|0);
 HEAP8[$extra$2$sroa_idx>>0] = $23;
 $extra$3$sroa_idx = ((($extra)) + 3|0);
 HEAP8[$extra$3$sroa_idx>>0] = $26;
 $extra$4$sroa_idx = ((($extra)) + 4|0);
 HEAP8[$extra$4$sroa_idx>>0] = $29;
 $extra$5$sroa_idx = ((($extra)) + 5|0);
 HEAP8[$extra$5$sroa_idx>>0] = $32;
 $extra$6$sroa_idx = ((($extra)) + 6|0);
 HEAP8[$extra$6$sroa_idx>>0] = $35;
 $extra$7$sroa_idx = ((($extra)) + 7|0);
 HEAP8[$extra$7$sroa_idx>>0] = $36;
 $scevgep = ((($last)) + 128|0);
 $scevgep69 = $scevgep;
 $scevgep70 = ((($last)) + 1|0);
 $scevgep7071 = $scevgep70;
 $37 = ($scevgep69>>>0)>($scevgep7071>>>0);
 $umax = $37 ? $scevgep69 : $scevgep7071;
 $umax72 = $umax;
 $38 = (0 - ($last73))|0;
 $scevgep74 = (($umax72) + ($38)|0);
 $scevgep7475 = $scevgep74;
 _memset(($last|0),0,($scevgep7475|0))|0;
 $39 = ($10>>>0)>(128);
 if ($39) {
  __ZN4core5slice20slice_index_len_fail17h4749ae34ab6ab5b2E($10,128);
  // unreachable;
 }
 $40 = ((($1)) + 24|0);
 $66 = ($10>>>0)>(64);
 if ($66) {
  __ZN4core5slice20slice_index_len_fail17h4749ae34ab6ab5b2E($10,64);
  // unreachable;
 }
 $67 = ($10|0)==(0);
 if ($67) {
  HEAP8[$last>>0] = -128;
 } else {
  _memcpy(($last|0),($40|0),($10|0))|0;
  $41 = (($last) + ($10)|0);
  HEAP8[$41>>0] = -128;
  $42 = ($10>>>0)<(56);
  if (!($42)) {
   $54 = ((($last)) + 120|0);
   $55 = $extra;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = $54;
   $62 = $61;
   HEAP8[$62>>0]=$57&255;HEAP8[$62+1>>0]=($57>>8)&255;HEAP8[$62+2>>0]=($57>>16)&255;HEAP8[$62+3>>0]=$57>>24;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP8[$64>>0]=$60&255;HEAP8[$64+1>>0]=($60>>8)&255;HEAP8[$64+2>>0]=($60>>16)&255;HEAP8[$64+3>>0]=$60>>24;
   __ZN4sha19Sha1State7process17h72516447efce2567E($state,$last,64);
   $65 = ((($last)) + 64|0);
   __ZN4sha19Sha1State7process17h72516447efce2567E($state,$65,64);
   ;HEAP32[$0>>2]=HEAP32[$state>>2]|0;HEAP32[$0+4>>2]=HEAP32[$state+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$state+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$state+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$state+16>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $43 = ((($last)) + 56|0);
 $44 = $extra;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $43;
 $51 = $50;
 HEAP8[$51>>0]=$46&255;HEAP8[$51+1>>0]=($46>>8)&255;HEAP8[$51+2>>0]=($46>>16)&255;HEAP8[$51+3>>0]=$46>>24;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP8[$53>>0]=$49&255;HEAP8[$53+1>>0]=($49>>8)&255;HEAP8[$53+2>>0]=($49>>16)&255;HEAP8[$53+3>>0]=$49>>24;
 __ZN4sha19Sha1State7process17h72516447efce2567E($state,$last,64);
 ;HEAP32[$0>>2]=HEAP32[$state>>2]|0;HEAP32[$0+4>>2]=HEAP32[$state+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$state+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$state+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$state+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN51__LT_sha1__Digest_u20_as_u20_core__fmt__Display_GT_3fmt17hf35a1975467f52ccE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $iter$sroa$0$0 = 0, $return$sroa$0$0 = 0, $switch1 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp1$sroa$4$0$$sroa_idx2$i = 0, $tmp12 = 0, $tmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $i = sp + 32|0;
 $tmp12 = sp + 8|0;
 $tmp17 = sp;
 $2 = ((($0)) + 20|0);
 $3 = $i;
 $4 = ((($tmp17)) + 4|0);
 $5 = ((($tmp12)) + 4|0);
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp12)) + 8|0);
 $tmp1$sroa$4$0$$sroa_idx2$i = ((($tmp12)) + 12|0);
 $6 = ((($tmp12)) + 16|0);
 $7 = ((($tmp12)) + 20|0);
 $iter$sroa$0$0 = $0;
 while(1) {
  $8 = ($iter$sroa$0$0|0)==($2|0);
  if ($8) {
   break;
  }
  $9 = ((($iter$sroa$0$0)) + 4|0);
  HEAP32[$i>>2] = $iter$sroa$0$0;
  HEAP32[$tmp17>>2] = $3;
  HEAP32[$4>>2] = (73);
  HEAP32[$tmp12>>2] = 2208;
  HEAP32[$5>>2] = 1;
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 2216;
  HEAP32[$tmp1$sroa$4$0$$sroa_idx2$i>>2] = 1;
  HEAP32[$6>>2] = $tmp17;
  HEAP32[$7>>2] = 1;
  $10 = (__ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E($1,$tmp12)|0);
  $switch1 = ($10<<24>>24)==(0);
  if ($switch1) {
   $iter$sroa$0$0 = $9;
  } else {
   $return$sroa$0$0 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 $return$sroa$0$0 = 0;
 STACKTOP = sp;return ($return$sroa$0$0|0);
}
function __ZN56__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__LowerHex_GT_3fmt17h32aa074b0dd13e52E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num53__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u32_GT_3fmt17h28da9cfb2690ca58E($2,$1)|0);
 return ($3|0);
}
function __ZN3std9panicking12LOCAL_STDERR7__getit17he651137d5f213785E() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, $cond$i$i1$i = 0, $return$0$i$i$i = 0, $return$0$i$i3$i = 0, $tmp18$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[563]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E(2252)|0);
  $return$0$i$i$i = $1;
 } else {
  $return$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($return$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $10 = $$$i;
  return ($10|0);
 }
 $6 = (___rust_allocate(20,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 HEAP32[$6>>2] = 2252;
 $tmp18$sroa$0$0$$sroa_idx$i = ((($6)) + 4|0);
 HEAP32[$tmp18$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = HEAP32[563]|0;
 $cond$i$i1$i = ($8|0)==(0);
 if ($cond$i$i1$i) {
  $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E(2252)|0);
  $return$0$i$i3$i = $9;
 } else {
  $return$0$i$i3$i = $8;
 }
 (_pthread_setspecific(($return$0$i$i3$i|0),($6|0))|0);
 $10 = $tmp18$sroa$0$0$$sroa_idx$i;
 return ($10|0);
}
function __ZN3std6thread5local2os13destroy_value17hd729142f06ddce1fE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i15 = 0, $return$0$i$i = 0;
 var $return$0$i$i17 = 0, $switchtmp$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(74,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $23 = ((($0)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $cond$i$i$i = ($24|0)==(1);
   if (!($cond$i$i$i)) {
    ___rust_deallocate($0,20,4);
    ___resumeException($21|0);
    // unreachable;
   }
   $25 = ((($0)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $switchtmp$i$i$i$i$i$i = ($26|0)==(0|0);
   if ($switchtmp$i$i$i$i$i$i) {
    ___rust_deallocate($0,20,4);
    ___resumeException($21|0);
    // unreachable;
   }
   $27 = ((($0)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 255]($26);
   $30 = HEAP32[$27>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    ___rust_deallocate($0,20,4);
    ___resumeException($21|0);
    // unreachable;
   }
   $34 = ((($30)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   ___rust_deallocate($26,$32,$35);
   ___rust_deallocate($0,20,4);
   ___resumeException($21|0);
   // unreachable;
  } else {
   $return$0$i$i = $3;
  }
 } else {
  $return$0$i$i = $2;
 }
 (_pthread_setspecific(($return$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(1);
 if ($cond$i$i$i$i$i) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $switchtmp$i$i$i$i$i$i$i$i = ($9|0)==(0|0);
  if (!($switchtmp$i$i$i$i$i$i$i$i)) {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 255]($9);
   $13 = HEAP32[$10>>2]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = ((($13)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    ___rust_deallocate($9,$15,$18);
   }
  }
 }
 ___rust_deallocate($0,20,4);
 $19 = HEAP32[$1>>2]|0;
 $cond$i$i15 = ($19|0)==(0);
 if (!($cond$i$i15)) {
  $return$0$i$i17 = $19;
  (_pthread_setspecific(($return$0$i$i17|0),(0|0))|0);
  return;
 }
 $20 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E($1)|0);
 $return$0$i$i17 = $20;
 (_pthread_setspecific(($return$0$i$i17|0),(0|0))|0);
 return;
}
function __ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17hb93036815c2ad437E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $builder = 0, $tmp14 = 0, $tmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $builder = sp;
 $tmp8 = sp + 20|0;
 $tmp14 = sp + 16|0;
 $2 = ((($0)) + 4|0);
 __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder,$1,5310,8);
 HEAP32[$tmp8>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17h6e4856dbc1d95c67E($builder,$tmp8,32)|0);
 HEAP32[$tmp14>>2] = $2;
 (__ZN4core3fmt8builders10DebugTuple5field17h6e4856dbc1d95c67E($builder,$tmp14,48)|0);
 $3 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4drop17hb53e40539eb19692E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17he9eb7ff63965cd0eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$i$i$i = 0, $tmp3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $entry$i$i$i = sp + 8|0;
 $tmp3$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN4core3fmt8builders14debug_list_new17h4ba0cdd99c6e162bE($tmp3$i$i,$1);
 $6 = (($3) + ($5)|0);
 $7 = ($5|0)==(0);
 if (!($7)) {
  $9 = $3;
  while(1) {
   $8 = ((($9)) + 1|0);
   HEAP32[$entry$i$i$i>>2] = $9;
   (__ZN4core3fmt8builders9DebugList5entry17hb49e7a94744342b0E($tmp3$i$i,$entry$i$i$i,64)|0);
   $10 = ($8|0)==($6|0);
   if ($10) {
    break;
   } else {
    $9 = $8;
   }
  }
 }
 $11 = (__ZN4core3fmt8builders9DebugList6finish17h04c9d4f5fa6fe08bE($tmp3$i$i)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0f0fd6b6430ecf8aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17hcbe646009264c62aE($2,$1)|0);
 return ($3|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h689f6b1d580204e7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17h21e5616eda417818E($2,$1)|0);
 return ($3|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h27a2fd2e6d62165aE_11($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$overflow = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $iter$sroa$0$016 = 0, $ptr$0$i$i = 0, $return$0$sroa$speculated$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 $8 = ($7>>>0)<($2>>>0);
 do {
  if ($8) {
   $$arith = (($4) + ($2))|0;
   $$overflow = ($$arith>>>0)<($4>>>0);
   if ($$overflow) {
    __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(5318,17);
    // unreachable;
   }
   $9 = $6 << 1;
   $10 = ($$arith>>>0)>=($9>>>0);
   $return$0$sroa$speculated$i$i$i$i = $10 ? $$arith : $9;
   $11 = ($return$0$sroa$speculated$i$i$i$i|0)<(0);
   if ($11) {
    __ZN4core9panicking5panic17hf2309629b2721756E(2676);
    // unreachable;
   }
   $12 = ($6|0)==(0);
   if ($12) {
    $13 = (___rust_allocate($return$0$sroa$speculated$i$i$i$i,1)|0);
    $ptr$0$i$i = $13;
   } else {
    $14 = HEAP32[$0>>2]|0;
    $15 = (___rust_reallocate($14,$6,$return$0$sroa$speculated$i$i$i$i,1)|0);
    $ptr$0$i$i = $15;
   }
   $16 = ($ptr$0$i$i|0)==(0|0);
   if ($16) {
    __ZN5alloc3oom3oom17ha2998ef21a53f982E();
    // unreachable;
   } else {
    HEAP32[$0>>2] = $ptr$0$i$i;
    HEAP32[$5>>2] = $return$0$sroa$speculated$i$i$i$i;
    break;
   }
  }
 } while(0);
 $17 = ($2|0)==(0);
 if ($17) {
  return;
 }
 $$pre = HEAP32[$3>>2]|0;
 $21 = $$pre;$iter$sroa$0$016 = 0;
 while(1) {
  $18 = (($iter$sroa$0$016) + 1)|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + ($21)|0);
  $22 = (($1) + ($iter$sroa$0$016)|0);
  $23 = HEAP8[$22>>0]|0;
  HEAP8[$20>>0] = $23;
  $24 = (($21) + 1)|0;
  HEAP32[$3>>2] = $24;
  $exitcond = ($18|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $21 = $24;$iter$sroa$0$016 = $18;
  }
 }
 return;
}
function __ZN3std3ffi5c_str7CString4_new17hdb108839b3ef2883E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bytes$sroa$0$0$copyload = 0, $bytes$sroa$7$0$$sroa_idx21 = 0, $bytes$sroa$7$0$$sroa_idx22 = 0, $bytes$sroa$7$0$copyload = 0, $bytes$sroa$8$0$$sroa_idx27 = 0, $bytes$sroa$8$0$$sroa_idx28 = 0, $bytes$sroa$8$0$copyload = 0, $not$$i$i$i$i = 0, $switch = 0, $tmp0 = 0, $tmp10 = 0, $tmp6$sroa$4$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx = 0, $tmp6$sroa$4$sroa$4$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx39 = 0, $tmp6$sroa$4$sroa$5$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx41 = 0, $tmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp0 = sp + 24|0;
 $tmp9 = sp + 16|0;
 $tmp10 = sp;
 $bytes$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $bytes$sroa$7$0$$sroa_idx21 = ((($1)) + 4|0);
 $bytes$sroa$7$0$copyload = HEAP32[$bytes$sroa$7$0$$sroa_idx21>>2]|0;
 $bytes$sroa$8$0$$sroa_idx27 = ((($1)) + 8|0);
 $bytes$sroa$8$0$copyload = HEAP32[$bytes$sroa$8$0$$sroa_idx27>>2]|0;
 __THREW__ = 0;
 invoke_viiii(75,($tmp0|0),0,($bytes$sroa$0$0$copyload|0),($bytes$sroa$8$0$copyload|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  $not$$i$i$i$i = ($bytes$sroa$7$0$copyload|0)==(0);
  if ($not$$i$i$i$i) {
   ___resumeException($4|0);
   // unreachable;
  }
  ___rust_deallocate($bytes$sroa$0$0$copyload,$bytes$sroa$7$0$copyload,1);
  ___resumeException($4|0);
  // unreachable;
 }
 $5 = HEAP32[$tmp0>>2]|0;
 $switch = ($5|0)==(1);
 if ($switch) {
  $17 = ((($tmp0)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 4|0);
  HEAP32[$19>>2] = $18;
  $tmp6$sroa$4$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx = ((($0)) + 8|0);
  HEAP32[$tmp6$sroa$4$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx>>2] = $bytes$sroa$0$0$copyload;
  $tmp6$sroa$4$sroa$4$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx39 = ((($0)) + 12|0);
  HEAP32[$tmp6$sroa$4$sroa$4$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx39>>2] = $bytes$sroa$7$0$copyload;
  $tmp6$sroa$4$sroa$5$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx41 = ((($0)) + 16|0);
  HEAP32[$tmp6$sroa$4$sroa$5$0$tmp6$sroa$4$0$$sroa_cast$sroa_idx41>>2] = $bytes$sroa$8$0$copyload;
  $$sink = 1;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  HEAP32[$tmp10>>2] = $bytes$sroa$0$0$copyload;
  $bytes$sroa$7$0$$sroa_idx22 = ((($tmp10)) + 4|0);
  HEAP32[$bytes$sroa$7$0$$sroa_idx22>>2] = $bytes$sroa$7$0$copyload;
  $bytes$sroa$8$0$$sroa_idx28 = ((($tmp10)) + 8|0);
  HEAP32[$bytes$sroa$8$0$$sroa_idx28>>2] = $bytes$sroa$8$0$copyload;
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17hb563137b6143359eE($tmp9,$tmp10);
  $6 = ((($0)) + 4|0);
  $7 = $tmp9;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $6;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  $$sink = 0;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function __ZN3std3ffi5c_str7CString18from_vec_unchecked17hb563137b6143359eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $eh$lpad$body13$index4Z2D = 0, $eh$lpad$body13$indexZ2D = 0, $not$$i$i$i$i = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i15$i = 0, $ptr$0$i$i = 0, $self$sroa$0$sroa$0$0$i = 0, $self$sroa$0$sroa$10$0$i = 0, $tmp6$sroa$4$0$copyload = 0, $tmp6$sroa$4$0$copyload$pre = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v = sp;
 ;HEAP32[$v>>2]=HEAP32[$1>>2]|0;HEAP32[$v+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$v+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = ((($v)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($v)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 do {
  if ($6) {
   $$arith = (($3) + 1)|0;
   $$overflow = ($3>>>0)>(4294967294);
   if ($$overflow) {
    __THREW__ = 0;
    invoke_vii(76,(5318|0),17);
    $7 = __THREW__; __THREW__ = 0;
    break;
   }
   $8 = ($$arith|0)<(0);
   if ($8) {
    __THREW__ = 0;
    invoke_vi(71,(2676|0));
    $9 = __THREW__; __THREW__ = 0;
    break;
   }
   $10 = ($3|0)==(0);
   if ($10) {
    $11 = (___rust_allocate($$arith,1)|0);
    $ptr$0$i$i = $11;
   } else {
    $12 = HEAP32[$v>>2]|0;
    $13 = (___rust_reallocate($12,$3,$$arith,1)|0);
    $ptr$0$i$i = $13;
   }
   $14 = ($ptr$0$i$i|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(72);
    $15 = __THREW__; __THREW__ = 0;
    break;
   } else {
    HEAP32[$v>>2] = $ptr$0$i$i;
    HEAP32[$4>>2] = $$arith;
    $17 = $$arith;
    label = 13;
    break;
   }
  } else {
   $17 = $5;
   label = 13;
  }
 } while(0);
 do {
  if ((label|0) == 13) {
   $16 = ($3|0)==($17|0);
   if ($16) {
    __THREW__ = 0;
    invoke_vi(77,($v|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     break;
    }
    $$pre$i = HEAP32[$2>>2]|0;
    $tmp6$sroa$4$0$copyload$pre = HEAP32[$4>>2]|0;
    $22 = $$pre$i;$tmp6$sroa$4$0$copyload = $tmp6$sroa$4$0$copyload$pre;
   } else {
    $22 = $3;$tmp6$sroa$4$0$copyload = $17;
   }
   $20 = HEAP32[$v>>2]|0;
   $21 = (($20) + ($22)|0);
   HEAP8[$21>>0] = 0;
   $23 = (($22) + 1)|0;
   HEAP32[$2>>2] = $23;
   $24 = $20;
   $25 = ($tmp6$sroa$4$0$copyload>>>0)<($23>>>0);
   L22: do {
    if ($25) {
     __THREW__ = 0;
     invoke_vi(71,(2656|0));
     $26 = __THREW__; __THREW__ = 0;
    } else {
     $27 = ($23|0)==(0);
     do {
      if ($27) {
       $not$$i$i$i$i$i = ($tmp6$sroa$4$0$copyload|0)==(0);
       if ($not$$i$i$i$i$i) {
        $self$sroa$0$sroa$0$0$i = 1;$self$sroa$0$sroa$10$0$i = 0;
       } else {
        ___rust_deallocate($20,$tmp6$sroa$4$0$copyload,1);
        $self$sroa$0$sroa$0$0$i = 1;$self$sroa$0$sroa$10$0$i = 0;
       }
      } else {
       $28 = ($tmp6$sroa$4$0$copyload|0)==($23|0);
       if ($28) {
        $self$sroa$0$sroa$0$0$i = $24;$self$sroa$0$sroa$10$0$i = $tmp6$sroa$4$0$copyload;
       } else {
        $29 = (___rust_reallocate($20,$tmp6$sroa$4$0$copyload,$23,1)|0);
        $30 = ($29|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(72);
         $31 = __THREW__; __THREW__ = 0;
         break L22;
        } else {
         $32 = $29;
         $self$sroa$0$sroa$0$0$i = $32;$self$sroa$0$sroa$10$0$i = $23;
         break;
        }
       }
      }
     } while(0);
     $35 = $self$sroa$0$sroa$0$0$i;
     HEAP32[$0>>2] = $35;
     $36 = ((($0)) + 4|0);
     HEAP32[$36>>2] = $self$sroa$0$sroa$10$0$i;
     STACKTOP = sp;return;
    }
   } while(0);
   $33 = ___cxa_find_matching_catch_2()|0;
   $34 = tempRet0;
   $not$$i$i$i$i15$i = ($tmp6$sroa$4$0$copyload|0)==(0);
   if ($not$$i$i$i$i15$i) {
    $eh$lpad$body13$index4Z2D = $34;$eh$lpad$body13$indexZ2D = $33;
    ___resumeException($eh$lpad$body13$indexZ2D|0);
    // unreachable;
   }
   ___rust_deallocate($20,$tmp6$sroa$4$0$copyload,1);
   $eh$lpad$body13$index4Z2D = $34;$eh$lpad$body13$indexZ2D = $33;
   ___resumeException($eh$lpad$body13$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $37 = ___cxa_find_matching_catch_2()|0;
 $38 = tempRet0;
 $39 = HEAP32[$4>>2]|0;
 $not$$i$i$i$i = ($39|0)==(0);
 if ($not$$i$i$i$i) {
  $eh$lpad$body13$index4Z2D = $38;$eh$lpad$body13$indexZ2D = $37;
  ___resumeException($eh$lpad$body13$indexZ2D|0);
  // unreachable;
 }
 $40 = HEAP32[$v>>2]|0;
 ___rust_deallocate($40,$39,1);
 $eh$lpad$body13$index4Z2D = $38;$eh$lpad$body13$indexZ2D = $37;
 ___resumeException($eh$lpad$body13$indexZ2D|0);
 // unreachable;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h80c2a148e28b9a5dE_14($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp7$sroa$0$0 = 0, $tmp7$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $8 = (___rust_allocate(4,1)|0);
   $tmp7$sroa$0$0 = 4;$tmp7$sroa$5$0 = $8;
  } else {
   $4 = $2 << 1;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17hf2309629b2721756E(2676);
    // unreachable;
   } else {
    $6 = HEAP32[$0>>2]|0;
    $7 = (___rust_reallocate($6,$2,$4,1)|0);
    $tmp7$sroa$0$0 = $4;$tmp7$sroa$5$0 = $7;
    break;
   }
  }
 } while(0);
 $9 = ($tmp7$sroa$5$0|0)==(0|0);
 if ($9) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $tmp7$sroa$5$0;
  HEAP32[$1>>2] = $tmp7$sroa$0$0;
  return;
 }
}
function __ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17h28f74963dd69ab05E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$retVal>>2] = $2;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std3ffi5c_str4CStr8from_ptr17hccf32a6a0d5018c7E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 HEAP32[$retVal>>2] = $0;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $2;
 return;
}
function __ZN3std3ffi5c_str4CStr6as_ptr17h37ea75dc7b793328E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN3std3ffi5c_str4CStr8to_bytes17h354e9e9265613016E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ($1|0)==(0);
 if ($3) {
  __ZN4core5slice20slice_index_len_fail17h4749ae34ab6ab5b2E($2,0);
  // unreachable;
 } else {
  HEAP32[$retVal>>2] = $0;
  $retVal$index1 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index1>>2] = $2;
  return;
 }
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_23($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN3std9panicking11begin_panic17h23145ec831f26d17E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rust_allocate(8,4)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  HEAP32[$3>>2] = $0;
  $5 = ((($3)) + 4|0);
  HEAP32[$5>>2] = $1;
  __ZN3std9panicking20rust_panic_with_hook17h078c87c7ade81a5eE($3,80,$2);
  // unreachable;
 }
}
function __ZN3std9panicking20rust_panic_with_hook17h078c87c7ade81a5eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i = 0, $$pre1$i$i = 0, $$sink$in$phi$trans$insert$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $not$ = 0;
 var $switch = 0, $switch$i$i = 0, $switch2tmp$i$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp1$sroa$0$0$$sroa_idx$i13 = 0, $tmp17$sroa$0$0$$sroa_idx = 0, $tmp17$sroa$4$0$$sroa_idx8 = 0, $tmp17$sroa$5$0$$sroa_idx10 = 0, $tmp35 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $info = sp + 48|0;
 $tmp5 = sp + 24|0;
 $tmp35 = sp;
 $3 = $0;
 $4 = $1;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 $10 = (invoke_i(78)|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L1: do {
  if (!($12)) {
   $switch2tmp$i$i$i = ($10|0)==(0|0);
   if ($switch2tmp$i$i$i) {
    __THREW__ = 0;
    invoke_vii(76,(5412|0),57);
    $13 = __THREW__; __THREW__ = 0;
    break;
   }
   $14 = HEAP32[$10>>2]|0;
   $switch$i$i = ($14|0)==(1);
   if ($switch$i$i) {
    $$sink$in$phi$trans$insert$i$i = ((($10)) + 4|0);
    $$pre$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i>>2]|0;
    $20 = (($$pre$i$i) + 1)|0;
    HEAP32[$$sink$in$phi$trans$insert$i$i>>2] = $20;
    $21 = ($20>>>0)>(2);
    if ($21) {
     HEAP32[$tmp5>>2] = 2260;
     $28 = ((($tmp5)) + 4|0);
     HEAP32[$28>>2] = 1;
     $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp5)) + 8|0);
     HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
     $29 = ((($tmp5)) + 16|0);
     HEAP32[$29>>2] = 10460;
     $30 = ((($tmp5)) + 20|0);
     HEAP32[$30>>2] = 0;
     __THREW__ = 0;
     invoke_vi(80,($tmp5|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break;
     }
     _llvm_trap();
     // unreachable;
    } else {
     $44 = $20;
    }
   } else {
    $15 = $10;
    $16 = $15;
    HEAP32[$16>>2] = 1;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = 0;
    $$pre1$i$i = ((($10)) + 4|0);
    HEAP32[$$pre1$i$i>>2] = 1;
    $44 = 1;
   }
   HEAP32[$info>>2] = $3;
   $22 = ((($info)) + 4|0);
   HEAP32[$22>>2] = $4;
   $tmp17$sroa$0$0$$sroa_idx = ((($info)) + 8|0);
   HEAP32[$tmp17$sroa$0$0$$sroa_idx>>2] = $6;
   $tmp17$sroa$4$0$$sroa_idx8 = ((($info)) + 12|0);
   HEAP32[$tmp17$sroa$4$0$$sroa_idx8>>2] = $7;
   $tmp17$sroa$5$0$$sroa_idx10 = ((($info)) + 16|0);
   HEAP32[$tmp17$sroa$5$0$$sroa_idx10>>2] = $9;
   $23 = (_pthread_rwlock_rdlock(((10280)|0))|0);
   switch ($23|0) {
   case 11:  {
    __THREW__ = 0;
    invoke_viii(79,(5335|0),36,(2356|0));
    $24 = __THREW__; __THREW__ = 0;
    break L1;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 10;
   }
   }
   do {
    if ((label|0) == 10) {
     $25 = HEAP8[(10312)>>0]|0;
     $not$ = ($25<<24>>24)==(0);
     if (!($not$)) {
      $26 = ($23|0)==(0);
      if (!($26)) {
       break;
      }
      (_pthread_rwlock_unlock(((10280)|0))|0);
      break;
     }
     $33 = HEAP32[(10316)>>2]|0;HEAP32[(10316)>>2] = (($33+1)|0);
     $34 = HEAP32[2610]|0;
     $switch = ($34|0)==(1);
     if ($switch) {
      $37 = HEAP32[(10444)>>2]|0;
      $38 = HEAP32[(10448)>>2]|0;
      $39 = ((($38)) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      __THREW__ = 0;
      invoke_vii($40|0,($37|0),($info|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       break L1;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(81,($info|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       break L1;
      }
     }
     $43 = HEAP32[(10316)>>2]|0;HEAP32[(10316)>>2] = (($43-1)|0);
     (_pthread_rwlock_unlock(((10280)|0))|0);
     $45 = ($44>>>0)>(1);
     if (!($45)) {
      _rust_panic($0,$1);
      // unreachable;
     }
     HEAP32[$tmp35>>2] = 2268;
     $46 = ((($tmp35)) + 4|0);
     HEAP32[$46>>2] = 1;
     $tmp1$sroa$0$0$$sroa_idx$i13 = ((($tmp35)) + 8|0);
     HEAP32[$tmp1$sroa$0$0$$sroa_idx$i13>>2] = 0;
     $47 = ((($tmp35)) + 16|0);
     HEAP32[$47>>2] = 10460;
     $48 = ((($tmp35)) + 20|0);
     HEAP32[$48>>2] = 0;
     __THREW__ = 0;
     invoke_vi(80,($tmp35|0));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      break L1;
     }
     _llvm_trap();
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_viii(79,(5371|0),41,(2368|0));
   $27 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $19 = ___cxa_find_matching_catch_2()|0;
 $51 = tempRet0;
 $52 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$52 & 255]($0);
 $53 = ((($1)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0);
 if ($55) {
  ___resumeException($19|0);
  // unreachable;
 }
 $56 = ((($1)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 ___rust_deallocate($0,$54,$57);
 ___resumeException($19|0);
 // unreachable;
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h4b815cb8da5a9cbfE() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, $cond$i$i1$i = 0, $return$0$i$i$i = 0;
 var $return$0$i$i3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[581]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E(2324)|0);
  $return$0$i$i$i = $1;
 } else {
  $return$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($return$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $15 = $$$i;
  return ($15|0);
 }
 $6 = (___rust_allocate(12,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 HEAP32[$6>>2] = 2324;
 $8 = ((($6)) + 4|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[581]|0;
 $cond$i$i1$i = ($13|0)==(0);
 if ($cond$i$i1$i) {
  $14 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E(2324)|0);
  $return$0$i$i3$i = $14;
 } else {
  $return$0$i$i3$i = $13;
 }
 (_pthread_setspecific(($return$0$i$i3$i|0),($6|0))|0);
 $15 = $8;
 return ($15|0);
}
function __ZN3std9panicking12default_hook17h9649b29e270822abE($0) {
 $0 = $0|0;
 var $$ = 0, $$$i = 0, $$fca$1$gep = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i91 = 0, $$pre$i86 = 0, $$pre$phi174Z2D = 0, $$pre$phi176Z2D = 0, $$pre1$i$i = 0, $$pre173 = 0, $$sink$in$phi$trans$insert$i$i = 0, $$sink4$in$phi$trans$insert$i = 0, $$sroa_idx = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i = 0, $err = 0, $extract$t = 0, $file = 0, $line = 0, $log_backtrace = 0, $msg = 0, $name = 0, $or$cond = 0;
 var $or$cond$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$2 = 0, $personalityslot$sroa$0$3152 = 0, $personalityslot$sroa$9$0 = 0, $personalityslot$sroa$9$2 = 0, $personalityslot$sroa$9$3151 = 0, $phitmp$i = 0, $return$0$i75 = 0, $return$sroa$0$0$i = 0, $return$sroa$3$0$i = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$0$0$copyload$i68 = 0, $self$sroa$0$0$copyload$i68$pre = 0, $self$sroa$6$0$$sroa_idx10$i = 0, $self$sroa$6$0$$sroa_idx5$i$phi$trans$insert = 0, $self$sroa$6$0$copyload$i = 0, $self$sroa$6$0$copyload$i69 = 0, $self$sroa$6$0$copyload$i69$pre = 0, $self$sroa$7$0$$sroa_idx12$i = 0;
 var $self$sroa$7$0$copyload$i = 0, $src$i$sroa$5$0$$sroa_idx36$i$i = 0, $src$i$sroa$5$0$$sroa_idx36$i$i88 = 0, $storemerge = 0, $switch$i = 0, $switch$i$i = 0, $switch$i74 = 0, $switch$i85 = 0, $switch1$i = 0, $switch10tmp = 0, $switch11tmp = 0, $switch1tmp$i = 0, $switch2tmp$i$i = 0, $switch2tmp$i$i$i = 0, $switch2tmp$i$i83 = 0, $switch7tmp = 0, $switch8tmp = 0, $switch9tmp = 0, $switch9tmp165 = 0, $switchtmp = 0;
 var $switchtmp$i = 0, $switchtmp$i100 = 0, $switchtmp$i21$i$i = 0, $switchtmp$i76 = 0, $switchtmp$i78 = 0, $thread = 0, $tmp15 = 0, $tmp17 = 0, $tmp30 = 0, $tmp51$0 = 0, $tmp51$1$off0 = 0, $tmp51$1$off0$not = 0, $tmp51$2$off0150 = 0, $tmp8$sroa$0$0 = 0, $tmp8$sroa$5$0 = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $log_backtrace = sp + 108|0;
 $file = sp + 96|0;
 $line = sp + 104|0;
 $msg = sp + 88|0;
 $err = sp + 80|0;
 $thread = sp + 72|0;
 $name = sp + 64|0;
 $write = sp + 40|0;
 $tmp15 = sp + 24|0;
 $tmp17 = sp + 16|0;
 $tmp30 = sp;
 $1 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h4b815cb8da5a9cbfE()|0);
 $switch2tmp$i$i$i = ($1|0)==(0|0);
 if ($switch2tmp$i$i$i) {
  __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(5412,57);
  // unreachable;
 }
 $2 = HEAP32[$1>>2]|0;
 $switch$i$i = ($2|0)==(1);
 if ($switch$i$i) {
  $$sink$in$phi$trans$insert$i$i = ((($1)) + 4|0);
  $$pre$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i>>2]|0;
  $7 = ($$pre$i$i>>>0)>(1);
  if ($7) {
   $storemerge = 1;
  } else {
   label = 6;
  }
 } else {
  $3 = $1;
  $4 = $3;
  HEAP32[$4>>2] = 1;
  $5 = (($3) + 4)|0;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  $$pre1$i$i = ((($1)) + 4|0);
  HEAP32[$$pre1$i$i>>2] = 0;
  label = 6;
 }
 if ((label|0) == 6) {
  $8 = (__ZN3std10sys_common9backtrace11log_enabled17hae89effe85916338E()|0);
  $$ = $8&1;
  $storemerge = $$;
 }
 HEAP8[$log_backtrace>>0] = $storemerge;
 $9 = ((($0)) + 8|0);
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$9>>2]|0;
 $12 = HEAP32[$10>>2]|0;
 HEAP32[$file>>2] = $11;
 $13 = ((($file)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$line>>2] = $15;
 $16 = ((($0)) + 4|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 255]($17)|0);
 $22 = tempRet0;
 $switch9tmp165 = ($17|0)==(0|0);
 $23 = ($21|0)!=(-1653100559);
 $24 = ($22|0)!=(-900289477);
 $25 = $23 | $24;
 $switch9tmp = $switch9tmp165 | $25;
 if ($switch9tmp) {
  $26 = HEAP32[$19>>2]|0;
  $27 = (FUNCTION_TABLE_ii[$26 & 255]($17)|0);
  $28 = tempRet0;
  $29 = ($27|0)!=(738550453);
  $30 = ($28|0)!=(-1423263431);
  $31 = $29 | $30;
  $switch10tmp = $switch9tmp165 | $31;
  if ($switch10tmp) {
   $tmp8$sroa$0$0 = 5512;$tmp8$sroa$5$0 = 8;
  } else {
   $50 = HEAP32[$17>>2]|0;
   $51 = ((($17)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $tmp8$sroa$0$0 = $50;$tmp8$sroa$5$0 = $52;
  }
  HEAP32[$msg>>2] = $tmp8$sroa$0$0;
  $53 = ((($msg)) + 4|0);
  HEAP32[$53>>2] = $tmp8$sroa$5$0;
 } else {
  $32 = ((($17)) + 4|0);
  $33 = HEAP32[$17>>2]|0;
  $34 = HEAP32[$32>>2]|0;
  HEAP32[$msg>>2] = $33;
  $35 = ((($msg)) + 4|0);
  HEAP32[$35>>2] = $34;
 }
 __ZN3std3sys5stdio6Stderr3new17h0eadcd5c4e2628b1E($tmp15);
 $self$sroa$0$0$copyload$i = HEAP32[$tmp15>>2]|0;
 $self$sroa$6$0$$sroa_idx10$i = ((($tmp15)) + 4|0);
 $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx10$i>>2]|0;
 $self$sroa$7$0$$sroa_idx12$i = ((($tmp15)) + 8|0);
 $self$sroa$7$0$copyload$i = HEAP32[$self$sroa$7$0$$sroa_idx12$i>>2]|0;
 $switch1$i = ($self$sroa$0$0$copyload$i|0)==(1);
 $36 = $switch1$i&1;
 $$$i = $36 ^ 1;
 $cond$i$i$i$i = ($self$sroa$6$0$copyload$i|0)==(1);
 $or$cond$i = $switch1$i & $cond$i$i$i$i;
 if ($or$cond$i) {
  $37 = ((($self$sroa$7$0$copyload$i)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($self$sroa$7$0$copyload$i)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  __THREW__ = 0;
  invoke_vi($41|0,($38|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if (!($43)) {
   $44 = HEAP32[$39>>2]|0;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = ((($44)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    ___rust_deallocate($38,$46,$49);
   }
   ___rust_deallocate($self$sroa$7$0$copyload$i,12,4);
   label = 18;
  }
 } else {
  label = 18;
 }
 L23: do {
  if ((label|0) == 18) {
   HEAP8[$err>>0] = $$$i;
   __THREW__ = 0;
   $54 = (invoke_i(82)|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $160 = ___cxa_find_matching_catch_2()|0;
    $161 = tempRet0;
    $personalityslot$sroa$0$0 = $160;$personalityslot$sroa$9$0 = $161;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   HEAP32[$thread>>2] = $54;
   $switchtmp$i = ($54|0)==(0);
   if ($switchtmp$i) {
    HEAP32[$tmp17>>2] = 0;
    $self$sroa$0$0$copyload$i68 = 0;$self$sroa$6$0$copyload$i69 = 0;
    label = 23;
   } else {
    __THREW__ = 0;
    invoke_vii(83,($tmp17|0),($thread|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if (!($58)) {
     $self$sroa$0$0$copyload$i68$pre = HEAP32[$tmp17>>2]|0;
     $self$sroa$6$0$$sroa_idx5$i$phi$trans$insert = ((($tmp17)) + 4|0);
     $self$sroa$6$0$copyload$i69$pre = HEAP32[$self$sroa$6$0$$sroa_idx5$i$phi$trans$insert>>2]|0;
     $self$sroa$0$0$copyload$i68 = $self$sroa$0$0$copyload$i68$pre;$self$sroa$6$0$copyload$i69 = $self$sroa$6$0$copyload$i69$pre;
     label = 23;
    }
   }
   L33: do {
    if ((label|0) == 23) {
     $switch1tmp$i = ($self$sroa$0$0$copyload$i68|0)==(0|0);
     $return$sroa$3$0$i = $switch1tmp$i ? 9 : $self$sroa$6$0$copyload$i69;
     $return$sroa$0$0$i = $switch1tmp$i ? 5520 : $self$sroa$0$0$copyload$i68;
     HEAP32[$name>>2] = $return$sroa$0$0$i;
     $$fca$1$gep = ((($name)) + 4|0);
     HEAP32[$$fca$1$gep>>2] = $return$sroa$3$0$i;
     HEAP32[$write>>2] = $name;
     $59 = ((($write)) + 4|0);
     HEAP32[$59>>2] = $msg;
     $60 = ((($write)) + 8|0);
     HEAP32[$60>>2] = $file;
     $61 = ((($write)) + 12|0);
     HEAP32[$61>>2] = $line;
     $62 = ((($write)) + 16|0);
     HEAP32[$62>>2] = $log_backtrace;
     __THREW__ = 0;
     $63 = (invoke_i(84)|0);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      $switch2tmp$i$i = ($63|0)==(0|0);
      if ($switch2tmp$i$i) {
       __THREW__ = 0;
       invoke_vii(76,(5412|0),57);
       $66 = __THREW__; __THREW__ = 0;
       break;
      }
      $67 = HEAP32[$63>>2]|0;
      $switch$i = ($67|0)==(1);
      $$sink4$in$phi$trans$insert$i = ((($63)) + 4|0);
      do {
       if ($switch$i) {
        $$pre$i = HEAP32[$$sink4$in$phi$trans$insert$i>>2]|0;
        $phitmp$i = ($$pre$i|0)==(0);
        if ($phitmp$i) {
         $$pre173 = ((($63)) + 8|0);
         $$pre$phi174Z2D = $$pre173;$$pre$phi176Z2D = $$pre173;
         break;
        } else {
         __THREW__ = 0;
         invoke_v(85);
         $68 = __THREW__; __THREW__ = 0;
         break L33;
        }
       } else {
        $src$i$sroa$5$0$$sroa_idx36$i$i = ((($63)) + 8|0);
        HEAP32[$63>>2] = 1;
        HEAP32[$$sink4$in$phi$trans$insert$i>>2] = 0;
        HEAP32[$src$i$sroa$5$0$$sroa_idx36$i$i>>2] = 0;
        $$pre$phi174Z2D = $src$i$sroa$5$0$$sroa_idx36$i$i;$$pre$phi176Z2D = $src$i$sroa$5$0$$sroa_idx36$i$i;
       }
      } while(0);
      $69 = $$pre$phi174Z2D;
      $70 = $69;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($69) + 4)|0;
      $73 = $72;
      $74 = HEAP32[$73>>2]|0;
      HEAP32[$$pre$phi176Z2D>>2] = 0;
      HEAP32[$$sink4$in$phi$trans$insert$i>>2] = 0;
      $75 = HEAP8[$err>>0]|0;
      $switch$i74 = ($75<<24>>24)==(1);
      $76 = ((($err)) + 1|0);
      $return$0$i75 = $switch$i74 ? $76 : 0;
      HEAP32[$tmp30>>2] = $71;
      $$sroa_idx = ((($tmp30)) + 4|0);
      HEAP32[$$sroa_idx>>2] = $74;
      $77 = ((($tmp30)) + 8|0);
      HEAP32[$77>>2] = $return$0$i75;
      $78 = $71;
      $switchtmp = ($71|0)==(0);
      $79 = $74;
      L46: do {
       if ($switchtmp) {
        $switch7tmp = ($return$0$i75|0)==(0|0);
        if ($switch7tmp) {
         $tmp51$0 = 1;
         label = 38;
        } else {
         __THREW__ = 0;
         invoke_viii(86,($write|0),($77|0),(96|0));
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $146 = ___cxa_find_matching_catch_2()|0;
          $147 = tempRet0;
          $personalityslot$sroa$0$3152 = $146;$personalityslot$sroa$9$3151 = $147;$tmp51$2$off0150 = 1;
          label = 32;
         } else {
          $tmp51$0 = 1;
          label = 38;
         }
        }
       } else {
        __THREW__ = 0;
        invoke_viii(86,($write|0),($78|0),($79|0));
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         $138 = ___cxa_find_matching_catch_2()|0;
         $139 = tempRet0;
         $140 = HEAP32[$79>>2]|0;
         FUNCTION_TABLE_vi[$140 & 255]($78);
         $141 = ((($79)) + 4|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = ($142|0)==(0);
         if ($143) {
          $personalityslot$sroa$0$3152 = $138;$personalityslot$sroa$9$3151 = $139;$tmp51$2$off0150 = 0;
          label = 32;
          break;
         }
         $144 = ((($79)) + 8|0);
         $145 = HEAP32[$144>>2]|0;
         ___rust_deallocate($78,$142,$145);
         $personalityslot$sroa$0$3152 = $138;$personalityslot$sroa$9$3151 = $139;$tmp51$2$off0150 = 0;
         label = 32;
         break;
        }
        __THREW__ = 0;
        $92 = (invoke_i(84)|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        do {
         if (!($94)) {
          $switch2tmp$i$i83 = ($92|0)==(0|0);
          if ($switch2tmp$i$i83) {
           __THREW__ = 0;
           invoke_vii(76,(5412|0),57);
           $95 = __THREW__; __THREW__ = 0;
           break;
          }
          $96 = HEAP32[$92>>2]|0;
          $switch$i85 = ($96|0)==(1);
          $$pre$i86 = ((($92)) + 4|0);
          if ($switch$i85) {
           $$pre = HEAP32[$$pre$i86>>2]|0;
           $cond$i$i$i$i$i = ($$pre|0)==(0);
           if (!($cond$i$i$i$i$i)) {
            __THREW__ = 0;
            invoke_v(85);
            $97 = __THREW__; __THREW__ = 0;
            $98 = ___cxa_find_matching_catch_2()|0;
            $99 = tempRet0;
            $100 = HEAP32[$79>>2]|0;
            __THREW__ = 0;
            invoke_vi($100|0,($78|0));
            $101 = __THREW__; __THREW__ = 0;
            $102 = $101&1;
            if ($102) {
             $162 = ___cxa_find_matching_catch_2()|0;
             $163 = tempRet0;
             $personalityslot$sroa$0$3152 = $162;$personalityslot$sroa$9$3151 = $163;$tmp51$2$off0150 = 0;
             label = 32;
             break L46;
            }
            $115 = ((($79)) + 4|0);
            $116 = HEAP32[$115>>2]|0;
            $117 = ($116|0)==(0);
            if ($117) {
             $personalityslot$sroa$0$3152 = $98;$personalityslot$sroa$9$3151 = $99;$tmp51$2$off0150 = 0;
             label = 32;
             break L46;
            }
            $118 = ((($79)) + 8|0);
            $119 = HEAP32[$118>>2]|0;
            ___rust_deallocate($78,$116,$119);
            $personalityslot$sroa$0$3152 = $98;$personalityslot$sroa$9$3151 = $99;$tmp51$2$off0150 = 0;
            label = 32;
            break L46;
           }
          } else {
           $src$i$sroa$5$0$$sroa_idx36$i$i88 = ((($92)) + 8|0);
           HEAP32[$92>>2] = 1;
           HEAP32[$$pre$i86>>2] = 0;
           HEAP32[$src$i$sroa$5$0$$sroa_idx36$i$i88>>2] = 0;
          }
          HEAP32[$$pre$i86>>2] = -1;
          $103 = ((($92)) + 8|0);
          $104 = HEAP32[$103>>2]|0;
          $switchtmp$i21$i$i = ($104|0)==(0|0);
          $$pre$i$i91 = ((($92)) + 12|0);
          do {
           if (!($switchtmp$i21$i$i)) {
            $105 = HEAP32[$$pre$i$i91>>2]|0;
            $106 = HEAP32[$105>>2]|0;
            __THREW__ = 0;
            invoke_vi($106|0,($104|0));
            $107 = __THREW__; __THREW__ = 0;
            $108 = $107&1;
            if ($108) {
             $120 = ___cxa_find_matching_catch_2()|0;
             $121 = tempRet0;
             HEAP32[$103>>2] = $71;
             HEAP32[$$pre$i$i91>>2] = $74;
             HEAP32[$$pre$i86>>2] = 0;
             $personalityslot$sroa$0$3152 = $120;$personalityslot$sroa$9$3151 = $121;$tmp51$2$off0150 = 0;
             label = 32;
             break L46;
            }
            $109 = HEAP32[$$pre$i$i91>>2]|0;
            $110 = ((($109)) + 4|0);
            $111 = HEAP32[$110>>2]|0;
            $112 = ($111|0)==(0);
            if ($112) {
             break;
            }
            $113 = ((($109)) + 8|0);
            $114 = HEAP32[$113>>2]|0;
            ___rust_deallocate($104,$111,$114);
           }
          } while(0);
          HEAP32[$103>>2] = $71;
          HEAP32[$$pre$i$i91>>2] = $74;
          HEAP32[$$pre$i86>>2] = 0;
          $tmp51$0 = 0;
          label = 38;
          break L46;
         }
        } while(0);
        $164 = ___cxa_find_matching_catch_2()|0;
        $165 = tempRet0;
        $166 = $71;
        $167 = HEAP32[$79>>2]|0;
        FUNCTION_TABLE_vi[$167 & 255]($166);
        $168 = ((($79)) + 4|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ($169|0)==(0);
        if ($170) {
         $personalityslot$sroa$0$3152 = $164;$personalityslot$sroa$9$3151 = $165;$tmp51$2$off0150 = 0;
         label = 32;
        } else {
         $171 = ((($79)) + 8|0);
         $172 = HEAP32[$171>>2]|0;
         ___rust_deallocate($166,$169,$172);
         $personalityslot$sroa$0$3152 = $164;$personalityslot$sroa$9$3151 = $165;$tmp51$2$off0150 = 0;
         label = 32;
        }
       }
      } while(0);
      do {
       if ((label|0) == 32) {
        $80 = HEAP32[$thread>>2]|0;
        $switchtmp$i76 = ($80|0)==(0|0);
        if ($switchtmp$i76) {
         $personalityslot$sroa$0$2 = $personalityslot$sroa$0$3152;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3151;$tmp51$1$off0 = $tmp51$2$off0150;
        } else {
         $81 = HEAP32[$80>>2]|0;HEAP32[$80>>2] = (($81-1)|0);
         $82 = ($81|0)==(1);
         if ($82) {
          /* fence */;
          __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE($thread);
          $personalityslot$sroa$0$2 = $personalityslot$sroa$0$3152;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3151;$tmp51$1$off0 = $tmp51$2$off0150;
         } else {
          $personalityslot$sroa$0$2 = $personalityslot$sroa$0$3152;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3151;$tmp51$1$off0 = $tmp51$2$off0150;
         }
        }
       }
       else if ((label|0) == 38) {
        $87 = HEAP32[$thread>>2]|0;
        $switchtmp$i78 = ($87|0)==(0|0);
        if (!($switchtmp$i78)) {
         $88 = HEAP32[$87>>2]|0;HEAP32[$87>>2] = (($88-1)|0);
         $89 = ($88|0)==(1);
         if ($89) {
          /* fence */;
          __THREW__ = 0;
          invoke_vi(87,($thread|0));
          $90 = __THREW__; __THREW__ = 0;
          $91 = $90&1;
          if ($91) {
           $173 = ___cxa_find_matching_catch_2()|0;
           $174 = tempRet0;
           $extract$t = ($tmp51$0<<24>>24)!=(0);
           $personalityslot$sroa$0$2 = $173;$personalityslot$sroa$9$2 = $174;$tmp51$1$off0 = $extract$t;
           break;
          }
         }
        }
        $122 = HEAP32[$tmp30>>2]|0;
        $switch11tmp = ($122|0)==(0|0);
        $123 = ($tmp51$0<<24>>24)==(0);
        $or$cond = $switch11tmp | $123;
        if ($or$cond) {
         STACKTOP = sp;return;
        }
        $148 = HEAP32[$$sroa_idx>>2]|0;
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        invoke_vi($149|0,($122|0));
        $150 = __THREW__; __THREW__ = 0;
        $151 = $150&1;
        if ($151) {
         break L23;
        }
        $152 = HEAP32[$$sroa_idx>>2]|0;
        $153 = ((($152)) + 4|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0);
        if ($155) {
         STACKTOP = sp;return;
        }
        $156 = ((($152)) + 8|0);
        $157 = HEAP32[$156>>2]|0;
        ___rust_deallocate($122,$154,$157);
        STACKTOP = sp;return;
       }
      } while(0);
      $131 = HEAP32[$tmp30>>2]|0;
      $switch8tmp = ($131|0)==(0|0);
      $tmp51$1$off0$not = $tmp51$1$off0 ^ 1;
      $brmerge = $switch8tmp | $tmp51$1$off0$not;
      if ($brmerge) {
       $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $129 = HEAP32[$$sroa_idx>>2]|0;
      $130 = HEAP32[$129>>2]|0;
      FUNCTION_TABLE_vi[$130 & 255]($131);
      $132 = HEAP32[$$sroa_idx>>2]|0;
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0);
      if ($135) {
       $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $136 = ((($132)) + 8|0);
      $137 = HEAP32[$136>>2]|0;
      ___rust_deallocate($131,$134,$137);
      $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
    }
   } while(0);
   $124 = ___cxa_find_matching_catch_2()|0;
   $125 = tempRet0;
   $126 = HEAP32[$thread>>2]|0;
   $switchtmp$i100 = ($126|0)==(0|0);
   if ($switchtmp$i100) {
    $personalityslot$sroa$0$0 = $124;$personalityslot$sroa$9$0 = $125;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $127 = HEAP32[$126>>2]|0;HEAP32[$126>>2] = (($127-1)|0);
   $128 = ($127|0)==(1);
   if (!($128)) {
    $personalityslot$sroa$0$0 = $124;$personalityslot$sroa$9$0 = $125;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE($thread);
   $personalityslot$sroa$0$0 = $124;$personalityslot$sroa$9$0 = $125;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $158 = ___cxa_find_matching_catch_2()|0;
 $159 = tempRet0;
 $personalityslot$sroa$0$0 = $158;$personalityslot$sroa$9$0 = $159;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function _rust_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $code = sp;
 $2 = $0;
 $3 = $1;
 (___rust_start_panic($2,$3)|0);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17h48edc837f7e8eb46E() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $msg = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 5651;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 16;
 $1 = HEAP32[714]|0;
 $2 = HEAP32[(2860)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$tmp7>>2] = $3;
 $5 = ((($tmp7)) + 4|0);
 HEAP32[$5>>2] = (88);
 $6 = ((($tmp7)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($tmp7)) + 12|0);
 HEAP32[$7>>2] = (89);
 HEAP32[$tmp2>>2] = $1;
 $8 = ((($tmp2)) + 4|0);
 HEAP32[$8>>2] = $2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($tmp2)) + 16|0);
 HEAP32[$9>>2] = $tmp7;
 $10 = ((($tmp2)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,2844);
 // unreachable;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $switchtmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $switchtmp$i$i = ($3|0)==(0|0);
 if (!($switchtmp$i$i)) {
  $4 = ((($1)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   ___rust_deallocate($3,$5,1);
  }
 }
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 (_pthread_mutex_destroy(($8|0))|0);
 $9 = HEAP32[$7>>2]|0;
 ___rust_deallocate($9,24,8);
 $10 = ((($1)) + 24|0);
 __THREW__ = 0;
 invoke_vi(90,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$10>>2]|0;
  ___rust_deallocate($15,48,8);
  ___resumeException($13|0);
  // unreachable;
 }
 $16 = HEAP32[$10>>2]|0;
 ___rust_deallocate($16,48,8);
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19-1)|0);
 $20 = ($19|0)==(1);
 if (!($20)) {
  return;
 }
 /* fence */;
 ___rust_deallocate($1,32,4);
 return;
}
function __ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h303ce6d812b248e6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0;
 var $cond$i$i$i14 = 0, $cond$i$i$i21 = 0, $cond$i13 = 0, $cond$i20 = 0, $return$sroa$3$0$insert$ext$i$i$i = 0, $tmp0 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp1$sroa$0$0$$sroa_idx$i12 = 0, $tmp2 = 0, $tmp27 = 0, $tmp33 = 0, $tmp35 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $tmp0 = sp + 112|0;
 $tmp2 = sp + 88|0;
 $tmp7 = sp + 56|0;
 $tmp27 = sp + 40|0;
 $tmp33 = sp + 24|0;
 $tmp35 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$tmp7>>2] = $3;
 $10 = ((($tmp7)) + 4|0);
 HEAP32[$10>>2] = (88);
 $11 = ((($tmp7)) + 8|0);
 HEAP32[$11>>2] = $5;
 $12 = ((($tmp7)) + 12|0);
 HEAP32[$12>>2] = (88);
 $13 = ((($tmp7)) + 16|0);
 HEAP32[$13>>2] = $7;
 $14 = ((($tmp7)) + 20|0);
 HEAP32[$14>>2] = (88);
 $15 = ((($tmp7)) + 24|0);
 HEAP32[$15>>2] = $9;
 $16 = ((($tmp7)) + 28|0);
 HEAP32[$16>>2] = (91);
 HEAP32[$tmp2>>2] = 2276;
 $17 = ((($tmp2)) + 4|0);
 HEAP32[$17>>2] = 5;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($tmp2)) + 16|0);
 HEAP32[$18>>2] = $tmp7;
 $19 = ((($tmp2)) + 20|0);
 HEAP32[$19>>2] = 4;
 $20 = ((($2)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$21 & 255]($tmp0,$1,$tmp2);
 $22 = HEAP32[$tmp0>>2]|0;
 $cond$i20 = ($22|0)==(1);
 if ($cond$i20) {
  $23 = ((($tmp0)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $cond$i$i$i21 = ($24|0)==(1);
  if ($cond$i$i$i21) {
   $25 = ((($tmp0)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($26)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_vi[$31 & 255]($28);
   $32 = HEAP32[$29>>2]|0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = ((($32)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    ___rust_deallocate($28,$34,$37);
   }
   ___rust_deallocate($26,12,4);
  }
 }
 $38 = ((($0)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(0);
 if (!($41)) {
  __ZN3std3sys9backtrace7tracing3imp5write17h09a31f5b0098d01aE($tmp27,$1,$2);
  $42 = HEAP32[$tmp27>>2]|0;
  $cond$i13 = ($42|0)==(1);
  if ($cond$i13) {
   $43 = ((($tmp27)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $cond$i$i$i14 = ($44|0)==(1);
   if ($cond$i$i$i14) {
    $45 = ((($tmp27)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($46)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vi[$51 & 255]($48);
    $52 = HEAP32[$49>>2]|0;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0);
    if (!($55)) {
     $56 = ((($52)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     ___rust_deallocate($48,$54,$57);
    }
    ___rust_deallocate($46,12,4);
   }
  }
  STACKTOP = sp;return;
 }
 $58 = HEAP8[5572]|0;if (($58<<24>>24) == 1) HEAP8[5572] = 0;
 $return$sroa$3$0$insert$ext$i$i$i = $58&255;
 $59 = ($return$sroa$3$0$insert$ext$i$i$i << 8)&65535;
 $60 = ($59&65535)>(255);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 HEAP32[$tmp35>>2] = 2316;
 $61 = ((($tmp35)) + 4|0);
 HEAP32[$61>>2] = 1;
 $tmp1$sroa$0$0$$sroa_idx$i12 = ((($tmp35)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i12>>2] = 0;
 $62 = ((($tmp35)) + 16|0);
 HEAP32[$62>>2] = 10460;
 $63 = ((($tmp35)) + 20|0);
 HEAP32[$63>>2] = 0;
 $64 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$64 & 255]($tmp33,$1,$tmp35);
 $65 = HEAP32[$tmp33>>2]|0;
 $cond$i = ($65|0)==(1);
 if ($cond$i) {
  $66 = ((($tmp33)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $cond$i$i$i = ($67|0)==(1);
  if ($cond$i$i$i) {
   $68 = ((($tmp33)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($69)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$73>>2]|0;
   FUNCTION_TABLE_vi[$74 & 255]($71);
   $75 = HEAP32[$72>>2]|0;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0);
   if (!($78)) {
    $79 = ((($75)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    ___rust_deallocate($71,$77,$80);
   }
   ___rust_deallocate($69,12,4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17h3c6c60dd43f3a89bE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5write17h0c414e1f808abd0dE($0,$4,$2,$3);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17ha572b2dc31c844a9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5flush17h039240223aae0fa2E($0,$2);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h5c4ee812bccc755eE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 __ZN3std2io5Write9write_all17he855671065366876E($0,$4,$2,$3);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h729c7c8b7b7d95aaE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i20$i = 0, $cond$i19$i = 0, $output$i = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$5$0$i = 0, $switch$i = 0, $tmp13$i = 0, $tmp2$sroa$0$0$$sroa_idx$i = 0, $tmp8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $output$i = sp + 40|0;
 $tmp8$i = sp + 16|0;
 $tmp13$i = sp + 8|0;
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$output$i>>2] = $4;
 $tmp2$sroa$0$0$$sroa_idx$i = ((($output$i)) + 4|0);
 HEAP32[$tmp2$sroa$0$0$$sroa_idx$i>>2] = 0;
 ;HEAP32[$tmp8$i>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp8$i+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$tmp8$i+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$tmp8$i+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$tmp8$i+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$tmp8$i+20>>2]=HEAP32[$2+20>>2]|0;
 __THREW__ = 0;
 $5 = (invoke_iiii(70,($output$i|0),(128|0),($tmp8$i|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   $switch$i = ($5<<24>>24)==(0);
   if ($switch$i) {
    HEAP32[$0>>2] = 0;
   } else {
    $8 = ((($output$i)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(1);
    if ($10) {
     ;HEAP32[$0>>2]=HEAP32[$8>>2]|0;HEAP32[$0+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$8+8>>2]|0;
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viii(92,($3|0),(5529|0),15);
    $$sreg$field = HEAP32[$3>>2]|0;
    $$sreg$index1 = ((($3)) + 4|0);
    $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break;
    }
    __THREW__ = 0;
    invoke_viiii(93,($tmp13$i|0),16,($$sreg$field|0),($$sreg$field2|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     break;
    }
    HEAP32[$0>>2] = 1;
    $15 = ((($0)) + 4|0);
    $16 = $tmp13$i;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = $15;
    $23 = $22;
    HEAP32[$23>>2] = $18;
    $24 = (($22) + 4)|0;
    $25 = $24;
    HEAP32[$25>>2] = $21;
   }
   $26 = HEAP32[$tmp2$sroa$0$0$$sroa_idx$i>>2]|0;
   $cond$i19$i = ($26|0)==(1);
   if (!($cond$i19$i)) {
    STACKTOP = sp;return;
   }
   $27 = ((($output$i)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $cond$i$i$i20$i = ($28|0)==(1);
   if (!($cond$i$i$i20$i)) {
    STACKTOP = sp;return;
   }
   $29 = ((($output$i)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($30)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   __THREW__ = 0;
   invoke_vi($35|0,($32|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $62 = ___cxa_find_matching_catch_2()|0;
    $63 = tempRet0;
    $personalityslot$sroa$0$0$i = $62;$personalityslot$sroa$5$0$i = $63;
    ___resumeException($personalityslot$sroa$0$0$i|0);
    // unreachable;
   }
   $38 = HEAP32[$33>>2]|0;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $42 = ((($38)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    ___rust_deallocate($32,$40,$43);
   }
   ___rust_deallocate($30,12,4);
   STACKTOP = sp;return;
  }
 } while(0);
 $44 = ___cxa_find_matching_catch_2()|0;
 $45 = tempRet0;
 $46 = HEAP32[$tmp2$sroa$0$0$$sroa_idx$i>>2]|0;
 $cond$i$i = ($46|0)==(1);
 if (!($cond$i$i)) {
  $personalityslot$sroa$0$0$i = $44;$personalityslot$sroa$5$0$i = $45;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 $47 = ((($output$i)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $cond$i$i$i$i = ($48|0)==(1);
 if (!($cond$i$i$i$i)) {
  $personalityslot$sroa$0$0$i = $44;$personalityslot$sroa$5$0$i = $45;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 $49 = ((($output$i)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($50)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 FUNCTION_TABLE_vi[$55 & 255]($52);
 $56 = HEAP32[$53>>2]|0;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = ((($56)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  ___rust_deallocate($52,$58,$61);
 }
 ___rust_deallocate($50,12,4);
 $personalityslot$sroa$0$0$i = $44;$personalityslot$sroa$5$0$i = $45;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
}
function __ZN4drop17ha52c4fe1639e9104E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(1);
 if (!($cond$i)) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cond$i$i$i = ($4|0)==(1);
 if (!($cond$i$i$i)) {
  return;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 255]($8);
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($12)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  ___rust_deallocate($8,$14,$17);
 }
 ___rust_deallocate($6,12,4);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, $e$sroa$0$0$$sroa_idx31 = 0;
 var $return$sroa$0$059 = 0, $switch3 = 0, $tmp0 = 0, $tmp7$sroa$5$0$$sroa_idx = 0, $tmp7$sroa$5$0$$sroa_idx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp0 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17he855671065366876E($tmp0,$3,$1,$2);
 $4 = HEAP32[$tmp0>>2]|0;
 $switch3 = ($4|0)==(1);
 if (!($switch3)) {
  $return$sroa$0$059 = 0;
  STACKTOP = sp;return ($return$sroa$0$059|0);
 }
 $e$sroa$0$0$$sroa_idx31 = ((($tmp0)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx31;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i = ($12|0)==(1);
 if ($cond$i) {
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $cond$i$i$i = ($14|0)==(1);
  if ($cond$i$i$i) {
   $15 = ((($0)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($16)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   invoke_vi($21|0,($18|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    HEAP32[$11>>2] = 1;
    $tmp7$sroa$5$0$$sroa_idx = ((($0)) + 8|0);
    $36 = $tmp7$sroa$5$0$$sroa_idx;
    $37 = $36;
    HEAP32[$37>>2] = $7;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $10;
    ___resumeException($34|0);
    // unreachable;
   }
   $24 = HEAP32[$19>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = ((($24)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    ___rust_deallocate($18,$26,$29);
   }
   ___rust_deallocate($16,12,4);
  }
 }
 HEAP32[$11>>2] = 1;
 $tmp7$sroa$5$0$$sroa_idx24 = ((($0)) + 8|0);
 $30 = $tmp7$sroa$5$0$$sroa_idx24;
 $31 = $30;
 HEAP32[$31>>2] = $7;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $10;
 $return$sroa$0$059 = 1;
 STACKTOP = sp;return ($return$sroa$0$059|0);
}
function __ZN4core3fmt5Write10write_char17h0215dfbe8d2aa2c1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $tmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $tmp6 = sp + 8|0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817ha52c5b0f35a8e6f3E_1028($tmp6,$1);
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp6);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17h36801230fc7a9465E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $tmp3 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3 = sp + 24|0;
 $tmp5 = sp;
 HEAP32[$tmp3>>2] = $0;
 ;HEAP32[$tmp5>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3,152,$tmp5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he8f64d6428b852ecE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9809e683662ad59fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load$i = 0, $$fca$1$load$i = 0, $$fca$2$gep$phi$trans$insert$i = 0, $$fca$2$load$i = 0, $$fca$2$load$pre$i = 0, $$fca$3$load$i = 0, $$repack10$i = 0, $$repack12$i = 0, $$repack14$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf$i = 0, $buf21$i = 0, $pos$0$i = 0, $scevgep$i = 0, $scevgep17$i = 0, $scevgep18$i = 0, $scevgep1819$i = 0, $scevgep22$i = 0, $scevgep2223$i = 0, $tmp6$i = 0, $umax$i = 0, $umax20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $buf$i = sp + 16|0;
 $tmp6$i = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $buf21$i = $buf$i;
 $scevgep$i = ((($buf$i)) + 4|0);
 $scevgep17$i = $scevgep$i;
 $scevgep18$i = ((($buf$i)) + 1|0);
 $scevgep1819$i = $scevgep18$i;
 $4 = ($scevgep17$i>>>0)>($scevgep1819$i>>>0);
 $umax$i = $4 ? $scevgep17$i : $scevgep1819$i;
 $umax20$i = $umax$i;
 $5 = (0 - ($buf21$i))|0;
 $scevgep22$i = (($umax20$i) + ($5)|0);
 $scevgep2223$i = $scevgep22$i;
 _memset(($buf$i|0),0,($scevgep2223$i|0))|0;
 $6 = ($1>>>0)<(128);
 do {
  if ($6) {
   $8 = ((($buf$i)) + 3|0);
   $9 = $1&255;
   HEAP8[$8>>0] = $9;
   $$fca$2$gep$phi$trans$insert$i = ((($buf$i)) + 2|0);
   $$fca$2$load$pre$i = HEAP8[$$fca$2$gep$phi$trans$insert$i>>0]|0;
   $$fca$2$load$i = $$fca$2$load$pre$i;$$fca$3$load$i = $9;$pos$0$i = 3;
  } else {
   $7 = ($1>>>0)<(2048);
   if ($7) {
    $10 = $1 >>> 6;
    $11 = $10 & 31;
    $12 = $11&255;
    $13 = ((($buf$i)) + 2|0);
    $14 = $12 | -64;
    HEAP8[$13>>0] = $14;
    $15 = $1 & 63;
    $16 = $15&255;
    $17 = ((($buf$i)) + 3|0);
    $18 = $16 | -128;
    HEAP8[$17>>0] = $18;
    $$fca$2$load$i = $14;$$fca$3$load$i = $18;$pos$0$i = 2;
    break;
   }
   $19 = ($1>>>0)<(65536);
   if ($19) {
    $20 = $1 >>> 12;
    $21 = $20 & 15;
    $22 = $21&255;
    $23 = $22 | -32;
    HEAP8[$scevgep18$i>>0] = $23;
    $24 = $1 >>> 6;
    $25 = $24 & 63;
    $26 = $25&255;
    $27 = ((($buf$i)) + 2|0);
    $28 = $26 | -128;
    HEAP8[$27>>0] = $28;
    $29 = $1 & 63;
    $30 = $29&255;
    $31 = ((($buf$i)) + 3|0);
    $32 = $30 | -128;
    HEAP8[$31>>0] = $32;
    $$fca$2$load$i = $28;$$fca$3$load$i = $32;$pos$0$i = 1;
    break;
   } else {
    $33 = $1 >>> 18;
    $34 = $33 & 7;
    $35 = $34&255;
    $36 = $35 | -16;
    HEAP8[$buf$i>>0] = $36;
    $37 = $1 >>> 12;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = $39 | -128;
    HEAP8[$scevgep18$i>>0] = $40;
    $41 = $1 >>> 6;
    $42 = $41 & 63;
    $43 = $42&255;
    $44 = ((($buf$i)) + 2|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $46 = $1 & 63;
    $47 = $46&255;
    $48 = ((($buf$i)) + 3|0);
    $49 = $47 | -128;
    HEAP8[$48>>0] = $49;
    $$fca$2$load$i = $45;$$fca$3$load$i = $49;$pos$0$i = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load$i = HEAP8[$buf$i>>0]|0;
 $$fca$1$load$i = HEAP8[$scevgep18$i>>0]|0;
 HEAP8[$tmp6$i>>0] = $$fca$0$load$i;
 $$repack10$i = ((($tmp6$i)) + 1|0);
 HEAP8[$$repack10$i>>0] = $$fca$1$load$i;
 $$repack12$i = ((($tmp6$i)) + 2|0);
 HEAP8[$$repack12$i>>0] = $$fca$2$load$i;
 $$repack14$i = ((($tmp6$i)) + 3|0);
 HEAP8[$$repack14$i>>0] = $$fca$3$load$i;
 $50 = ((($tmp6$i)) + 4|0);
 HEAP32[$50>>2] = $pos$0$i;
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp6$i);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $51 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E($3,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($51|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd1e739108faeaa9aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $tmp3$i = 0, $tmp5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3$i = sp + 24|0;
 $tmp5$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$tmp3$i>>2] = $2;
 ;HEAP32[$tmp5$i>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3$i,152,$tmp5$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817ha52c5b0f35a8e6f3E_1028($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load = 0, $$fca$1$load = 0, $$fca$2$gep$phi$trans$insert = 0, $$fca$2$load = 0, $$fca$2$load$pre = 0, $$fca$3$load = 0, $$repack10 = 0, $$repack12 = 0, $$repack14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf21 = 0, $pos$0 = 0, $scevgep = 0;
 var $scevgep17 = 0, $scevgep18 = 0, $scevgep1819 = 0, $scevgep22 = 0, $scevgep2223 = 0, $umax = 0, $umax20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf = sp;
 $buf21 = $buf;
 $scevgep = ((($buf)) + 4|0);
 $scevgep17 = $scevgep;
 $scevgep18 = ((($buf)) + 1|0);
 $scevgep1819 = $scevgep18;
 $2 = ($scevgep17>>>0)>($scevgep1819>>>0);
 $umax = $2 ? $scevgep17 : $scevgep1819;
 $umax20 = $umax;
 $3 = (0 - ($buf21))|0;
 $scevgep22 = (($umax20) + ($3)|0);
 $scevgep2223 = $scevgep22;
 _memset(($buf|0),0,($scevgep2223|0))|0;
 $4 = ($1>>>0)<(128);
 do {
  if ($4) {
   $6 = ((($buf)) + 3|0);
   $7 = $1&255;
   HEAP8[$6>>0] = $7;
   $$fca$2$gep$phi$trans$insert = ((($buf)) + 2|0);
   $$fca$2$load$pre = HEAP8[$$fca$2$gep$phi$trans$insert>>0]|0;
   $$fca$2$load = $$fca$2$load$pre;$$fca$3$load = $7;$pos$0 = 3;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $8 = $1 >>> 6;
    $9 = $8 & 31;
    $10 = $9&255;
    $11 = ((($buf)) + 2|0);
    $12 = $10 | -64;
    HEAP8[$11>>0] = $12;
    $13 = $1 & 63;
    $14 = $13&255;
    $15 = ((($buf)) + 3|0);
    $16 = $14 | -128;
    HEAP8[$15>>0] = $16;
    $$fca$2$load = $12;$$fca$3$load = $16;$pos$0 = 2;
    break;
   }
   $17 = ($1>>>0)<(65536);
   if ($17) {
    $18 = $1 >>> 12;
    $19 = $18 & 15;
    $20 = $19&255;
    $21 = $20 | -32;
    HEAP8[$scevgep18>>0] = $21;
    $22 = $1 >>> 6;
    $23 = $22 & 63;
    $24 = $23&255;
    $25 = ((($buf)) + 2|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $27 = $1 & 63;
    $28 = $27&255;
    $29 = ((($buf)) + 3|0);
    $30 = $28 | -128;
    HEAP8[$29>>0] = $30;
    $$fca$2$load = $26;$$fca$3$load = $30;$pos$0 = 1;
    break;
   } else {
    $31 = $1 >>> 18;
    $32 = $31 & 7;
    $33 = $32&255;
    $34 = $33 | -16;
    HEAP8[$buf>>0] = $34;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36&255;
    $38 = $37 | -128;
    HEAP8[$scevgep18>>0] = $38;
    $39 = $1 >>> 6;
    $40 = $39 & 63;
    $41 = $40&255;
    $42 = ((($buf)) + 2|0);
    $43 = $41 | -128;
    HEAP8[$42>>0] = $43;
    $44 = $1 & 63;
    $45 = $44&255;
    $46 = ((($buf)) + 3|0);
    $47 = $45 | -128;
    HEAP8[$46>>0] = $47;
    $$fca$2$load = $43;$$fca$3$load = $47;$pos$0 = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load = HEAP8[$buf>>0]|0;
 $$fca$1$load = HEAP8[$scevgep18>>0]|0;
 HEAP8[$0>>0] = $$fca$0$load;
 $$repack10 = ((($0)) + 1|0);
 HEAP8[$$repack10>>0] = $$fca$1$load;
 $$repack12 = ((($0)) + 2|0);
 HEAP8[$$repack12>>0] = $$fca$2$load;
 $$repack14 = ((($0)) + 3|0);
 HEAP8[$$repack14>>0] = $$fca$3$load;
 $48 = ((($0)) + 4|0);
 HEAP32[$48>>2] = $pos$0;
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_all17he855671065366876E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre = 0, $$pre85 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $buf$sroa$0$076$ph = 0;
 var $buf$sroa$8$077$ph = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i46 = 0, $cond$i45 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $lpad$phi55$index = 0, $lpad$phi55$index10 = 0, $or$cond = 0, $or$cond78 = 0, $or$cond98 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $switch = 0, $switch2 = 0, $switch2106 = 0, $tmp15 = 0;
 var $tmp24$sroa$0$0$$sroa_idx13 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $tmp5 = sp + 16|0;
 $tmp15 = sp + 8|0;
 $5 = ($3|0)==(0);
 L1: do {
  if (!($5)) {
   $6 = ((($tmp5)) + 4|0);
   $7 = ((($tmp5)) + 4|0);
   $8 = ((($tmp5)) + 8|0);
   $buf$sroa$0$076$ph = $2;$buf$sroa$8$077$ph = $3;
   L3: while(1) {
    __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5write17h0c414e1f808abd0dE($tmp5,$1,$buf$sroa$0$076$ph,$buf$sroa$8$077$ph);
    $9 = HEAP32[$tmp5>>2]|0;
    $switch2106 = ($9|0)==(1);
    if ($switch2106) {
     while(1) {
      __THREW__ = 0;
      $15 = (invoke_ii(94,($6|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       label = 31;
       break L3;
      }
      $20 = ($15<<24>>24)==(15);
      if (!($20)) {
       label = 13;
       break L3;
      }
      $$pre = HEAP32[$tmp5>>2]|0;
      $$pre85 = HEAP32[$7>>2]|0;
      $cond$i45 = ($$pre|0)==(1);
      $cond$i$i$i46 = ($$pre85|0)==(1);
      $or$cond78 = $cond$i45 & $cond$i$i$i46;
      if ($or$cond78) {
       $58 = HEAP32[$8>>2]|0;
       $59 = ((($58)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($58)) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = HEAP32[$62>>2]|0;
       __THREW__ = 0;
       invoke_vi($63|0,($60|0));
       $64 = __THREW__; __THREW__ = 0;
       $65 = $64&1;
       if ($65) {
        label = 34;
        break L3;
       }
       $66 = HEAP32[$61>>2]|0;
       $67 = ((($66)) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(0);
       if (!($69)) {
        $70 = ((($66)) + 8|0);
        $71 = HEAP32[$70>>2]|0;
        ___rust_deallocate($60,$68,$71);
       }
       ___rust_deallocate($58,12,4);
      }
      __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5write17h0c414e1f808abd0dE($tmp5,$1,$buf$sroa$0$076$ph,$buf$sroa$8$077$ph);
      $72 = HEAP32[$tmp5>>2]|0;
      $switch2 = ($72|0)==(1);
      if (!($switch2)) {
       break;
      }
     }
    }
    $14 = HEAP32[$7>>2]|0;
    $cond = ($14|0)==(0);
    if ($cond) {
     label = 6;
     break;
    }
    $18 = ($buf$sroa$8$077$ph>>>0)<($14>>>0);
    if ($18) {
     label = 11;
     break;
    }
    $73 = (($buf$sroa$0$076$ph) + ($14)|0);
    $74 = (($buf$sroa$8$077$ph) - ($14))|0;
    $75 = ($74|0)==(0);
    if ($75) {
     break L1;
    } else {
     $buf$sroa$0$076$ph = $73;$buf$sroa$8$077$ph = $74;
    }
   }
   do {
    if ((label|0) == 6) {
     __THREW__ = 0;
     invoke_viii(92,($4|0),(5544|0),28);
     $$sreg$field = HEAP32[$4>>2]|0;
     $$sreg$index1 = ((($4)) + 4|0);
     $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      label = 32;
     } else {
      __THREW__ = 0;
      invoke_viiii(93,($tmp15|0),14,($$sreg$field|0),($$sreg$field2|0));
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       label = 32;
      } else {
       HEAP32[$0>>2] = 1;
       $31 = ((($0)) + 4|0);
       $32 = $tmp15;
       $33 = $32;
       $34 = HEAP32[$33>>2]|0;
       $35 = (($32) + 4)|0;
       $36 = $35;
       $37 = HEAP32[$36>>2]|0;
       $38 = $31;
       $39 = $38;
       HEAP32[$39>>2] = $34;
       $40 = (($38) + 4)|0;
       $41 = $40;
       HEAP32[$41>>2] = $37;
       $42 = HEAP32[$tmp5>>2]|0;
       $cond$i = ($42|0)==(1);
       $43 = HEAP32[$7>>2]|0;
       $cond$i$i$i = ($43|0)==(1);
       $or$cond = $cond$i & $cond$i$i$i;
       if ($or$cond) {
        $44 = HEAP32[$8>>2]|0;
        $45 = ((($44)) + 4|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($44)) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = HEAP32[$48>>2]|0;
        __THREW__ = 0;
        invoke_vi($49|0,($46|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         $96 = ___cxa_find_matching_catch_2()|0;
         $97 = tempRet0;
         $lpad$phi55$index = $96;$lpad$phi55$index10 = $97;
         label = 36;
         break;
        }
        $52 = HEAP32[$47>>2]|0;
        $53 = ((($52)) + 4|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0);
        if (!($55)) {
         $56 = ((($52)) + 8|0);
         $57 = HEAP32[$56>>2]|0;
         ___rust_deallocate($46,$54,$57);
        }
        ___rust_deallocate($44,12,4);
       }
       STACKTOP = sp;return;
      }
     }
    }
    else if ((label|0) == 11) {
     __THREW__ = 0;
     invoke_vii(95,($14|0),($buf$sroa$8$077$ph|0));
     $19 = __THREW__; __THREW__ = 0;
     label = 32;
    }
    else if ((label|0) == 13) {
     $21 = $6;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $24 = (($21) + 4)|0;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$0>>2] = 1;
     $tmp24$sroa$0$0$$sroa_idx13 = ((($0)) + 4|0);
     $27 = $tmp24$sroa$0$0$$sroa_idx13;
     $28 = $27;
     HEAP32[$28>>2] = $23;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = $26;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 31) {
     $88 = ___cxa_find_matching_catch_2()|0;
     $89 = tempRet0;
     $lpad$phi$index = $88;$lpad$phi$index5 = $89;
    }
    else if ((label|0) == 34) {
     $94 = ___cxa_find_matching_catch_2()|0;
     $95 = tempRet0;
     $lpad$phi55$index = $94;$lpad$phi55$index10 = $95;
     label = 36;
    }
   } while(0);
   if ((label|0) == 32) {
    $90 = ___cxa_find_matching_catch_2()|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index5 = $91;
   }
   else if ((label|0) == 36) {
    $personalityslot$sroa$0$0 = $lpad$phi55$index;$personalityslot$sroa$5$0 = $lpad$phi55$index10;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $92 = HEAP32[$tmp5>>2]|0;
   $switch = ($92|0)==(1);
   $93 = HEAP32[$7>>2]|0;
   $cond$i$i = ($93|0)==(1);
   $or$cond98 = $switch & $cond$i$i;
   if (!($or$cond98)) {
    $personalityslot$sroa$0$0 = $lpad$phi$index;$personalityslot$sroa$5$0 = $lpad$phi$index5;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $76 = HEAP32[$8>>2]|0;
   $77 = ((($76)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($76)) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   FUNCTION_TABLE_vi[$81 & 255]($78);
   $82 = HEAP32[$79>>2]|0;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(0);
   if (!($85)) {
    $86 = ((($82)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    ___rust_deallocate($78,$84,$87);
   }
   ___rust_deallocate($76,12,4);
   $personalityslot$sroa$0$0 = $lpad$phi$index;$personalityslot$sroa$5$0 = $lpad$phi$index5;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN86__LT_core__cell__BorrowMutError_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hfee5cf65b32ea8f6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp1 = sp;
 __ZN4core3fmt8builders16debug_struct_new17hf20bda3204a7fc46E($tmp1,$1,5667,14);
 $2 = (__ZN4core3fmt8builders11DebugStruct6finish17h0059fdfd5fa3db64E($tmp1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3std6thread5local2os13destroy_value17hf077399dfe1fe652E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i = 0, $cond$i$i13 = 0, $return$0$i$i = 0, $return$0$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(74,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   ___rust_deallocate($0,12,4);
   ___resumeException($8|0);
   // unreachable;
  } else {
   $return$0$i$i = $3;
  }
 } else {
  $return$0$i$i = $2;
 }
 (_pthread_setspecific(($return$0$i$i|0),((1)|0))|0);
 ___rust_deallocate($0,12,4);
 $6 = HEAP32[$1>>2]|0;
 $cond$i$i13 = ($6|0)==(0);
 if (!($cond$i$i13)) {
  $return$0$i$i15 = $6;
  (_pthread_setspecific(($return$0$i$i15|0),(0|0))|0);
  return;
 }
 $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E($1)|0);
 $return$0$i$i15 = $7;
 (_pthread_setspecific(($return$0$i$i15|0),(0|0))|0);
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h06b90f9153f183bbE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-900289477);
 return -1653100559;
}
function __ZN3std3sys7condvar7Condvar3new17h6b1d5f097b9841fbE($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=(10320); stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _rust_begin_unwind($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $msg = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $msg = sp + 16|0;
 $tmp5 = sp;
 ;HEAP32[$msg>>2]=HEAP32[$0>>2]|0;HEAP32[$msg+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$msg+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$msg+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$msg+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$msg+20>>2]=HEAP32[$0+20>>2]|0;
 HEAP32[$tmp5>>2] = $1;
 $4 = ((($tmp5)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($tmp5)) + 8|0);
 HEAP32[$5>>2] = $3;
 __ZN3std9panicking15begin_panic_fmt17h4bc23b829f3f0569E($msg,$tmp5);
 // unreachable;
}
function __ZN3std9panicking15begin_panic_fmt17h4bc23b829f3f0569E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $s = 0, $tmp0$sroa$4$0$$sroa_idx2$i = 0, $tmp0$sroa$5$0$$sroa_idx4$i = 0, $tmp3$i = 0, $tmp5 = 0, $tmp5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp3$i = sp + 56|0;
 $tmp5$i = sp + 32|0;
 $s = sp + 16|0;
 $tmp5 = sp;
 HEAP32[$s>>2] = 1;
 $tmp0$sroa$4$0$$sroa_idx2$i = ((($s)) + 4|0);
 HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i>>2] = 0;
 $tmp0$sroa$5$0$$sroa_idx4$i = ((($s)) + 8|0);
 HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = 0;
 HEAP32[$tmp3$i>>2] = $s;
 ;HEAP32[$tmp5$i>>2]=HEAP32[$0>>2]|0;HEAP32[$tmp5$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$tmp5$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$tmp5$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$tmp5$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$tmp5$i+20>>2]=HEAP32[$0+20>>2]|0;
 __THREW__ = 0;
 (invoke_iiii(70,($tmp3$i|0),(176|0),($tmp5$i|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  ;HEAP32[$tmp5>>2]=HEAP32[$s>>2]|0;HEAP32[$tmp5+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$tmp5+8>>2]=HEAP32[$s+8>>2]|0;
  __THREW__ = 0;
  invoke_vii(96,($tmp5|0),($1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $personalityslot$sroa$0$0 = $5;$personalityslot$sroa$5$0 = $6;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $9 = HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i>>2]|0;
 $not$$i$i$i$i$i = ($9|0)==(0);
 if ($not$$i$i$i$i$i) {
  $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $10 = HEAP32[$s>>2]|0;
 ___rust_deallocate($10,$9,1);
 $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN3std9panicking11begin_panic17hb4a08e241830b1bcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $x$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$sroa$0$i = sp;
 ;HEAP32[$x$sroa$0$i>>2]=HEAP32[$0>>2]|0;HEAP32[$x$sroa$0$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$x$sroa$0$i+8>>2]=HEAP32[$0+8>>2]|0;
 $2 = (___rust_allocate(12,4)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  ;HEAP32[$2>>2]=HEAP32[$x$sroa$0$i>>2]|0;HEAP32[$2+4>>2]=HEAP32[$x$sroa$0$i+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$x$sroa$0$i+8>>2]|0;
  __ZN3std9panicking20rust_panic_with_hook17h078c87c7ade81a5eE($2,200,$1);
  // unreachable;
 }
}
function __ZN4drop17h94cfd518c9a91d16E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $not$$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$$i$i$i$i = ($2|0)==(0);
 if ($not$$i$i$i$i) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 ___rust_deallocate($3,$2,1);
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17he9dc3b6244070c2bE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-1423263431);
 return 738550453;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h983826f6a6667ffdE_24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h27a2fd2e6d62165aE_11($3,$1,$2);
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h52db261aac16412dE_25($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load$i$i$i$i = 0, $$fca$1$load$i$i$i$i = 0, $$fca$1$load$i$i$pre$i$i = 0, $$fca$2$load$i$i$i$i = 0, $$fca$3$load$i$i$i$i = 0, $$pre$i$i$i = 0, $$repack10$i$i$i$i = 0, $$repack12$i$i$i$i = 0, $$repack14$i$i$i$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i$i$i$i = 0, $buf21$i$i$i$i = 0, $pos$0$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep17$i$i$i$i = 0, $scevgep18$i$i$i$i = 0, $scevgep1819$i$i$i$i = 0, $scevgep22$i$i$i$i = 0, $scevgep2223$i$i$i$i = 0, $tmp9$i$i = 0;
 var $umax$i$i$i$i = 0, $umax20$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $buf$i$i$i$i = sp + 16|0;
 $tmp9$i$i = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($1>>>0)<(128);
 if ($4) {
  $5 = $1&255;
  $6 = ((($3)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($3)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==($9|0);
  if ($10) {
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h80c2a148e28b9a5dE_14($3);
   $$pre$i$i$i = HEAP32[$6>>2]|0;
   $13 = $$pre$i$i$i;
  } else {
   $13 = $7;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($13)|0);
  HEAP8[$12>>0] = $5;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$6>>2] = $15;
  STACKTOP = sp;return 0;
 }
 $buf21$i$i$i$i = $buf$i$i$i$i;
 $scevgep$i$i$i$i = ((($buf$i$i$i$i)) + 4|0);
 $scevgep17$i$i$i$i = $scevgep$i$i$i$i;
 $scevgep18$i$i$i$i = ((($buf$i$i$i$i)) + 1|0);
 $scevgep1819$i$i$i$i = $scevgep18$i$i$i$i;
 $16 = ($scevgep17$i$i$i$i>>>0)>($scevgep1819$i$i$i$i>>>0);
 $umax$i$i$i$i = $16 ? $scevgep17$i$i$i$i : $scevgep1819$i$i$i$i;
 $umax20$i$i$i$i = $umax$i$i$i$i;
 $17 = (0 - ($buf21$i$i$i$i))|0;
 $scevgep22$i$i$i$i = (($umax20$i$i$i$i) + ($17)|0);
 $scevgep2223$i$i$i$i = $scevgep22$i$i$i$i;
 _memset(($buf$i$i$i$i|0),0,($scevgep2223$i$i$i$i|0))|0;
 $18 = ($1>>>0)<(2048);
 do {
  if ($18) {
   $19 = $1 >>> 6;
   $20 = $19 & 31;
   $21 = $20&255;
   $22 = ((($buf$i$i$i$i)) + 2|0);
   $23 = $21 | -64;
   HEAP8[$22>>0] = $23;
   $24 = $1 & 63;
   $25 = $24&255;
   $26 = ((($buf$i$i$i$i)) + 3|0);
   $27 = $25 | -128;
   HEAP8[$26>>0] = $27;
   $$fca$1$load$i$i$pre$i$i = HEAP8[$scevgep18$i$i$i$i>>0]|0;
   $$fca$1$load$i$i$i$i = $$fca$1$load$i$i$pre$i$i;$$fca$2$load$i$i$i$i = $23;$$fca$3$load$i$i$i$i = $27;$pos$0$i$i$i$i = 2;
  } else {
   $28 = ($1>>>0)<(65536);
   if ($28) {
    $29 = $1 >>> 12;
    $30 = $29 & 15;
    $31 = $30&255;
    $32 = $31 | -32;
    HEAP8[$scevgep18$i$i$i$i>>0] = $32;
    $33 = $1 >>> 6;
    $34 = $33 & 63;
    $35 = $34&255;
    $36 = ((($buf$i$i$i$i)) + 2|0);
    $37 = $35 | -128;
    HEAP8[$36>>0] = $37;
    $38 = $1 & 63;
    $39 = $38&255;
    $40 = ((($buf$i$i$i$i)) + 3|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $$fca$1$load$i$i$i$i = $32;$$fca$2$load$i$i$i$i = $37;$$fca$3$load$i$i$i$i = $41;$pos$0$i$i$i$i = 1;
    break;
   } else {
    $42 = $1 >>> 18;
    $43 = $42 & 7;
    $44 = $43&255;
    $45 = $44 | -16;
    HEAP8[$buf$i$i$i$i>>0] = $45;
    $46 = $1 >>> 12;
    $47 = $46 & 63;
    $48 = $47&255;
    $49 = $48 | -128;
    HEAP8[$scevgep18$i$i$i$i>>0] = $49;
    $50 = $1 >>> 6;
    $51 = $50 & 63;
    $52 = $51&255;
    $53 = ((($buf$i$i$i$i)) + 2|0);
    $54 = $52 | -128;
    HEAP8[$53>>0] = $54;
    $55 = $1 & 63;
    $56 = $55&255;
    $57 = ((($buf$i$i$i$i)) + 3|0);
    $58 = $56 | -128;
    HEAP8[$57>>0] = $58;
    $$fca$1$load$i$i$i$i = $49;$$fca$2$load$i$i$i$i = $54;$$fca$3$load$i$i$i$i = $58;$pos$0$i$i$i$i = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load$i$i$i$i = HEAP8[$buf$i$i$i$i>>0]|0;
 HEAP8[$tmp9$i$i>>0] = $$fca$0$load$i$i$i$i;
 $$repack10$i$i$i$i = ((($tmp9$i$i)) + 1|0);
 HEAP8[$$repack10$i$i$i$i>>0] = $$fca$1$load$i$i$i$i;
 $$repack12$i$i$i$i = ((($tmp9$i$i)) + 2|0);
 HEAP8[$$repack12$i$i$i$i>>0] = $$fca$2$load$i$i$i$i;
 $$repack14$i$i$i$i = ((($tmp9$i$i)) + 3|0);
 HEAP8[$$repack14$i$i$i$i>>0] = $$fca$3$load$i$i$i$i;
 $59 = ((($tmp9$i$i)) + 4|0);
 HEAP32[$59>>2] = $pos$0$i$i$i$i;
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp9$i$i);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h27a2fd2e6d62165aE_11($3,$$sreg$field,$$sreg$field2);
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hab13550c701a111cE_26($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $tmp3$i = 0, $tmp5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3$i = sp + 24|0;
 $tmp5$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$tmp3$i>>2] = $2;
 ;HEAP32[$tmp5$i>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3$i,176,$tmp5$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4drop17hb53e40539eb19692E_33($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE_34($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $switchtmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $switchtmp$i$i = ($3|0)==(0|0);
 if (!($switchtmp$i$i)) {
  $4 = ((($1)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   ___rust_deallocate($3,$5,1);
  }
 }
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 (_pthread_mutex_destroy(($8|0))|0);
 $9 = HEAP32[$7>>2]|0;
 ___rust_deallocate($9,24,8);
 $10 = ((($1)) + 24|0);
 __THREW__ = 0;
 invoke_vi(90,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$10>>2]|0;
  ___rust_deallocate($15,48,8);
  ___resumeException($13|0);
  // unreachable;
 }
 $16 = HEAP32[$10>>2]|0;
 ___rust_deallocate($16,48,8);
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19-1)|0);
 $20 = ($19|0)==(1);
 if (!($20)) {
  return;
 }
 /* fence */;
 ___rust_deallocate($1,32,4);
 return;
}
function __ZN3std6memchr6memchr17ha93f0f8dbdee8760E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$i = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1&255;
 $5 = (_memchr($2,$4,$3)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$sink$i = 0;
  HEAP32[$0>>2] = $$sink$i;
  return;
 }
 $7 = $5;
 $8 = $2;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 4|0);
 HEAP32[$10>>2] = $9;
 $$sink$i = 1;
 HEAP32[$0>>2] = $$sink$i;
 return;
}
function __ZN3std10sys_common6poison4Flag3new17h75c9b359b4e03250E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN3std10sys_common11thread_info14current_thread17h4ec9eec30c30b602E() {
 var $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $$pre16$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i59$i$i$i = 0, $cond$i$i$i63$i$i$i = 0, $not$switch$i$i$i$i = 0, $personalityslot$sroa$0$1$i$i$i = 0, $personalityslot$sroa$11$1$i$i$i = 0, $return$sroa$0$0$i = 0, $switch$i$i = 0, $switch2tmp$i$i$i = 0;
 var $switchtmp$i$i = 0, $switchtmp$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i$i = 0, $switchtmp$i58$i$i$i = 0, $switchtmp$i68$i$i$i = 0, $tmp12$i$i$i = 0, $tmp3$i$i$i = 0, $tmp8$i$i$i = 0, $tmp9$sroa$5$0$$sroa_idx55$i$i$i = 0, $value$i$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = 0, $value$i$sroa$411$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp3$i$i$i = sp + 32|0;
 $tmp8$i$i$i = sp + 16|0;
 $tmp12$i$i$i = sp;
 $0 = (__ZN3std10sys_common11thread_info11THREAD_INFO7__getit17hdde1a118d5686da8E()|0);
 $switchtmp$i$i = ($0|0)==(0|0);
 if ($switchtmp$i$i) {
  $return$sroa$0$0$i = 0;
  STACKTOP = sp;return ($return$sroa$0$0$i|0);
 }
 $1 = (__ZN3std10sys_common11thread_info11THREAD_INFO7__getit17hdde1a118d5686da8E()|0);
 $switch2tmp$i$i$i = ($1|0)==(0|0);
 if ($switch2tmp$i$i$i) {
  __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(5731,57);
  // unreachable;
 }
 $2 = HEAP32[$1>>2]|0;
 $switch$i$i = ($2|0)==(1);
 do {
  if ($switch$i$i) {
   $$pre16$i$i = ((($1)) + 4|0);
   $$pre$phi$i$iZ2D = $$pre16$i$i;
  } else {
   ;HEAP32[$tmp3$i$i$i>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp3$i$i$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp3$i$i$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp3$i$i$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp3$i$i$i+16>>2]=HEAP32[$1+16>>2]|0;
   HEAP32[$1>>2] = 1;
   $value$i$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = ((($1)) + 4|0);
   HEAP32[$value$i$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i>>2] = 0;
   $value$i$sroa$411$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i = ((($1)) + 16|0);
   HEAP32[$value$i$sroa$411$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i>>2] = 0;
   $3 = HEAP32[$tmp3$i$i$i>>2]|0;
   $cond$i$i$i$i = ($3|0)==(1);
   if ($cond$i$i$i$i) {
    $4 = ((($tmp3$i$i$i)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $switchtmp$i$i$i$i$i$i$i = ($5|0)==(0|0);
    if (!($switchtmp$i$i$i$i$i$i$i)) {
     $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6-1)|0);
     $7 = ($6|0)==(1);
     if ($7) {
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE_34($4);
     }
    }
   }
   $8 = HEAP32[$1>>2]|0;
   $not$switch$i$i$i$i = ($8|0)==(1);
   if ($not$switch$i$i$i$i) {
    $$pre$phi$i$iZ2D = $value$i$sroa$0$0$tmp6$sroa$4$0$$sroa_cast$i$sroa_idx$i$i;
    break;
   } else {
    __ZN4core9panicking5panic17hf2309629b2721756E(2720);
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[$$pre$phi$i$iZ2D>>2]|0;
 $cond$i$i$i$i$i$i = ($9|0)==(-1);
 if ($cond$i$i$i$i$i$i) {
  __THREW__ = 0;
  invoke_v(97);
  $10 = __THREW__; __THREW__ = 0;
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $personalityslot$sroa$0$1$i$i$i = $11;$personalityslot$sroa$11$1$i$i$i = $12;
  ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
  // unreachable;
 }
 $13 = ((($1)) + 8|0);
 $14 = ((($1)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 do {
  if ($16) {
   HEAP32[$tmp12$i$i$i>>2] = 0;
   __THREW__ = 0;
   $17 = (invoke_ii(98,($tmp12$i$i$i|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $44 = ___cxa_find_matching_catch_2()|0;
    $45 = tempRet0;
    $personalityslot$sroa$0$1$i$i$i = $44;$personalityslot$sroa$11$1$i$i$i = $45;
    ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
    // unreachable;
   }
   $20 = $17;
   HEAP32[$tmp8$i$i$i>>2] = 0;
   $tmp9$sroa$5$0$$sroa_idx55$i$i$i = ((($tmp8$i$i$i)) + 8|0);
   HEAP32[$tmp9$sroa$5$0$$sroa_idx55$i$i$i>>2] = $20;
   $21 = HEAP32[$$pre$phi$i$iZ2D>>2]|0;
   $cond$i$i$i63$i$i$i = ($21|0)==(0);
   if (!($cond$i$i$i63$i$i$i)) {
    __THREW__ = 0;
    invoke_v(99);
    $22 = __THREW__; __THREW__ = 0;
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    $switchtmp$i$i$i$i = ($17|0)==(0);
    if ($switchtmp$i$i$i$i) {
     $personalityslot$sroa$0$1$i$i$i = $23;$personalityslot$sroa$11$1$i$i$i = $24;
     ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
     // unreachable;
    }
    $39 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($39-1)|0);
    $40 = ($39|0)==(1);
    if (!($40)) {
     $personalityslot$sroa$0$1$i$i$i = $23;$personalityslot$sroa$11$1$i$i$i = $24;
     ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
     // unreachable;
    }
    $41 = ((($tmp8$i$i$i)) + 8|0);
    /* fence */;
    __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE_34($41);
    $personalityslot$sroa$0$1$i$i$i = $23;$personalityslot$sroa$11$1$i$i$i = $24;
    ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
    // unreachable;
   }
   HEAP32[$$pre$phi$i$iZ2D>>2] = -1;
   $25 = HEAP32[$14>>2]|0;
   $switchtmp$i68$i$i$i = ($25|0)==(0|0);
   if (!($switchtmp$i68$i$i$i)) {
    $26 = HEAP32[$25>>2]|0;HEAP32[$25>>2] = (($26-1)|0);
    $27 = ($26|0)==(1);
    if ($27) {
     /* fence */;
     __THREW__ = 0;
     invoke_vi(100,($14|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $42 = ___cxa_find_matching_catch_2()|0;
      $43 = tempRet0;
      ;HEAP32[$13>>2]=HEAP32[$tmp8$i$i$i>>2]|0;HEAP32[$13+4>>2]=HEAP32[$tmp8$i$i$i+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$tmp8$i$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i$iZ2D>>2] = 0;
      $personalityslot$sroa$0$1$i$i$i = $42;$personalityslot$sroa$11$1$i$i$i = $43;
      ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
      // unreachable;
     }
    }
   }
   ;HEAP32[$13>>2]=HEAP32[$tmp8$i$i$i>>2]|0;HEAP32[$13+4>>2]=HEAP32[$tmp8$i$i$i+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$tmp8$i$i$i+8>>2]|0;
   HEAP32[$$pre$phi$i$iZ2D>>2] = 0;
   $$pre$i$i = HEAP32[$14>>2]|0;
   HEAP32[$$pre$phi$i$iZ2D>>2] = -1;
   $switchtmp$i58$i$i$i = ($$pre$i$i|0)==(0|0);
   if ($switchtmp$i58$i$i$i) {
    __THREW__ = 0;
    invoke_vi(71,(2720|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    HEAP32[$$pre$phi$i$iZ2D>>2] = 0;
    $personalityslot$sroa$0$1$i$i$i = $34;$personalityslot$sroa$11$1$i$i$i = $35;
    ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
    // unreachable;
   } else {
    $37 = $$pre$i$i;
   }
  } else {
   $cond$i$i$i59$i$i$i = ($9|0)==(0);
   if ($cond$i$i$i59$i$i$i) {
    HEAP32[$$pre$phi$i$iZ2D>>2] = -1;
    $37 = $15;
    break;
   }
   __THREW__ = 0;
   invoke_v(99);
   $30 = __THREW__; __THREW__ = 0;
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   $personalityslot$sroa$0$1$i$i$i = $31;$personalityslot$sroa$11$1$i$i$i = $32;
   ___resumeException($personalityslot$sroa$0$1$i$i$i|0);
   // unreachable;
  }
 } while(0);
 $36 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($36+1)|0);
 $38 = ($36|0)<(0);
 if ($38) {
  _llvm_trap();
  // unreachable;
 }
 $46 = $37;
 HEAP32[$$pre$phi$i$iZ2D>>2] = 0;
 $return$sroa$0$0$i = $46;
 STACKTOP = sp;return ($return$sroa$0$0$i|0);
}
function __ZN3std10sys_common11thread_info11THREAD_INFO7__getit17hdde1a118d5686da8E() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i = 0, $cond$i$i1$i = 0, $return$0$i$i$i = 0, $return$0$i$i3$i = 0, $tmp18$sroa$0$0$$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[583]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E(2332)|0);
  $return$0$i$i$i = $1;
 } else {
  $return$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($return$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $10 = $$$i;
  return ($10|0);
 }
 $6 = (___rust_allocate(24,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 HEAP32[$6>>2] = 2332;
 $tmp18$sroa$0$0$$sroa_idx$i = ((($6)) + 4|0);
 HEAP32[$tmp18$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = HEAP32[583]|0;
 $cond$i$i1$i = ($8|0)==(0);
 if ($cond$i$i1$i) {
  $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E(2332)|0);
  $return$0$i$i3$i = $9;
 } else {
  $return$0$i$i3$i = $8;
 }
 (_pthread_setspecific(($return$0$i$i3$i|0),($6|0))|0);
 $10 = $tmp18$sroa$0$0$$sroa_idx$i;
 return ($10|0);
}
function __ZN4core6result13unwrap_failed17hb90ee81b509584c6E() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $msg = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 5818;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 24;
 $1 = HEAP32[714]|0;
 $2 = HEAP32[(2860)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$tmp7>>2] = $3;
 $5 = ((($tmp7)) + 4|0);
 HEAP32[$5>>2] = (101);
 $6 = ((($tmp7)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($tmp7)) + 12|0);
 HEAP32[$7>>2] = (102);
 HEAP32[$tmp2>>2] = $1;
 $8 = ((($tmp2)) + 4|0);
 HEAP32[$8>>2] = $2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($tmp2)) + 16|0);
 HEAP32[$9>>2] = $tmp7;
 $10 = ((($tmp2)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,2844);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17hfdc0075334262a32E() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $msg = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 5788;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 16;
 $1 = HEAP32[714]|0;
 $2 = HEAP32[(2860)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$tmp7>>2] = $3;
 $5 = ((($tmp7)) + 4|0);
 HEAP32[$5>>2] = (101);
 $6 = ((($tmp7)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($tmp7)) + 12|0);
 HEAP32[$7>>2] = (103);
 HEAP32[$tmp2>>2] = $1;
 $8 = ((($tmp2)) + 4|0);
 HEAP32[$8>>2] = $2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($tmp2)) + 16|0);
 HEAP32[$9>>2] = $tmp7;
 $10 = ((($tmp2)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,2844);
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_39($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN86__LT_core__cell__BorrowMutError_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h9a4fe785d9edec6cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp1 = sp;
 __ZN4core3fmt8builders16debug_struct_new17hf20bda3204a7fc46E($tmp1,$1,5804,14);
 $2 = (__ZN4core3fmt8builders11DebugStruct6finish17h0059fdfd5fa3db64E($tmp1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN83__LT_core__cell__BorrowError_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h033bc02cc26e3131E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp1 = sp;
 __ZN4core3fmt8builders16debug_struct_new17hf20bda3204a7fc46E($tmp1,$1,5842,11);
 $2 = (__ZN4core3fmt8builders11DebugStruct6finish17h0059fdfd5fa3db64E($tmp1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3std6thread5local2os13destroy_value17h436f71fde916f283E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i15 = 0, $return$0$i$i = 0, $return$0$i$i17 = 0, $switchtmp$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(74,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $16 = ((($0)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $cond$i$i$i = ($17|0)==(1);
   if (!($cond$i$i$i)) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   $18 = ((($0)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $switchtmp$i$i$i$i$i$i = ($19|0)==(0|0);
   if ($switchtmp$i$i$i$i$i$i) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   $20 = HEAP32[$19>>2]|0;HEAP32[$19>>2] = (($20-1)|0);
   $21 = ($20|0)==(1);
   if (!($21)) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE_34($18);
   ___rust_deallocate($0,24,4);
   ___resumeException($14|0);
   // unreachable;
  } else {
   $return$0$i$i = $3;
  }
 } else {
  $return$0$i$i = $2;
 }
 (_pthread_setspecific(($return$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(1);
 if ($cond$i$i$i$i$i) {
  $8 = ((($0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $switchtmp$i$i$i$i$i$i$i$i = ($9|0)==(0|0);
  if (!($switchtmp$i$i$i$i$i$i$i$i)) {
   $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10-1)|0);
   $11 = ($10|0)==(1);
   if ($11) {
    /* fence */;
    __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE_34($8);
   }
  }
 }
 ___rust_deallocate($0,24,4);
 $12 = HEAP32[$1>>2]|0;
 $cond$i$i15 = ($12|0)==(0);
 if (!($cond$i$i15)) {
  $return$0$i$i17 = $12;
  (_pthread_setspecific(($return$0$i$i17|0),(0|0))|0);
  return;
 }
 $13 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E($1)|0);
 $return$0$i$i17 = $13;
 (_pthread_setspecific(($return$0$i$i17|0),(0|0))|0);
 return;
}
function __ZN3std10sys_common4util10dumb_print17hcb899301f7c5af50E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $args = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i$i8 = 0, $cond$i$i$i20$i$i$i = 0, $cond$i19$i$i$i = 0, $or$cond = 0, $output$i$i$i = 0, $personalityslot$sroa$0$0$i$i$i = 0, $personalityslot$sroa$5$0$i$i$i = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx62$i = 0;
 var $self$sroa$6$0$copyload$i = 0, $self$sroa$9$0$$sroa_idx66$i = 0, $self$sroa$9$0$copyload$i36 = 0, $stderr$i$i = 0, $switch$i$i$i = 0, $switch2$i = 0, $tmp1 = 0, $tmp1$sroa$0$0$i = 0, $tmp1$sroa$0$1$i = 0, $tmp1$sroa$6$0$$sroa_idx53$i = 0, $tmp1$sroa$6$0$i$off0 = 0, $tmp1$sroa$6$0$i$off32 = 0, $tmp1$sroa$6$1$i$off0 = 0, $tmp1$sroa$6$1$i$off32 = 0, $tmp13$i$i$i = 0, $tmp2$sroa$0$0$$sroa_idx$i$i$i = 0, $tmp8$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp;
 $stderr$i$i = sp + 96|0;
 $output$i$i$i = sp + 80|0;
 $tmp8$i$i$i = sp + 56|0;
 $tmp13$i$i$i = sp + 48|0;
 $args = sp + 24|0;
 $tmp1 = sp + 8|0;
 ;HEAP32[$args>>2]=HEAP32[$0>>2]|0;HEAP32[$args+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$0+20>>2]|0;
 __ZN3std3sys5stdio6Stderr3new17h0eadcd5c4e2628b1E($tmp1);
 $self$sroa$0$0$copyload$i = HEAP32[$tmp1>>2]|0;
 $switch2$i = ($self$sroa$0$0$copyload$i|0)==(1);
 if ($switch2$i) {
  $self$sroa$6$0$$sroa_idx62$i = ((($tmp1)) + 4|0);
  $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx62$i>>2]|0;
  $cond$i$i$i = ($self$sroa$6$0$copyload$i|0)==(1);
  if (!($cond$i$i$i)) {
   STACKTOP = sp;return;
  }
  $self$sroa$9$0$$sroa_idx66$i = ((($tmp1)) + 8|0);
  $self$sroa$9$0$copyload$i36 = HEAP32[$self$sroa$9$0$$sroa_idx66$i>>2]|0;
  $73 = ((($self$sroa$9$0$copyload$i36)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($self$sroa$9$0$copyload$i36)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vi[$77 & 255]($74);
  $78 = HEAP32[$75>>2]|0;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)==(0);
  if (!($81)) {
   $82 = ((($78)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   ___rust_deallocate($74,$80,$83);
  }
  ___rust_deallocate($self$sroa$9$0$copyload$i36,12,4);
  STACKTOP = sp;return;
 }
 HEAP32[$output$i$i$i>>2] = $stderr$i$i;
 $tmp2$sroa$0$0$$sroa_idx$i$i$i = ((($output$i$i$i)) + 4|0);
 HEAP32[$tmp2$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
 ;HEAP32[$tmp8$i$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$tmp8$i$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$tmp8$i$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$tmp8$i$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$tmp8$i$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$tmp8$i$i$i+20>>2]=HEAP32[$args+20>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_iiii(70,($output$i$i$i|0),(216|0),($tmp8$i$i$i|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L11: do {
  if (!($4)) {
   $switch$i$i$i = ($2<<24>>24)==(0);
   do {
    if ($switch$i$i$i) {
     $tmp1$sroa$0$0$i = 0;$tmp1$sroa$6$0$i$off0 = 0;$tmp1$sroa$6$0$i$off32 = 0;
     label = 10;
    } else {
     $5 = HEAP32[$tmp2$sroa$0$0$$sroa_idx$i$i$i>>2]|0;
     $6 = ($5|0)==(1);
     if ($6) {
      $tmp1$sroa$6$0$$sroa_idx53$i = ((($output$i$i$i)) + 8|0);
      $7 = $tmp1$sroa$6$0$$sroa_idx53$i;
      $8 = $7;
      $9 = HEAP32[$8>>2]|0;
      $10 = (($7) + 4)|0;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $tmp1$sroa$0$1$i = 1;$tmp1$sroa$6$1$i$off0 = $9;$tmp1$sroa$6$1$i$off32 = $12;
      break;
     }
     __THREW__ = 0;
     invoke_viii(92,($1|0),(5853|0),15);
     $$sreg$field = HEAP32[$1>>2]|0;
     $$sreg$index1 = ((($1)) + 4|0);
     $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      break L11;
     }
     __THREW__ = 0;
     invoke_viiii(93,($tmp13$i$i$i|0),16,($$sreg$field|0),($$sreg$field2|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      break L11;
     }
     $17 = $tmp13$i$i$i;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = (($17) + 4)|0;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     $tmp1$sroa$0$0$i = 1;$tmp1$sroa$6$0$i$off0 = $19;$tmp1$sroa$6$0$i$off32 = $22;
     label = 10;
    }
   } while(0);
   if ((label|0) == 10) {
    $23 = HEAP32[$tmp2$sroa$0$0$$sroa_idx$i$i$i>>2]|0;
    $cond$i19$i$i$i = ($23|0)==(1);
    if ($cond$i19$i$i$i) {
     $24 = ((($output$i$i$i)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $cond$i$i$i20$i$i$i = ($25|0)==(1);
     if ($cond$i$i$i20$i$i$i) {
      $26 = ((($output$i$i$i)) + 12|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($27)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($27)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vi($32|0,($29|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $59 = ___cxa_find_matching_catch_2()|0;
       $60 = tempRet0;
       $personalityslot$sroa$0$0$i$i$i = $59;$personalityslot$sroa$5$0$i$i$i = $60;
       ___resumeException($personalityslot$sroa$0$0$i$i$i|0);
       // unreachable;
      }
      $35 = HEAP32[$30>>2]|0;
      $36 = ((($35)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0);
      if (!($38)) {
       $39 = ((($35)) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       ___rust_deallocate($29,$37,$40);
      }
      ___rust_deallocate($27,12,4);
      $tmp1$sroa$0$1$i = $tmp1$sroa$0$0$i;$tmp1$sroa$6$1$i$off0 = $tmp1$sroa$6$0$i$off0;$tmp1$sroa$6$1$i$off32 = $tmp1$sroa$6$0$i$off32;
     } else {
      $tmp1$sroa$0$1$i = $tmp1$sroa$0$0$i;$tmp1$sroa$6$1$i$off0 = $tmp1$sroa$6$0$i$off0;$tmp1$sroa$6$1$i$off32 = $tmp1$sroa$6$0$i$off32;
     }
    } else {
     $tmp1$sroa$0$1$i = $tmp1$sroa$0$0$i;$tmp1$sroa$6$1$i$off0 = $tmp1$sroa$6$0$i$off0;$tmp1$sroa$6$1$i$off32 = $tmp1$sroa$6$0$i$off32;
    }
   }
   $61 = $tmp1$sroa$6$1$i$off32;
   $cond$i$i = ($tmp1$sroa$0$1$i|0)==(1);
   $cond$i$i$i$i8 = ($tmp1$sroa$6$1$i$off0|0)==(1);
   $or$cond = $cond$i$i$i$i8 & $cond$i$i;
   if (!($or$cond)) {
    STACKTOP = sp;return;
   }
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($61)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[$65>>2]|0;
   FUNCTION_TABLE_vi[$66 & 255]($63);
   $67 = HEAP32[$64>>2]|0;
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0);
   if (!($70)) {
    $71 = ((($67)) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    ___rust_deallocate($63,$69,$72);
   }
   ___rust_deallocate($61,12,4);
   STACKTOP = sp;return;
  }
 } while(0);
 $41 = ___cxa_find_matching_catch_2()|0;
 $42 = tempRet0;
 $43 = HEAP32[$tmp2$sroa$0$0$$sroa_idx$i$i$i>>2]|0;
 $cond$i$i$i$i = ($43|0)==(1);
 if (!($cond$i$i$i$i)) {
  $personalityslot$sroa$0$0$i$i$i = $41;$personalityslot$sroa$5$0$i$i$i = $42;
  ___resumeException($personalityslot$sroa$0$0$i$i$i|0);
  // unreachable;
 }
 $44 = ((($output$i$i$i)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $cond$i$i$i$i$i$i = ($45|0)==(1);
 if (!($cond$i$i$i$i$i$i)) {
  $personalityslot$sroa$0$0$i$i$i = $41;$personalityslot$sroa$5$0$i$i$i = $42;
  ___resumeException($personalityslot$sroa$0$0$i$i$i|0);
  // unreachable;
 }
 $46 = ((($output$i$i$i)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($47)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 FUNCTION_TABLE_vi[$52 & 255]($49);
 $53 = HEAP32[$50>>2]|0;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0);
 if (!($56)) {
  $57 = ((($53)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  ___rust_deallocate($49,$55,$58);
 }
 ___rust_deallocate($47,12,4);
 $personalityslot$sroa$0$0$i$i$i = $41;$personalityslot$sroa$5$0$i$i$i = $42;
 ___resumeException($personalityslot$sroa$0$0$i$i$i|0);
 // unreachable;
}
function __ZN4drop17ha52c4fe1639e9104E_44($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(1);
 if (!($cond$i)) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $cond$i$i$i = ($4|0)==(1);
 if (!($cond$i$i$i)) {
  return;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 255]($8);
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($12)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  ___rust_deallocate($8,$14,$17);
 }
 ___rust_deallocate($6,12,4);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E_45($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i = 0, $$pre85$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$sroa$0$076$ph$i = 0, $buf$sroa$8$077$ph$i = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i42 = 0, $cond$i$i$i46$i = 0, $cond$i$i40 = 0;
 var $cond$i41 = 0, $cond$i45$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index5 = 0, $lpad$phi55$i$index = 0, $lpad$phi55$i$index10 = 0, $or$cond$i = 0, $or$cond78$i = 0, $or$cond98$i = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$5$0$i = 0, $return$sroa$0$0101 = 0, $switch$i = 0, $switch2$i = 0, $switch2$i110 = 0, $tmp0$sroa$10$0$ph = 0, $tmp0$sroa$16$0$ph = 0, $tmp15$i = 0, $tmp15$i$sroa_raw_idx = 0, $tmp5$i = 0;
 var $tmp7$sroa$5$0$$sroa_idx = 0, $tmp7$sroa$5$0$$sroa_idx24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $tmp5$i = sp + 16|0;
 $tmp15$i = sp + 8|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($2|0)==(0);
 if ($5) {
  $return$sroa$0$0101 = 0;
  STACKTOP = sp;return ($return$sroa$0$0101|0);
 }
 $6 = ((($tmp5$i)) + 4|0);
 $7 = ((($tmp5$i)) + 4|0);
 $8 = ((($tmp5$i)) + 8|0);
 $buf$sroa$0$076$ph$i = $1;$buf$sroa$8$077$ph$i = $2;
 L4: while(1) {
  __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5write17h0c414e1f808abd0dE($tmp5$i,$4,$buf$sroa$0$076$ph$i,$buf$sroa$8$077$ph$i);
  $9 = HEAP32[$tmp5$i>>2]|0;
  $switch2$i110 = ($9|0)==(1);
  if ($switch2$i110) {
   while(1) {
    __THREW__ = 0;
    $15 = (invoke_ii(94,($6|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 29;
     break L4;
    }
    $20 = ($15<<24>>24)==(15);
    if (!($20)) {
     label = 12;
     break L4;
    }
    $$pre$i = HEAP32[$tmp5$i>>2]|0;
    $$pre85$i = HEAP32[$7>>2]|0;
    $cond$i45$i = ($$pre$i|0)==(1);
    $cond$i$i$i46$i = ($$pre85$i|0)==(1);
    $or$cond78$i = $cond$i45$i & $cond$i$i$i46$i;
    if ($or$cond78$i) {
     $41 = HEAP32[$8>>2]|0;
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($41)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = HEAP32[$45>>2]|0;
     __THREW__ = 0;
     invoke_vi($46|0,($43|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 32;
      break L4;
     }
     $49 = HEAP32[$44>>2]|0;
     $50 = ((($49)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0);
     if (!($52)) {
      $53 = ((($49)) + 8|0);
      $54 = HEAP32[$53>>2]|0;
      ___rust_deallocate($43,$51,$54);
     }
     ___rust_deallocate($41,12,4);
    }
    __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5write17h0c414e1f808abd0dE($tmp5$i,$4,$buf$sroa$0$076$ph$i,$buf$sroa$8$077$ph$i);
    $55 = HEAP32[$tmp5$i>>2]|0;
    $switch2$i = ($55|0)==(1);
    if (!($switch2$i)) {
     break;
    }
   }
  }
  $14 = HEAP32[$7>>2]|0;
  $cond$i = ($14|0)==(0);
  if ($cond$i) {
   label = 5;
   break;
  }
  $18 = ($buf$sroa$8$077$ph$i>>>0)<($14>>>0);
  if ($18) {
   label = 10;
   break;
  }
  $56 = (($buf$sroa$0$076$ph$i) + ($14)|0);
  $57 = (($buf$sroa$8$077$ph$i) - ($14))|0;
  $58 = ($57|0)==(0);
  if ($58) {
   $return$sroa$0$0101 = 0;
   label = 42;
   break;
  } else {
   $buf$sroa$0$076$ph$i = $56;$buf$sroa$8$077$ph$i = $57;
  }
 }
 do {
  if ((label|0) == 5) {
   __THREW__ = 0;
   invoke_viii(92,($3|0),(5868|0),28);
   $$sreg$field = HEAP32[$3>>2]|0;
   $$sreg$index1 = ((($3)) + 4|0);
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 30;
   } else {
    __THREW__ = 0;
    invoke_viiii(93,($tmp15$i|0),14,($$sreg$field|0),($$sreg$field2|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 30;
    } else {
     $23 = HEAP32[$tmp15$i>>2]|0;
     $tmp15$i$sroa_raw_idx = ((($tmp15$i)) + 4|0);
     $24 = HEAP32[$tmp15$i$sroa_raw_idx>>2]|0;
     $25 = HEAP32[$tmp5$i>>2]|0;
     $cond$i$i40 = ($25|0)==(1);
     $26 = HEAP32[$7>>2]|0;
     $cond$i$i$i$i = ($26|0)==(1);
     $or$cond$i = $cond$i$i40 & $cond$i$i$i$i;
     if ($or$cond$i) {
      $27 = HEAP32[$8>>2]|0;
      $28 = ((($27)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($27)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vi($32|0,($29|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $79 = ___cxa_find_matching_catch_2()|0;
       $80 = tempRet0;
       $lpad$phi55$i$index = $79;$lpad$phi55$i$index10 = $80;
       label = 34;
       break;
      }
      $35 = HEAP32[$30>>2]|0;
      $36 = ((($35)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0);
      if (!($38)) {
       $39 = ((($35)) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       ___rust_deallocate($29,$37,$40);
      }
      ___rust_deallocate($27,12,4);
     }
     $tmp0$sroa$10$0$ph = $23;$tmp0$sroa$16$0$ph = $24;
     label = 36;
    }
   }
  }
  else if ((label|0) == 10) {
   __THREW__ = 0;
   invoke_vii(95,($14|0),($buf$sroa$8$077$ph$i|0));
   $19 = __THREW__; __THREW__ = 0;
   label = 30;
  }
  else if ((label|0) == 12) {
   $21 = HEAP32[$7>>2]|0;
   $22 = HEAP32[$8>>2]|0;
   $tmp0$sroa$10$0$ph = $21;$tmp0$sroa$16$0$ph = $22;
   label = 36;
  }
  else if ((label|0) == 29) {
   $71 = ___cxa_find_matching_catch_2()|0;
   $72 = tempRet0;
   $lpad$phi$i$index = $71;$lpad$phi$i$index5 = $72;
  }
  else if ((label|0) == 32) {
   $77 = ___cxa_find_matching_catch_2()|0;
   $78 = tempRet0;
   $lpad$phi55$i$index = $77;$lpad$phi55$i$index10 = $78;
   label = 34;
  }
  else if ((label|0) == 42) {
   STACKTOP = sp;return ($return$sroa$0$0101|0);
  }
 } while(0);
 if ((label|0) == 30) {
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $lpad$phi$i$index = $73;$lpad$phi$i$index5 = $74;
 }
 else if ((label|0) == 34) {
  $personalityslot$sroa$0$0$i = $lpad$phi55$i$index;$personalityslot$sroa$5$0$i = $lpad$phi55$i$index10;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 else if ((label|0) == 36) {
  $83 = ((($0)) + 4|0);
  $88 = HEAP32[$83>>2]|0;
  $cond$i41 = ($88|0)==(1);
  if ($cond$i41) {
   $89 = ((($0)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $cond$i$i$i42 = ($90|0)==(1);
   if ($cond$i$i$i42) {
    $91 = ((($0)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($92)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    invoke_vi($97|0,($94|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $81 = ___cxa_find_matching_catch_2()|0;
     $82 = tempRet0;
     HEAP32[$83>>2] = 1;
     $tmp7$sroa$5$0$$sroa_idx = ((($0)) + 8|0);
     $84 = $tmp7$sroa$5$0$$sroa_idx;
     $85 = $84;
     HEAP32[$85>>2] = $tmp0$sroa$10$0$ph;
     $86 = (($84) + 4)|0;
     $87 = $86;
     HEAP32[$87>>2] = $tmp0$sroa$16$0$ph;
     ___resumeException($81|0);
     // unreachable;
    }
    $100 = HEAP32[$95>>2]|0;
    $101 = ((($100)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(0);
    if (!($103)) {
     $104 = ((($100)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     ___rust_deallocate($94,$102,$105);
    }
    ___rust_deallocate($92,12,4);
   }
  }
  HEAP32[$83>>2] = 1;
  $tmp7$sroa$5$0$$sroa_idx24 = ((($0)) + 8|0);
  $106 = $tmp7$sroa$5$0$$sroa_idx24;
  $107 = $106;
  HEAP32[$107>>2] = $tmp0$sroa$10$0$ph;
  $108 = (($106) + 4)|0;
  $109 = $108;
  HEAP32[$109>>2] = $tmp0$sroa$16$0$ph;
  $return$sroa$0$0101 = 1;
  STACKTOP = sp;return ($return$sroa$0$0101|0);
 }
 $75 = HEAP32[$tmp5$i>>2]|0;
 $switch$i = ($75|0)==(1);
 $76 = HEAP32[$7>>2]|0;
 $cond$i$i$i = ($76|0)==(1);
 $or$cond98$i = $switch$i & $cond$i$i$i;
 if (!($or$cond98$i)) {
  $personalityslot$sroa$0$0$i = $lpad$phi$i$index;$personalityslot$sroa$5$0$i = $lpad$phi$i$index5;
  ___resumeException($personalityslot$sroa$0$0$i|0);
  // unreachable;
 }
 $59 = HEAP32[$8>>2]|0;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($59)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$63>>2]|0;
 FUNCTION_TABLE_vi[$64 & 255]($61);
 $65 = HEAP32[$62>>2]|0;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $69 = ((($65)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  ___rust_deallocate($61,$67,$70);
 }
 ___rust_deallocate($59,12,4);
 $personalityslot$sroa$0$0$i = $lpad$phi$i$index;$personalityslot$sroa$5$0$i = $lpad$phi$i$index5;
 ___resumeException($personalityslot$sroa$0$0$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core3fmt5Write10write_char17h0215dfbe8d2aa2c1E_46($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load$i = 0, $$fca$1$load$i = 0, $$fca$2$gep$phi$trans$insert$i = 0, $$fca$2$load$i = 0, $$fca$2$load$pre$i = 0, $$fca$3$load$i = 0, $$repack10$i = 0, $$repack12$i = 0, $$repack14$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf$i = 0, $buf21$i = 0, $pos$0$i = 0, $scevgep$i = 0, $scevgep17$i = 0, $scevgep18$i = 0, $scevgep1819$i = 0, $scevgep22$i = 0, $scevgep2223$i = 0, $tmp6 = 0, $umax$i = 0, $umax20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $buf$i = sp + 16|0;
 $tmp6 = sp + 8|0;
 $buf21$i = $buf$i;
 $scevgep$i = ((($buf$i)) + 4|0);
 $scevgep17$i = $scevgep$i;
 $scevgep18$i = ((($buf$i)) + 1|0);
 $scevgep1819$i = $scevgep18$i;
 $3 = ($scevgep17$i>>>0)>($scevgep1819$i>>>0);
 $umax$i = $3 ? $scevgep17$i : $scevgep1819$i;
 $umax20$i = $umax$i;
 $4 = (0 - ($buf21$i))|0;
 $scevgep22$i = (($umax20$i) + ($4)|0);
 $scevgep2223$i = $scevgep22$i;
 _memset(($buf$i|0),0,($scevgep2223$i|0))|0;
 $5 = ($1>>>0)<(128);
 do {
  if ($5) {
   $7 = ((($buf$i)) + 3|0);
   $8 = $1&255;
   HEAP8[$7>>0] = $8;
   $$fca$2$gep$phi$trans$insert$i = ((($buf$i)) + 2|0);
   $$fca$2$load$pre$i = HEAP8[$$fca$2$gep$phi$trans$insert$i>>0]|0;
   $$fca$2$load$i = $$fca$2$load$pre$i;$$fca$3$load$i = $8;$pos$0$i = 3;
  } else {
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $9 = $1 >>> 6;
    $10 = $9 & 31;
    $11 = $10&255;
    $12 = ((($buf$i)) + 2|0);
    $13 = $11 | -64;
    HEAP8[$12>>0] = $13;
    $14 = $1 & 63;
    $15 = $14&255;
    $16 = ((($buf$i)) + 3|0);
    $17 = $15 | -128;
    HEAP8[$16>>0] = $17;
    $$fca$2$load$i = $13;$$fca$3$load$i = $17;$pos$0$i = 2;
    break;
   }
   $18 = ($1>>>0)<(65536);
   if ($18) {
    $19 = $1 >>> 12;
    $20 = $19 & 15;
    $21 = $20&255;
    $22 = $21 | -32;
    HEAP8[$scevgep18$i>>0] = $22;
    $23 = $1 >>> 6;
    $24 = $23 & 63;
    $25 = $24&255;
    $26 = ((($buf$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $28 = $1 & 63;
    $29 = $28&255;
    $30 = ((($buf$i)) + 3|0);
    $31 = $29 | -128;
    HEAP8[$30>>0] = $31;
    $$fca$2$load$i = $27;$$fca$3$load$i = $31;$pos$0$i = 1;
    break;
   } else {
    $32 = $1 >>> 18;
    $33 = $32 & 7;
    $34 = $33&255;
    $35 = $34 | -16;
    HEAP8[$buf$i>>0] = $35;
    $36 = $1 >>> 12;
    $37 = $36 & 63;
    $38 = $37&255;
    $39 = $38 | -128;
    HEAP8[$scevgep18$i>>0] = $39;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41&255;
    $43 = ((($buf$i)) + 2|0);
    $44 = $42 | -128;
    HEAP8[$43>>0] = $44;
    $45 = $1 & 63;
    $46 = $45&255;
    $47 = ((($buf$i)) + 3|0);
    $48 = $46 | -128;
    HEAP8[$47>>0] = $48;
    $$fca$2$load$i = $44;$$fca$3$load$i = $48;$pos$0$i = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load$i = HEAP8[$buf$i>>0]|0;
 $$fca$1$load$i = HEAP8[$scevgep18$i>>0]|0;
 HEAP8[$tmp6>>0] = $$fca$0$load$i;
 $$repack10$i = ((($tmp6)) + 1|0);
 HEAP8[$$repack10$i>>0] = $$fca$1$load$i;
 $$repack12$i = ((($tmp6)) + 2|0);
 HEAP8[$$repack12$i>>0] = $$fca$2$load$i;
 $$repack14$i = ((($tmp6)) + 3|0);
 HEAP8[$$repack14$i>>0] = $$fca$3$load$i;
 $49 = ((($tmp6)) + 4|0);
 HEAP32[$49>>2] = $pos$0$i;
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp6);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $50 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E_45($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($50|0);
}
function __ZN4core3fmt5Write9write_fmt17h36801230fc7a9465E_47($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $tmp3 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3 = sp + 24|0;
 $tmp5 = sp;
 HEAP32[$tmp3>>2] = $0;
 ;HEAP32[$tmp5>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3,240,$tmp5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he8f64d6428b852ecE_48($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E_45($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9809e683662ad59fE_49($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt5Write10write_char17h0215dfbe8d2aa2c1E_46($2,$1)|0);
 return ($3|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd1e739108faeaa9aE_50($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $tmp3$i = 0, $tmp5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3$i = sp + 24|0;
 $tmp5$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$tmp3$i>>2] = $2;
 ;HEAP32[$tmp5$i>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3$i,240,$tmp5$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std10sys_common4util5abort17h1b8fea8ffc4341d9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args = 0, $tmp1 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $args = sp + 32|0;
 $tmp1 = sp + 8|0;
 $tmp6 = sp;
 ;HEAP32[$args>>2]=HEAP32[$0>>2]|0;HEAP32[$args+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$0+20>>2]|0;
 $1 = $args;
 HEAP32[$tmp6>>2] = $1;
 $2 = ((($tmp6)) + 4|0);
 HEAP32[$2>>2] = (104);
 HEAP32[$tmp1>>2] = 2340;
 $3 = ((($tmp1)) + 4|0);
 HEAP32[$3>>2] = 2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp1)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $4 = ((($tmp1)) + 16|0);
 HEAP32[$4>>2] = $tmp6;
 $5 = ((($tmp1)) + 20|0);
 HEAP32[$5>>2] = 1;
 __ZN3std10sys_common4util10dumb_print17hcb899301f7c5af50E($tmp1);
 _abort();
 // unreachable;
}
function __ZN3std3sys9backtrace8printing3imp5print17h93686ab3d5c84b5dE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $tmp11 = 0, $tmp16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 16|0;
 $7 = sp;
 $info = sp + 40|0;
 $tmp11 = sp + 32|0;
 $tmp16 = sp + 24|0;
 ;HEAP32[$info>>2]=0|0;HEAP32[$info+4>>2]=0|0;HEAP32[$info+8>>2]=0|0;HEAP32[$info+12>>2]=0|0;
 $8 = (_dladdr(($4|0),($info|0))|0);
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$tmp11>>2] = 0;
  __ZN3std10sys_common9backtrace6output17hf51ce9950973586dE($0,$1,$2,$3,$4,$tmp11);
  STACKTOP = sp;return;
 } else {
  $10 = ((($info)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  __ZN3std3ffi5c_str4CStr8from_ptr17hccf32a6a0d5018c7E($7,$11);
  $$sreg$field = HEAP32[$7>>2]|0;
  $$sreg$index2 = ((($7)) + 4|0);
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
  __ZN3std3ffi5c_str4CStr8to_bytes17h354e9e9265613016E($6,$$sreg$field,$$sreg$field3);
  $$sreg1$field = HEAP32[$6>>2]|0;
  $$sreg1$index5 = ((($6)) + 4|0);
  $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
  HEAP32[$tmp16>>2] = $$sreg1$field;
  $12 = ((($tmp16)) + 4|0);
  HEAP32[$12>>2] = $$sreg1$field6;
  __ZN3std10sys_common9backtrace6output17hf51ce9950973586dE($0,$1,$2,$3,$4,$tmp16);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h83a4656d82add0d1E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $not$$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$$i$i$i$i$i = ($2|0)==(0);
 if ($not$$i$i$i$i$i) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 ___rust_deallocate($3,$2,1);
 return;
}
function __ZN223__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17ha0587500bb8b89b0E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std5error5Error5cause17he928b39861950681E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17h486480f3da311d9aE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-402357444);
 return 441476221;
}
function __ZN224__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h9e808362ecebd760E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN222__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h189ecd2f6ce67aafE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $builder = 0, $tmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $builder = sp;
 $tmp8 = sp + 16|0;
 __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder,$1,5918,11);
 HEAP32[$tmp8>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17h6e4856dbc1d95c67E($builder,$tmp8,296)|0);
 $2 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4drop17hb53e40539eb19692E_53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h8c153ec5b2aad6beE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17he908de228f92c287E($3,$5,$1)|0);
 return ($6|0);
}
function __ZN153__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_a_GT__u20_as_u20_core__convert__From_LT__RF__u27_b_u20_str_GT__GT_4from17hdebf881be2a57f8cE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $retVal$index1 = 0, $tmp0 = 0, $x$sroa$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$sroa$0$i$i = sp + 16|0;
 $tmp0 = sp;
 __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h9f84ac3c09815c3eE($tmp0,$0,$1);
 ;HEAP32[$x$sroa$0$i$i>>2]=HEAP32[$tmp0>>2]|0;HEAP32[$x$sroa$0$i$i+4>>2]=HEAP32[$tmp0+4>>2]|0;HEAP32[$x$sroa$0$i$i+8>>2]=HEAP32[$tmp0+8>>2]|0;
 $2 = (___rust_allocate(12,4)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  ;HEAP32[$2>>2]=HEAP32[$x$sroa$0$i$i>>2]|0;HEAP32[$2+4>>2]=HEAP32[$x$sroa$0$i$i+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$x$sroa$0$i$i+8>>2]|0;
  HEAP32[$retVal>>2] = $2;
  $retVal$index1 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index1>>2] = 264;
  STACKTOP = sp;return;
 }
}
function __ZN3std10sys_common5mutex5Mutex3new17ha4051e0b0038a3ceE($0) {
 $0 = $0|0;
 var $tmp0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp0 = sp;
 __ZN3std3sys5mutex5Mutex3new17hc5931bc70631e930E($tmp0);
 ;HEAP32[$0>>2]=HEAP32[$tmp0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$tmp0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$tmp0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$tmp0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$tmp0+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$tmp0+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3std3sys2fd8FileDesc3new17hb3e53d752e557ee1E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN3std3sys2fd8FileDesc8into_raw17hb62772b2fc16b6cfE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN3std3sys2fd8FileDesc5write17h1978383ceb49334bE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$i = 0, $tmp0$sroa$0$0$$sroa_idx2$i = 0, $tmp3$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$i = sp + 8|0;
 $tmp3$i = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_write($4,$2,$3)|0);
 HEAP32[$t$i>>2] = $5;
 $6 = (__ZN46__LT_isize_u20_as_u20_std__sys__IsMinusOne_GT_12is_minus_one17h16d1fe41b33164adE($t$i)|0);
 if ($6) {
  __ZN3std2io5error5Error13last_os_error17h703800597e230ec8E($tmp3$i);
  $7 = $tmp3$i;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $tmp0$sroa$0$0$$sroa_idx2$i = ((($0)) + 4|0);
  $13 = $tmp0$sroa$0$0$$sroa_idx2$i;
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  $$sink = 1;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $17 = HEAP32[$t$i>>2]|0;
  $18 = ((($0)) + 4|0);
  HEAP32[$18>>2] = $17;
  $$sink = 0;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function __ZN58__LT_std__sys__fd__FileDesc_u20_as_u20_core__ops__Drop_GT_4drop17h90a51148a755edccE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (_close($1)|0);
 return;
}
function __ZN3std4sync7condvar7Condvar3new17h8ec377b696beaf51E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___rust_allocate(48,8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(105,($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___rust_deallocate($1,48,8);
  ___resumeException($5|0);
  // unreachable;
 } else {
  $7 = $1;
  HEAP32[$0>>2] = $7;
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = 0;
  return;
 }
}
function __ZN63__LT_std__sync__condvar__Condvar_u20_as_u20_core__ops__Drop_GT_4drop17h2da1c552dcb919e6E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (_pthread_cond_destroy(($1|0))|0);
 return;
}
function __ZN78__LT_std__ffi__os_str__OsString_u20_as_u20_core__cmp__PartialEq_LT_str_GT__GT_2eq17hc1a180efe967a6adE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $return$0$off0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp;
 __ZN3std3sys6os_str3Buf8as_slice17h49bf8867349186baE($4,$0);
 $$sreg$field = HEAP32[$4>>2]|0;
 $$sreg$index2 = ((($4)) + 4|0);
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
 __ZN3std3sys6os_str5Slice8from_str17h63c46f212e29d9f8E($3,$1,$2);
 $$sreg1$field = HEAP32[$3>>2]|0;
 $$sreg1$index5 = ((($3)) + 4|0);
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
 $5 = ($$sreg1$field6|0)==($$sreg$field3|0);
 if (!($5)) {
  $return$0$off0$i$i$i$i$i = 0;
  STACKTOP = sp;return ($return$0$off0$i$i$i$i$i|0);
 }
 $6 = ($$sreg1$field|0)==($$sreg$field|0);
 if ($6) {
  $return$0$off0$i$i$i$i$i = 1;
  STACKTOP = sp;return ($return$0$off0$i$i$i$i$i|0);
 }
 $7 = (_memcmp($$sreg$field,$$sreg1$field,$$sreg$field3)|0);
 $8 = ($7|0)==(0);
 $return$0$off0$i$i$i$i$i = $8;
 STACKTOP = sp;return ($return$0$off0$i$i$i$i$i|0);
}
function __ZN60__LT_std__ffi__os_str__OsStr_u20_as_u20_core__fmt__Debug_GT_3fmt17h84be3b76a1577434E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN60__LT_std__sys__os_str__Slice_u20_as_u20_core__fmt__Debug_GT_3fmt17haa6ec941d47dfd57E($0,$1,$2)|0);
 return ($3|0);
}
function __ZN3std3ffi6os_str85__LT_impl_u20_core__convert__AsRef_LT_std__ffi__os_str__OsStr_GT__u20_for_u20_str_GT_6as_ref17h93b57324fe66b1b3E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $retVal$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN3std3sys6os_str5Slice8from_str17h63c46f212e29d9f8E($2,$0,$1);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN78__LT_std__ffi__os_str__OsString_u20_as_u20_std__sys__ext__ffi__OsStringExt_GT_8from_vec17hd1f9261da8a4be75E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 return;
}
function __ZN72__LT_std__ffi__os_str__OsStr_u20_as_u20_std__sys__ext__ffi__OsStrExt_GT_8as_bytes17h1d0287a3f83cc2deE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = $0;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $1;
 return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_170($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN3std3env7_var_os17h64d4b62c0d2396f2E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i$i$i$i = 0, $e$i$i = 0, $key = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$11$0$$sroa_idx73$i = 0, $self$sroa$11$0$copyload$i = 0, $self$sroa$15$0$$sroa_idx79$i = 0, $self$sroa$15$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx68$i = 0, $self$sroa$6$0$copyload$i = 0;
 var $switch2$i = 0, $tmp0 = 0, $tmp1$sroa$0$0$$sroa_idx$i$i$i = 0, $tmp1$sroa$0$sroa$4$0$tmp1$sroa$0$0$$sroa_cast27$sroa_idx88$i = 0, $tmp1$sroa$0$sroa$5$0$tmp1$sroa$0$0$$sroa_cast27$sroa_idx90$i = 0, $tmp4$i$i = 0, $tmp9$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $e$i$i = sp + 64|0;
 $tmp4$i$i = sp + 40|0;
 $tmp9$i$i = sp + 24|0;
 $key = sp + 16|0;
 $tmp0 = sp;
 HEAP32[$key>>2] = $1;
 $3 = ((($key)) + 4|0);
 HEAP32[$3>>2] = $2;
 __ZN3std3sys2os6getenv17hebb75126b85907c0E($tmp0,$1,$2);
 $self$sroa$0$0$copyload$i = HEAP32[$tmp0>>2]|0;
 $self$sroa$6$0$$sroa_idx68$i = ((($tmp0)) + 4|0);
 $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx68$i>>2]|0;
 $self$sroa$11$0$$sroa_idx73$i = ((($tmp0)) + 8|0);
 $self$sroa$11$0$copyload$i = HEAP32[$self$sroa$11$0$$sroa_idx73$i>>2]|0;
 $switch2$i = ($self$sroa$0$0$copyload$i|0)==(1);
 if (!($switch2$i)) {
  $self$sroa$15$0$$sroa_idx79$i = ((($tmp0)) + 12|0);
  $self$sroa$15$0$copyload$i = HEAP32[$self$sroa$15$0$$sroa_idx79$i>>2]|0;
  HEAP32[$0>>2] = $self$sroa$6$0$copyload$i;
  $tmp1$sroa$0$sroa$4$0$tmp1$sroa$0$0$$sroa_cast27$sroa_idx88$i = ((($0)) + 4|0);
  HEAP32[$tmp1$sroa$0$sroa$4$0$tmp1$sroa$0$0$$sroa_cast27$sroa_idx88$i>>2] = $self$sroa$11$0$copyload$i;
  $tmp1$sroa$0$sroa$5$0$tmp1$sroa$0$0$$sroa_cast27$sroa_idx90$i = ((($0)) + 8|0);
  HEAP32[$tmp1$sroa$0$sroa$5$0$tmp1$sroa$0$0$$sroa_cast27$sroa_idx90$i>>2] = $self$sroa$15$0$copyload$i;
  STACKTOP = sp;return;
 }
 $5 = $e$i$i;
 $6 = $5;
 HEAP32[$6>>2] = $self$sroa$6$0$copyload$i;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $self$sroa$11$0$copyload$i;
 $9 = $key;
 $10 = $e$i$i;
 HEAP32[$tmp9$i$i>>2] = $9;
 $11 = ((($tmp9$i$i)) + 4|0);
 HEAP32[$11>>2] = (106);
 $12 = ((($tmp9$i$i)) + 8|0);
 HEAP32[$12>>2] = $10;
 $13 = ((($tmp9$i$i)) + 12|0);
 HEAP32[$13>>2] = (107);
 HEAP32[$tmp4$i$i>>2] = 2380;
 $14 = ((($tmp4$i$i)) + 4|0);
 HEAP32[$14>>2] = 2;
 $tmp1$sroa$0$0$$sroa_idx$i$i$i = ((($tmp4$i$i)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
 $15 = ((($tmp4$i$i)) + 16|0);
 HEAP32[$15>>2] = $tmp9$i$i;
 $16 = ((($tmp4$i$i)) + 20|0);
 HEAP32[$16>>2] = 2;
 __THREW__ = 0;
 invoke_vii(108,($tmp4$i$i|0),(2396|0));
 $17 = __THREW__; __THREW__ = 0;
 $4 = ___cxa_find_matching_catch_2()|0;
 $18 = tempRet0;
 $19 = HEAP32[$e$i$i>>2]|0;
 $cond$i$i$i$i = ($19|0)==(1);
 if (!($cond$i$i$i$i)) {
  ___resumeException($4|0);
  // unreachable;
 }
 $20 = ((($e$i$i)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($21)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 255]($23);
 $27 = HEAP32[$24>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = ((($27)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  ___rust_deallocate($23,$29,$32);
 }
 ___rust_deallocate($21,12,4);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hbb9a2ccb9be42399E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN60__LT_std__ffi__os_str__OsStr_u20_as_u20_core__fmt__Debug_GT_3fmt17h84be3b76a1577434E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h09bbb9f46dad4ca8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $detail = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i14 = 0, $return$sroa$0$0 = 0, $switch = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp3 = 0;
 var $tmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $code = sp + 52|0;
 $detail = sp + 40|0;
 $tmp3 = sp + 16|0;
 $tmp8 = sp;
 $2 = HEAP32[$0>>2]|0;
 $switch = ($2|0)==(1);
 if ($switch) {
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 4|0);
  $19 = ((($17)) + 8|0);
  $20 = HEAP32[$18>>2]|0;
  $21 = HEAP32[$19>>2]|0;
  $22 = ((($21)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 255]($20,$1)|0);
  $$pre$phiZ2D = $code;$return$sroa$0$0 = $24;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$code>>2] = $4;
 __ZN3std3sys2os12error_string17hde04785399ecd97dE($detail,$4);
 $5 = $detail;
 $6 = $code;
 HEAP32[$tmp8>>2] = $5;
 $7 = ((($tmp8)) + 4|0);
 HEAP32[$7>>2] = (109);
 $8 = ((($tmp8)) + 8|0);
 HEAP32[$8>>2] = $6;
 $9 = ((($tmp8)) + 12|0);
 HEAP32[$9>>2] = (110);
 HEAP32[$tmp3>>2] = 2408;
 $10 = ((($tmp3)) + 4|0);
 HEAP32[$10>>2] = 3;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp3)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $11 = ((($tmp3)) + 16|0);
 HEAP32[$11>>2] = $tmp8;
 $12 = ((($tmp3)) + 20|0);
 HEAP32[$12>>2] = 2;
 __THREW__ = 0;
 $13 = (invoke_iii(111,($1|0),($tmp3|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  $30 = ((($detail)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $not$$i$i$i$i$i = ($31|0)==(0);
  if ($not$$i$i$i$i$i) {
   ___resumeException($25|0);
   // unreachable;
  }
  $32 = HEAP32[$detail>>2]|0;
  ___rust_deallocate($32,$31,1);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $26 = ((($detail)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $not$$i$i$i$i$i14 = ($27|0)==(0);
  if (!($not$$i$i$i$i$i14)) {
   $28 = HEAP32[$detail>>2]|0;
   ___rust_deallocate($28,$27,1);
  }
  $$pre$phiZ2D = $code;$return$sroa$0$0 = $13;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17hb4217629309309c3E_724($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hfd02a1f5201bc5ecE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i = 0;
 var $not$$i$i$i$i$i11 = 0, $tmp0$sroa$4$0$$sroa_idx6$i$i = 0, $x$i$sroa$4$0$$sroa_raw_idx$i$i = 0, $x$i$sroa$4$i$i = 0, $x$i$sroa$5$0$$sroa_idx$i$i = 0, $x$i$sroa$6$0$$sroa_idx$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $x$i$sroa$4$i$i = sp + 8|0;
 __THREW__ = 0;
 invoke_viii(92,($2|0),(6069|0),33);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = (___rust_allocate(12,4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(72);
    $7 = __THREW__; __THREW__ = 0;
    break;
   }
   HEAP8[$5>>0] = 11;
   $x$i$sroa$4$0$$sroa_raw_idx$i$i = ((($5)) + 1|0);
   ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$x$i$sroa$4$i$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$x$i$sroa$4$i$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$x$i$sroa$4$i$i+2>>0]|0;
   $x$i$sroa$5$0$$sroa_idx$i$i = ((($5)) + 4|0);
   HEAP32[$x$i$sroa$5$0$$sroa_idx$i$i>>2] = $$sreg$field;
   $x$i$sroa$6$0$$sroa_idx$i$i = ((($5)) + 8|0);
   HEAP32[$x$i$sroa$6$0$$sroa_idx$i$i>>2] = $$sreg$field2;
   HEAP32[$0>>2] = 1;
   $tmp0$sroa$4$0$$sroa_idx6$i$i = ((($0)) + 4|0);
   HEAP32[$tmp0$sroa$4$0$$sroa_idx6$i$i>>2] = $5;
   $9 = ((($1)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $not$$i$i$i$i$i = ($10|0)==(0);
   if ($not$$i$i$i$i$i) {
    STACKTOP = sp;return;
   }
   $11 = ((($1)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   ___rust_deallocate($12,$10,1);
   STACKTOP = sp;return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $not$$i$i$i$i$i11 = ($15|0)==(0);
 if ($not$$i$i$i$i$i11) {
  ___resumeException($8|0);
  // unreachable;
 }
 $16 = ((($1)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 ___rust_deallocate($17,$15,1);
 ___resumeException($8|0);
 // unreachable;
}
function __ZN3std2io5error5Error4_new17h1c0b1f30736123e1E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $tmp0$sroa$4$0$$sroa_idx6 = 0, $x$i$sroa$4 = 0, $x$i$sroa$4$0$$sroa_raw_idx = 0, $x$i$sroa$5$0$$sroa_idx = 0, $x$i$sroa$6$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$i$sroa$4 = sp;
 $4 = (___rust_allocate(12,4)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  HEAP8[$4>>0] = $1;
  $x$i$sroa$4$0$$sroa_raw_idx = ((($4)) + 1|0);
  ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx>>0]=HEAP8[$x$i$sroa$4>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx+1>>0]=HEAP8[$x$i$sroa$4+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx+2>>0]=HEAP8[$x$i$sroa$4+2>>0]|0;
  $x$i$sroa$5$0$$sroa_idx = ((($4)) + 4|0);
  HEAP32[$x$i$sroa$5$0$$sroa_idx>>2] = $2;
  $x$i$sroa$6$0$$sroa_idx = ((($4)) + 8|0);
  HEAP32[$x$i$sroa$6$0$$sroa_idx>>2] = $3;
  HEAP32[$0>>2] = 1;
  $tmp0$sroa$4$0$$sroa_idx6 = ((($0)) + 4|0);
  HEAP32[$tmp0$sroa$4$0$$sroa_idx6>>2] = $4;
  STACKTOP = sp;return;
 }
}
function __ZN3std2io5error5Error13last_os_error17h703800597e230ec8E($0) {
 $0 = $0|0;
 var $1 = 0, $tmp0$sroa$4$0$$sroa_idx2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN3std3sys2os5errno17ha307a6ea5731d212E()|0);
 HEAP32[$0>>2] = 0;
 $tmp0$sroa$4$0$$sroa_idx2$i = ((($0)) + 4|0);
 HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i>>2] = $1;
 return;
}
function __ZN3std2io5error5Error4kind17he57c544533e5cb7bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $return$0 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $switch = ($1|0)==(1);
 if ($switch) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $return$0 = $7;
  return ($return$0|0);
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (__ZN3std3sys17decode_error_kind17h75a4548c859f92b6E($3)|0);
  $return$0 = $4;
  return ($return$0|0);
 }
 return (0)|0;
}
function __ZN3std10sys_common9backtrace11log_enabled17hae89effe85916338E() {
 var $$ = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i$i = 0;
 var $not$$i$i$i$i$i$i26 = 0, $return$0$off0 = 0, $switch4tmp = 0, $tmp7 = 0, $val$038$ph = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp;
 $x = sp + 24|0;
 $tmp7 = sp + 8|0;
 $1 = HEAP32[2613]|0;
 switch ($1|0) {
 case 2:  {
  $return$0$off0 = 1;
  STACKTOP = sp;return ($return$0$off0|0);
  break;
 }
 case 1:  {
  $return$0$off0 = 0;
  STACKTOP = sp;return ($return$0$off0|0);
  break;
 }
 default: {
  __ZN3std3ffi6os_str85__LT_impl_u20_core__convert__AsRef_LT_std__ffi__os_str__OsStr_GT__u20_for_u20_str_GT_6as_ref17h93b57324fe66b1b3E($0,6103,14);
  $$sreg$field = HEAP32[$0>>2]|0;
  $$sreg$index1 = ((($0)) + 4|0);
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
  __ZN3std3env7_var_os17h64d4b62c0d2396f2E($tmp7,$$sreg$field,$$sreg$field2);
  $2 = HEAP32[$tmp7>>2]|0;
  $switch4tmp = ($2|0)==(0|0);
  do {
   if ($switch4tmp) {
    $val$038$ph = 1;
   } else {
    ;HEAP32[$x>>2]=HEAP32[$tmp7>>2]|0;HEAP32[$x+4>>2]=HEAP32[$tmp7+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$tmp7+8>>2]|0;
    __THREW__ = 0;
    $4 = (invoke_iiii(112,($x|0),(6117|0),1)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     $$ = $4 ? 1 : 2;
     $8 = ((($x)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $not$$i$i$i$i$i$i26 = ($9|0)==(0);
     if ($not$$i$i$i$i$i$i26) {
      $val$038$ph = $$;
      break;
     }
     $10 = HEAP32[$x>>2]|0;
     ___rust_deallocate($10,$9,1);
     $val$038$ph = $$;
     break;
    }
    $3 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    $12 = ((($x)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $not$$i$i$i$i$i$i = ($13|0)==(0);
    if ($not$$i$i$i$i$i$i) {
     ___resumeException($3|0);
     // unreachable;
    }
    $14 = HEAP32[$x>>2]|0;
    ___rust_deallocate($14,$13,1);
    ___resumeException($3|0);
    // unreachable;
   }
  } while(0);
  HEAP32[2613] = $val$038$ph;
  $7 = ($val$038$ph|0)==(2);
  $return$0$off0 = $7;
  STACKTOP = sp;return ($return$0$off0|0);
 }
 }
 return (0)|0;
}
function __ZN3std10sys_common9backtrace6output17hf51ce9950973586dE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$3602$i = 0, $$cast$i$i$i$i = 0, $$lcssa1170 = 0, $$off$i$i = 0, $$off$i1014$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert3095$i = 0, $$phi$trans$insert3097$i = 0, $$phi$trans$insert3099$i = 0, $$phi$trans$insert3101$i = 0, $$phi$trans$insert3103$i = 0, $$phi$trans$insert3105$i = 0, $$phi$trans$insert3107$i = 0, $$phi$trans$insert3109$i = 0, $$phi$trans$insert3111$i = 0, $$phi$trans$insert3113$i = 0, $$phi$trans$insert3115$i = 0, $$phi$trans$insert3117$i = 0, $$phi$trans$insert3119$i = 0, $$phi$trans$insert3121$i = 0;
 var $$phi$trans$insert3123$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i1020$i = 0, $$pre$i1041$i = 0, $$pre$i1099$ptr$i = 0, $$pre$i1207$i = 0, $$pre$i1249$i = 0, $$pre$i1274$i = 0, $$pre$i1299$i = 0, $$pre$i1324$i = 0, $$pre$i1349$i = 0, $$pre$i1374$i = 0, $$pre$i1399$i = 0, $$pre$i1424$i = 0, $$pre$i1449$i = 0, $$pre$i1474$i = 0, $$pre$i1499$i = 0, $$pre$i1524$i = 0;
 var $$pre$i1549$i = 0, $$pre$i1574$i = 0, $$pre$i912$i = 0, $$pre$i938$i = 0, $$pre$phi$i$i$i$i$iZ2D = 0, $$pre$phi$i$i$i$i867$iZ2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i1025$iZ2D = 0, $$pre$phi$i10461790$iZ2D = 0, $$pre$phi$i1212$iZ2D = 0, $$pre$phi$i1429$iZ2D = 0, $$pre$phi$i1454$iZ2D = 0, $$pre$phi$i1479$iZ2D = 0, $$pre$phi$i1504$iZ2D = 0, $$pre$phi$i1529$iZ2D = 0, $$pre$phi$i1554$iZ2D = 0, $$pre$phi$i1579$iZ2D = 0, $$pre$phi$i917$iZ2D = 0, $$pre$phi$i943$iZ2D = 0, $$pre3096$i = 0;
 var $$pre3098$i = 0, $$pre3100$i = 0, $$pre3102$i = 0, $$pre3104$i = 0, $$pre3106$i = 0, $$pre3108$i = 0, $$pre3110$i = 0, $$pre3112$i = 0, $$pre3114$i = 0, $$pre3116$i = 0, $$pre3118$i = 0, $$pre3120$i = 0, $$pre3122$i = 0, $$pre3124$i = 0, $$ptr$i = 0, $$sink$i$index = 0, $$sink$i$index2 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $accum$0$lcssa$i$i$i = 0, $accum$010$i$i$i = 0, $addr = 0;
 var $cond$i103 = 0, $err10$sroa$0$0$$sroa_idx438$i = 0, $err11$sroa$0$0$$sroa_idx429$i = 0, $err12$sroa$0$0$$sroa_idx420$i = 0, $err13$sroa$0$0$$sroa_idx411$i = 0, $err14$sroa$0$0$$sroa_idx402$i = 0, $err15$sroa$0$0$$sroa_idx393$i = 0, $err16$sroa$0$0$$sroa_idx384$i = 0, $err17$sroa$0$0$$sroa_idx375$i = 0, $err18$sroa$0$0$$sroa_idx366$i = 0, $err19$sroa$0$0$$sroa_idx357$i = 0, $err20$sroa$0$0$$sroa_idx348$i = 0, $err21$sroa$0$0$$sroa_idx339$i = 0, $err22$sroa$0$0$$sroa_idx330$i = 0, $err4$sroa$0$0$$sroa_idx492$i = 0, $err5$sroa$0$0$$sroa_idx483$i = 0, $err6$sroa$0$0$$sroa_idx474$i = 0, $err7$sroa$0$0$$sroa_idx465$i = 0, $err8$sroa$0$0$$sroa_idx456$i = 0, $err9$sroa$0$0$$sroa_idx447$i = 0;
 var $first$0$off02537$i = 0, $i$0$lcssa$i = 0, $i$02540$i = 0, $idx = 0, $idx$0$i = 0, $inner$sroa$0$1$i = 0, $inner$sroa$0$22538$i = 0, $inner$sroa$12$1$i = 0, $inner$sroa$12$1$in$i = 0, $inner$sroa$12$22539$i = 0, $iter$sroa$4$09$i$i$i = 0, $not$$i$i$i = 0, $not$$i$i$i$i1004$i = 0, $not$$i$i$i$i1057$i = 0, $not$$i$i$i$i1147$i = 0, $not$$i$i$i$i1198$i = 0, $not$$i$i$i$i1408$i = 0, $not$$i$i$i$i1433$i = 0, $not$$i$i$i$i1458$i = 0, $not$$i$i$i$i1483$i = 0;
 var $not$$i$i$i$i1508$i = 0, $not$$i$i$i$i1533$i = 0, $not$$i$i$i$i1558$i = 0, $not$$i$i$i$i1583$i = 0, $not$$i$i1022$i = 0, $not$$i$i1030$i = 0, $not$$i$i1043$i = 0, $not$$i$i1209$i = 0, $not$$i$i1426$i = 0, $not$$i$i1451$i = 0, $not$$i$i1476$i = 0, $not$$i$i1501$i = 0, $not$$i$i1526$i = 0, $not$$i$i1551$i = 0, $not$$i$i1576$i = 0, $not$$i$i896$i = 0, $not$$i$i914$i = 0, $not$$i$i940$i = 0, $or$cond = 0, $or$cond$i$i1029$i = 0;
 var $or$cond$i$i1040$i = 0, $or$cond$i$i895$i = 0, $or$cond$i$i929$i = 0, $or$cond14$i$i$i = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i1114$i = 0, $phitmp$i$i986$i = 0, $phitmp32$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i = 0, $phitmp32$i$i1119$i = 0, $phitmp32$i$i991$i = 0, $phitmp33$i$i$i$i = 0, $phitmp33$i$i$i$i$i$i = 0, $phitmp33$i$i1124$i = 0, $phitmp33$i$i996$i = 0, $rest$sroa$0$02450$i = 0, $rest$sroa$0$1$be$i = 0, $rest$sroa$0$12460$i = 0, $rest$sroa$82$02451$i = 0;
 var $rest$sroa$82$02451$lcssa2601$i = 0, $rest$sroa$82$1$be$i = 0, $rest$sroa$82$12497$i = 0, $return$0$i10$i$i$i$i = 0, $return$0$i10$i$i$i$i$i$i = 0, $return$0$i10$i$i1126$i = 0, $return$0$i10$i$i998$i = 0, $return$0$i16$i$i$i$i = 0, $return$0$i16$i$i$i$i$i$i = 0, $return$0$i16$i$i1121$i = 0, $return$0$i16$i$i993$i = 0, $return$0$i23$i$i$i$i = 0, $return$0$i23$i$i$i$i$i$i = 0, $return$0$i23$i$i1116$i = 0, $return$0$i23$i$i988$i = 0, $rhsc$i$i$i$i = 0, $rhsc$i$i$i869$i = 0, $rhsc1867$i = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$0$0$copyload$i = 0;
 var $self$i$sroa$4$0$$sroa_idx1750$i = 0, $self$i$sroa$4$0$$sroa_idx187 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$4$0$copyload$i = 0, $self$i$sroa$5$0$$sroa_idx1752$i = 0, $self$i$sroa$5$0$$sroa_idx189 = 0, $self$i$sroa$5$0$copyload = 0, $self$i$sroa$5$0$copyload$i = 0, $self$i1140$sroa$0$0$copyload$i = 0, $self$i1140$sroa$4$0$$sroa_idx1765$i = 0, $self$i1140$sroa$4$0$copyload$i = 0, $self$i1140$sroa$5$0$$sroa_idx1767$i = 0, $self$i1140$sroa$5$0$copyload$i = 0, $self$i1155$sroa$0$0$copyload$i = 0, $self$i1155$sroa$4$0$$sroa_idx1770$i = 0, $self$i1155$sroa$4$0$copyload$i = 0, $self$i1155$sroa$5$0$$sroa_idx1772$i = 0, $self$i1155$sroa$5$0$copyload$i = 0, $self$i930$sroa$0$0$copyload$i = 0, $self$i930$sroa$4$0$$sroa_idx1755$i = 0;
 var $self$i930$sroa$4$0$copyload$i = 0, $self$i930$sroa$5$0$$sroa_idx1757$i = 0, $self$i930$sroa$5$0$copyload$i = 0, $self$i96$sroa$0$0$copyload = 0, $self$i96$sroa$4$0$$sroa_idx192 = 0, $self$i96$sroa$4$0$copyload = 0, $self$i96$sroa$5$0$$sroa_idx194 = 0, $self$i96$sroa$5$0$copyload = 0, $self$i964$sroa$0$0$copyload$i = 0, $self$i964$sroa$4$0$$sroa_idx1760$i = 0, $self$i964$sroa$4$0$copyload$i = 0, $self$i964$sroa$5$0$$sroa_idx1762$i = 0, $self$i964$sroa$5$0$copyload$i = 0, $self$sroa$0$0$copyload$i$i$i = 0, $self$sroa$0$0$copyload$i1036$i = 0, $self$sroa$5$0$copyload8$i$i$i = 0, $self$sroa$6$0$$sroa_idx6$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i = 0, $self$sroa$719$0$$sroa_idx20$i$i = 0, $self$sroa$719$0$copyload$i$i = 0;
 var $switch1$i$i$i = 0, $switch109$i = 0, $switch110$i = 0, $switch111$i = 0, $switch112$i = 0, $switch113$i = 0, $switch114$i = 0, $switch115$i = 0, $switch116$i = 0, $switch117$i = 0, $switch118$i = 0, $switch119$i = 0, $switch120$i = 0, $switch121$i = 0, $switch122$i = 0, $switch123$i = 0, $switch124$i = 0, $switch125$i = 0, $switch126$i = 0, $switch127$i = 0;
 var $switch13tmp = 0, $switch2$i1037$i = 0, $switch2tmp$i = 0, $switch3$i = 0, $switch3$i$i = 0, $switch3$i1141$i = 0, $switch3$i1156$i = 0, $switch3$i931$i = 0, $switch3$i965$i = 0, $switch3$i97 = 0, $tmp0$i$i = 0, $tmp0$sroa$0$0$$sroa_idx2$i = 0, $tmp0$sroa$0$0$$sroa_idx2$i76 = 0, $tmp0$sroa$0$0$$sroa_idx2$i93 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp1$sroa$0$0$$sroa_idx$i95 = 0, $tmp1$sroa$4$0$$sroa_idx2$i = 0, $tmp113$sroa$4$2$ph$i = 0, $tmp122$i = 0, $tmp157$sroa$5$2$ph$i = 0;
 var $tmp167$i = 0, $tmp184$i = 0, $tmp2 = 0, $tmp204$i = 0, $tmp223$i = 0, $tmp242$i = 0, $tmp261$i = 0, $tmp280$i = 0, $tmp299$i = 0, $tmp318$i = 0, $tmp337$i = 0, $tmp35$sroa$29$0$ph$off0 = 0, $tmp35$sroa$29$0$ph$off32 = 0, $tmp356$i = 0, $tmp375$i = 0, $tmp394$i = 0, $tmp4 = 0, $tmp413$i = 0, $tmp432$i = 0, $tmp45 = 0;
 var $tmp45$sroa$5$2$ph$i = 0, $tmp451$i = 0, $tmp47 = 0, $tmp470$i = 0, $tmp489$i = 0, $tmp508$i = 0, $tmp527$i = 0, $tmp544$i = 0, $tmp557$sroa$0$0$i = 0, $tmp564$i = 0, $tmp81$i = 0, $tmp9 = 0, $tmp99$i = 0, $tmp_ret4 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $tmp81$i = sp + 504|0;
 $tmp99$i = sp + 488|0;
 $tmp122$i = sp + 480|0;
 $tmp167$i = sp + 464|0;
 $tmp184$i = sp + 448|0;
 $tmp204$i = sp + 432|0;
 $tmp223$i = sp + 416|0;
 $tmp242$i = sp + 400|0;
 $tmp261$i = sp + 384|0;
 $tmp280$i = sp + 368|0;
 $tmp299$i = sp + 352|0;
 $tmp318$i = sp + 336|0;
 $tmp337$i = sp + 320|0;
 $tmp356$i = sp + 304|0;
 $tmp375$i = sp + 288|0;
 $tmp394$i = sp + 272|0;
 $tmp413$i = sp + 256|0;
 $tmp432$i = sp + 240|0;
 $tmp451$i = sp + 224|0;
 $tmp470$i = sp + 208|0;
 $tmp489$i = sp + 192|0;
 $tmp508$i = sp + 176|0;
 $tmp527$i = sp + 160|0;
 $tmp544$i = sp + 144|0;
 $tmp564$i = sp + 128|0;
 $tmp0$i$i = sp + 112|0;
 $idx = sp + 520|0;
 $addr = sp + 516|0;
 $tmp2 = sp + 96|0;
 $tmp4 = sp + 72|0;
 $tmp9 = sp + 48|0;
 $tmp45 = sp + 32|0;
 $tmp47 = sp + 8|0;
 $tmp_ret4 = sp;
 HEAP32[$idx>>2] = $3;
 HEAP32[$addr>>2] = $4;
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $idx;
 $13 = $addr;
 __ZN4core3fmt10ArgumentV110from_usize17h4f3bf7c380951ebeE($tmp_ret4,2432);
 $14 = ((($tmp_ret4)) + 4|0);
 $15 = HEAP32[$tmp_ret4>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$tmp9>>2] = $12;
 $17 = ((($tmp9)) + 4|0);
 HEAP32[$17>>2] = (113);
 $18 = ((($tmp9)) + 8|0);
 HEAP32[$18>>2] = $13;
 $19 = ((($tmp9)) + 12|0);
 HEAP32[$19>>2] = (114);
 $20 = ((($tmp9)) + 16|0);
 HEAP32[$20>>2] = $15;
 $21 = ((($tmp9)) + 20|0);
 HEAP32[$21>>2] = $16;
 HEAP32[$tmp4>>2] = 2436;
 $22 = ((($tmp4)) + 4|0);
 HEAP32[$22>>2] = 3;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp4)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 2460;
 $tmp1$sroa$4$0$$sroa_idx2$i = ((($tmp4)) + 12|0);
 HEAP32[$tmp1$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $23 = ((($tmp4)) + 16|0);
 HEAP32[$23>>2] = $tmp9;
 $24 = ((($tmp4)) + 20|0);
 HEAP32[$24>>2] = 3;
 $25 = ((($2)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viii[$26 & 255]($tmp2,$1,$tmp4);
 $self$i$sroa$0$0$copyload = HEAP32[$tmp2>>2]|0;
 $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
 L1: do {
  if ($switch3$i) {
   $self$i$sroa$5$0$$sroa_idx189 = ((($tmp2)) + 8|0);
   $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx189>>2]|0;
   $self$i$sroa$4$0$$sroa_idx187 = ((($tmp2)) + 4|0);
   $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx187>>2]|0;
   HEAP32[$0>>2] = 1;
   $tmp0$sroa$0$0$$sroa_idx2$i93 = ((($0)) + 4|0);
   $27 = $tmp0$sroa$0$0$$sroa_idx2$i93;
   $28 = $27;
   HEAP32[$28>>2] = $self$i$sroa$4$0$copyload;
   $29 = (($27) + 4)|0;
   $30 = $29;
   HEAP32[$30>>2] = $self$i$sroa$5$0$copyload;
  } else {
   $switch2tmp$i = ($8|0)==(0);
   L4: do {
    if ($switch2tmp$i) {
     label = 8;
    } else {
     $31 = $8;
     __ZN4core3str9from_utf817h62275e07c46015c9E($tmp0$i$i,$31,$11);
     $self$sroa$0$0$copyload$i$i$i = HEAP32[$tmp0$i$i>>2]|0;
     $switch1$i$i$i = ($self$sroa$0$0$copyload$i$i$i|0)==(0);
     $self$sroa$6$0$$sroa_idx6$i$i$i = ((($tmp0$i$i)) + 8|0);
     $self$sroa$6$0$copyload$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx6$i$i$i>>2]|0;
     $32 = ((($tmp0$i$i)) + 4|0);
     $self$sroa$5$0$copyload8$i$i$i = HEAP32[$32>>2]|0;
     if ($switch1$i$i$i) {
      $33 = $self$sroa$5$0$copyload8$i$i$i;
      $switch13tmp = ($self$sroa$5$0$copyload8$i$i$i|0)==(0);
      if ($switch13tmp) {
       label = 8;
      } else {
       $38 = ($self$sroa$6$0$copyload$i$i$i>>>0)>(4);
       do {
        if ($38) {
         $46 = ((($33)) + 3|0);
         $47 = HEAP8[$46>>0]|0;
         $48 = ($47<<24>>24)>(-65);
         if ($48) {
          $49 = ($33|0)==(6119|0);
          if (!($49)) {
           $50 = (_memcmp(6119,$33,3)|0);
           $51 = ($50|0)==(0);
           if (!($51)) {
            label = 25;
            break;
           }
          }
          $41 = (($self$sroa$6$0$copyload$i$i$i) + -1)|0;
          $42 = ($41|0)==(0);
          if ($42) {
           $$pre$phi$i$i$i$i$iZ2D = $33;
          } else {
           $43 = (($33) + ($41)|0);
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)>(-65);
           if ($45) {
            $$pre$phi$i$i$i$i$iZ2D = $43;
           } else {
            label = 25;
            break;
           }
          }
          $39 = ($$pre$phi$i$i$i$i$iZ2D|0)==(6118|0);
          if (!($39)) {
           $rhsc$i$i$i$i = HEAP8[$$pre$phi$i$i$i$i$iZ2D>>0]|0;
           $40 = ($rhsc$i$i$i$i<<24>>24)==(69);
           if (!($40)) {
            label = 25;
            break;
           }
          }
          $52 = ($41>>>0)<(3);
          if ($52) {
           __ZN4core3str16slice_error_fail17hec153863008515e9E($33,$self$sroa$6$0$copyload$i$i$i,3,$41);
           // unreachable;
          }
          $53 = (($33) + ($41)|0);
          $54 = HEAP8[$53>>0]|0;
          $55 = ($54<<24>>24)>(-65);
          if ($55) {
           $inner$sroa$0$1$i = $46;$inner$sroa$12$1$in$i = $41;
           label = 30;
          } else {
           __ZN4core3str16slice_error_fail17hec153863008515e9E($33,$self$sroa$6$0$copyload$i$i$i,3,$41);
           // unreachable;
          }
         } else {
          label = 25;
         }
        } else {
         $56 = ($self$sroa$6$0$copyload$i$i$i|0)==(4);
         if ($56) {
          label = 25;
         } else {
          label = 59;
         }
        }
       } while(0);
       do {
        if ((label|0) == 25) {
         $64 = ((($33)) + 2|0);
         $65 = HEAP8[$64>>0]|0;
         $66 = ($65<<24>>24)>(-65);
         if ($66) {
          $67 = ($33|0)==(6122|0);
          if (!($67)) {
           $68 = (_memcmp(6122,$33,2)|0);
           $69 = ($68|0)==(0);
           if (!($69)) {
            label = 59;
            break;
           }
          }
          $59 = (($self$sroa$6$0$copyload$i$i$i) + -1)|0;
          $60 = ($59|0)==(0);
          if ($60) {
           $$pre$phi$i$i$i$i867$iZ2D = $33;
          } else {
           $61 = (($33) + ($59)|0);
           $62 = HEAP8[$61>>0]|0;
           $63 = ($62<<24>>24)>(-65);
           if ($63) {
            $$pre$phi$i$i$i$i867$iZ2D = $61;
           } else {
            label = 59;
            break;
           }
          }
          $57 = ($$pre$phi$i$i$i$i867$iZ2D|0)==(6118|0);
          if (!($57)) {
           $rhsc$i$i$i869$i = HEAP8[$$pre$phi$i$i$i$i867$iZ2D>>0]|0;
           $58 = ($rhsc$i$i$i869$i<<24>>24)==(69);
           if (!($58)) {
            label = 59;
            break;
           }
          }
          $70 = (($33) + ($59)|0);
          $71 = HEAP8[$70>>0]|0;
          $72 = ($71<<24>>24)>(-65);
          if ($72) {
           $inner$sroa$0$1$i = $64;$inner$sroa$12$1$in$i = $self$sroa$6$0$copyload$i$i$i;
           label = 30;
          } else {
           __ZN4core3str16slice_error_fail17hec153863008515e9E($33,$self$sroa$6$0$copyload$i$i$i,2,$59);
           // unreachable;
          }
         } else {
          label = 59;
         }
        }
       } while(0);
       L38: do {
        if ((label|0) == 30) {
         $inner$sroa$12$1$i = (($inner$sroa$12$1$in$i) + -3)|0;
         $73 = (($inner$sroa$0$1$i) + ($inner$sroa$12$1$i)|0);
         $74 = $inner$sroa$0$1$i;
         while(1) {
          $75 = ($74|0)==($73|0);
          if ($75) {
           $119 = $74;
           break;
          } else {
           $79 = $74;$i$02540$i = 0;
          }
          while(1) {
           $78 = ((($79)) + 1|0);
           $77 = HEAP8[$79>>0]|0;
           $80 = ($77<<24>>24)>(-1);
           if ($80) {
            $76 = $77&255;
            $116 = $78;$tmp45$sroa$5$2$ph$i = $76;
           } else {
            $81 = $77 & 31;
            $82 = $81&255;
            $83 = ($78|0)==($73|0);
            if ($83) {
             $90 = $73;$return$0$i23$i$i$i$i = 0;
            } else {
             $84 = ((($79)) + 2|0);
             $85 = HEAP8[$78>>0]|0;
             $phitmp$i$i$i$i = $85 & 63;
             $90 = $84;$return$0$i23$i$i$i$i = $phitmp$i$i$i$i;
            }
            $86 = $82 << 6;
            $87 = $return$0$i23$i$i$i$i&255;
            $88 = $87 | $86;
            $89 = ($77&255)>(223);
            if ($89) {
             $91 = ($90|0)==($73|0);
             if ($91) {
              $100 = $73;$return$0$i16$i$i$i$i = 0;
             } else {
              $92 = ((($90)) + 1|0);
              $93 = HEAP8[$90>>0]|0;
              $phitmp32$i$i$i$i = $93 & 63;
              $100 = $92;$return$0$i16$i$i$i$i = $phitmp32$i$i$i$i;
             }
             $94 = $87 << 6;
             $95 = $return$0$i16$i$i$i$i&255;
             $96 = $95 | $94;
             $97 = $82 << 12;
             $98 = $96 | $97;
             $99 = ($77&255)>(239);
             if ($99) {
              $101 = ($100|0)==($73|0);
              if ($101) {
               $628 = $100;$return$0$i10$i$i$i$i = 0;
              } else {
               $102 = ((($100)) + 1|0);
               $103 = HEAP8[$100>>0]|0;
               $phitmp33$i$i$i$i = $103 & 63;
               $628 = $102;$return$0$i10$i$i$i$i = $phitmp33$i$i$i$i;
              }
              $104 = $82 << 18;
              $105 = $104 & 1835008;
              $106 = $96 << 6;
              $107 = $return$0$i10$i$i$i$i&255;
              $108 = $106 | $105;
              $109 = $108 | $107;
              $116 = $628;$tmp45$sroa$5$2$ph$i = $109;
             } else {
              $116 = $100;$tmp45$sroa$5$2$ph$i = $98;
             }
            } else {
             $116 = $90;$tmp45$sroa$5$2$ph$i = $88;
            }
           }
           $$off$i$i = (($tmp45$sroa$5$2$ph$i) + -48)|0;
           $110 = ($$off$i$i>>>0)<(10);
           if (!($110)) {
            $111 = ($tmp45$sroa$5$2$ph$i>>>0)>(127);
            if (!($111)) {
             $$lcssa1170 = $116;$i$0$lcssa$i = $i$02540$i;
             break;
            }
            $112 = (__ZN13rustc_unicode6tables16general_category1N17hf27987311eaaad53E($tmp45$sroa$5$2$ph$i)|0);
            if (!($112)) {
             $$lcssa1170 = $116;$i$0$lcssa$i = $i$02540$i;
             break;
            }
           }
           $113 = ($i$02540$i*10)|0;
           $114 = (($113) + -48)|0;
           $115 = (($114) + ($tmp45$sroa$5$2$ph$i))|0;
           $117 = ($116|0)==($73|0);
           if ($117) {
            $$lcssa1170 = $73;$i$0$lcssa$i = $115;
            break;
           } else {
            $79 = $116;$i$02540$i = $115;
           }
          }
          $118 = ($i$0$lcssa$i|0)==(0);
          if ($118) {
           $119 = $$lcssa1170;
           break;
          }
          $121 = (($i$0$lcssa$i) + -1)|0;
          $122 = ($121|0)==(0);
          L65: do {
           if ($122) {
            $629 = $$lcssa1170;$accum$0$lcssa$i$i$i = 0;
           } else {
            $124 = $$lcssa1170;$accum$010$i$i$i = 0;$iter$sroa$4$09$i$i$i = $121;
            while(1) {
             $123 = (($iter$sroa$4$09$i$i$i) + -1)|0;
             $125 = ($124|0)==($73|0);
             if ($125) {
              $629 = $73;$accum$0$lcssa$i$i$i = $accum$010$i$i$i;
              break L65;
             }
             $126 = ((($124)) + 1|0);
             $127 = HEAP8[$124>>0]|0;
             $128 = ($127<<24>>24)>(-1);
             if ($128) {
              $630 = $126;
             } else {
              $129 = ($126|0)==($73|0);
              if ($129) {
               $630 = $73;
              } else {
               $130 = ((($124)) + 2|0);
               $131 = ($127&255)<(224);
               $132 = ($130|0)==($73|0);
               $or$cond14$i$i$i = $132 | $131;
               if ($or$cond14$i$i$i) {
                $630 = $130;
               } else {
                $133 = ((($124)) + 3|0);
                $134 = ($127&255)<(240);
                $135 = ($133|0)==($73|0);
                $or$cond$i$i929$i = $135 | $134;
                $136 = ((($124)) + 4|0);
                $$3602$i = $or$cond$i$i929$i ? $133 : $136;
                $630 = $$3602$i;
               }
              }
             }
             $137 = (($accum$010$i$i$i) + 1)|0;
             $138 = ($123|0)==(0);
             if ($138) {
              $629 = $630;$accum$0$lcssa$i$i$i = $137;
              break;
             } else {
              $124 = $630;$accum$010$i$i$i = $137;$iter$sroa$4$09$i$i$i = $123;
             }
            }
           }
          } while(0);
          $139 = ($accum$0$lcssa$i$i$i|0)==($121|0);
          if ($139) {
           $74 = $629;
          } else {
           label = 59;
           break L38;
          }
         }
         $120 = ($119|0)==($73|0);
         if ($120) {
          $140 = ($inner$sroa$12$1$i|0)==(0);
          if ($140) {
           break L4;
          }
          $141 = ((($2)) + 20|0);
          $self$sroa$719$0$$sroa_idx20$i$i = ((($tmp122$i)) + 4|0);
          $first$0$off02537$i = 1;$inner$sroa$0$22538$i = $inner$sroa$0$1$i;$inner$sroa$12$22539$i = $inner$sroa$12$1$i;
          L78: while(1) {
           if (!($first$0$off02537$i)) {
            $144 = HEAP32[$141>>2]|0;
            FUNCTION_TABLE_viiii[$144 & 255]($tmp99$i,$1,6124,2);
            $self$i964$sroa$0$0$copyload$i = HEAP32[$tmp99$i>>2]|0;
            $switch3$i965$i = ($self$i964$sroa$0$0$copyload$i|0)==(1);
            if ($switch3$i965$i) {
             label = 64;
             break;
            }
           }
           $145 = (($inner$sroa$0$22538$i) + ($inner$sroa$12$22539$i)|0);
           $$pre = HEAP8[$inner$sroa$0$22538$i>>0]|0;
           $147 = $$pre;$161 = $145;$rest$sroa$0$02450$i = $inner$sroa$0$22538$i;$rest$sroa$82$02451$i = $inner$sroa$12$22539$i;
           while(1) {
            $148 = ((($rest$sroa$0$02450$i)) + 1|0);
            $149 = ($147<<24>>24)>(-1);
            if ($149) {
             $146 = $147&255;
             $tmp113$sroa$4$2$ph$i = $146;
            } else {
             $150 = $147 & 31;
             $151 = $150&255;
             $152 = ($rest$sroa$82$02451$i|0)==(1);
             if ($152) {
              $159 = $161;$return$0$i23$i$i988$i = 0;
             } else {
              $153 = ((($rest$sroa$0$02450$i)) + 2|0);
              $154 = HEAP8[$148>>0]|0;
              $phitmp$i$i986$i = $154 & 63;
              $159 = $153;$return$0$i23$i$i988$i = $phitmp$i$i986$i;
             }
             $155 = $151 << 6;
             $156 = $return$0$i23$i$i988$i&255;
             $157 = $156 | $155;
             $158 = ($147&255)>(223);
             if ($158) {
              $160 = ($159|0)==($161|0);
              if ($160) {
               $170 = $161;$return$0$i16$i$i993$i = 0;
              } else {
               $162 = ((($159)) + 1|0);
               $163 = HEAP8[$159>>0]|0;
               $phitmp32$i$i991$i = $163 & 63;
               $170 = $162;$return$0$i16$i$i993$i = $phitmp32$i$i991$i;
              }
              $164 = $156 << 6;
              $165 = $return$0$i16$i$i993$i&255;
              $166 = $165 | $164;
              $167 = $151 << 12;
              $168 = $166 | $167;
              $169 = ($147&255)>(239);
              if ($169) {
               $171 = ($170|0)==($161|0);
               if ($171) {
                $return$0$i10$i$i998$i = 0;
               } else {
                $172 = HEAP8[$170>>0]|0;
                $phitmp33$i$i996$i = $172 & 63;
                $return$0$i10$i$i998$i = $phitmp33$i$i996$i;
               }
               $173 = $151 << 18;
               $174 = $173 & 1835008;
               $175 = $166 << 6;
               $176 = $return$0$i10$i$i998$i&255;
               $177 = $175 | $174;
               $178 = $177 | $176;
               $tmp113$sroa$4$2$ph$i = $178;
              } else {
               $tmp113$sroa$4$2$ph$i = $168;
              }
             } else {
              $tmp113$sroa$4$2$ph$i = $157;
             }
            }
            $$off$i1014$i = (($tmp113$sroa$4$2$ph$i) + -48)|0;
            $179 = ($$off$i1014$i>>>0)<(10);
            if (!($179)) {
             $180 = ($tmp113$sroa$4$2$ph$i>>>0)>(127);
             if (!($180)) {
              break;
             }
             $181 = (__ZN13rustc_unicode6tables16general_category1N17hf27987311eaaad53E($tmp113$sroa$4$2$ph$i)|0);
             if (!($181)) {
              break;
             }
            }
            switch ($rest$sroa$82$02451$i|0) {
            case 1:  {
             label = 78;
             break L78;
             break;
            }
            case 0:  {
             $rest$sroa$82$02451$lcssa2601$i = 0;
             label = 100;
             break L78;
             break;
            }
            default: {
            }
            }
            $204 = HEAP8[$148>>0]|0;
            $205 = ($204<<24>>24)>(-65);
            if (!($205)) {
             $rest$sroa$82$02451$lcssa2601$i = $rest$sroa$82$02451$i;
             label = 100;
             break L78;
            }
            $206 = (($rest$sroa$82$02451$i) + -1)|0;
            $207 = (($148) + ($206)|0);
            $208 = ($206|0)==(0);
            if ($208) {
             label = 78;
             break L78;
            } else {
             $147 = $204;$161 = $207;$rest$sroa$0$02450$i = $148;$rest$sroa$82$02451$i = $206;
            }
           }
           $182 = (($inner$sroa$12$22539$i) - ($rest$sroa$82$02451$i))|0;
           $183 = ($182|0)==(0);
           $184 = ($rest$sroa$82$02451$i|0)==(0);
           $or$cond$i$i1029$i = $184 | $183;
           if (!($or$cond$i$i1029$i)) {
            $not$$i$i1030$i = ($inner$sroa$12$22539$i>>>0)>($182>>>0);
            if (!($not$$i$i1030$i)) {
             label = 85;
             break;
            }
            $185 = (($inner$sroa$0$22538$i) + ($182)|0);
            $186 = HEAP8[$185>>0]|0;
            $187 = ($186<<24>>24)>(-65);
            if (!($187)) {
             label = 85;
             break;
            }
           }
           __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h065946980d4d2521E($tmp122$i,$inner$sroa$0$22538$i,$182);
           $self$sroa$0$0$copyload$i1036$i = HEAP16[$tmp122$i>>1]|0;
           $188 = $self$sroa$0$0$copyload$i1036$i&255;
           $switch2$i1037$i = ($188<<24>>24)==(0);
           if (!($switch2$i1037$i)) {
            label = 87;
            break;
           }
           $self$sroa$719$0$copyload$i$i = HEAP32[$self$sroa$719$0$$sroa_idx20$i$i>>2]|0;
           $191 = ($self$sroa$719$0$copyload$i$i|0)==(0);
           $192 = ($rest$sroa$82$02451$i|0)==($self$sroa$719$0$copyload$i$i|0);
           $or$cond$i$i1040$i = $191 | $192;
           if ($or$cond$i$i1040$i) {
            $$pre$i1041$i = (($rest$sroa$0$02450$i) + ($self$sroa$719$0$copyload$i$i)|0);
            $$pre$phi$i10461790$iZ2D = $$pre$i1041$i;
           } else {
            $not$$i$i1043$i = ($rest$sroa$82$02451$i>>>0)>($self$sroa$719$0$copyload$i$i>>>0);
            if (!($not$$i$i1043$i)) {
             label = 92;
             break;
            }
            $193 = (($rest$sroa$0$02450$i) + ($self$sroa$719$0$copyload$i$i)|0);
            $194 = HEAP8[$193>>0]|0;
            $195 = ($194<<24>>24)>(-65);
            if ($195) {
             $$pre$phi$i10461790$iZ2D = $193;
            } else {
             label = 92;
             break;
            }
           }
           $196 = (($rest$sroa$82$02451$i) - ($self$sroa$719$0$copyload$i$i))|0;
           $197 = ($self$sroa$719$0$copyload$i$i|0)==(2);
           do {
            if ($197) {
             label = 96;
            } else {
             $not$$i$i$i$i1057$i = ($self$sroa$719$0$copyload$i$i>>>0)>(2);
             if ($not$$i$i$i$i1057$i) {
              $198 = ((($rest$sroa$0$02450$i)) + 2|0);
              $199 = HEAP8[$198>>0]|0;
              $200 = ($199<<24>>24)>(-65);
              if ($200) {
               label = 96;
               break;
              } else {
               $rest$sroa$0$12460$i = $rest$sroa$0$02450$i;$rest$sroa$82$12497$i = $self$sroa$719$0$copyload$i$i;
               label = 106;
               break;
              }
             } else {
              if ($191) {
               break;
              } else {
               $rest$sroa$0$12460$i = $rest$sroa$0$02450$i;$rest$sroa$82$12497$i = 1;
               label = 106;
               break;
              }
             }
            }
           } while(0);
           do {
            if ((label|0) == 96) {
             label = 0;
             $201 = ($rest$sroa$0$02450$i|0)==(6126|0);
             if (!($201)) {
              $202 = (_memcmp(6126,$rest$sroa$0$02450$i,2)|0);
              $203 = ($202|0)==(0);
              if (!($203)) {
               $rest$sroa$0$12460$i = $rest$sroa$0$02450$i;$rest$sroa$82$12497$i = $self$sroa$719$0$copyload$i$i;
               label = 106;
               break;
              }
             }
             $209 = HEAP8[$148>>0]|0;
             $210 = ($209<<24>>24)>(-65);
             if (!($210)) {
              label = 103;
              break L78;
             }
             $211 = (($self$sroa$719$0$copyload$i$i) + -1)|0;
             $rest$sroa$0$12460$i = $148;$rest$sroa$82$12497$i = $211;
             label = 106;
            }
           } while(0);
           L129: do {
            if ((label|0) == 106) {
             L130: while(1) {
              label = 0;
              $212 = ($rest$sroa$82$12497$i|0)==(1);
              if ($212) {
               label = 108;
              } else {
               $213 = ((($rest$sroa$0$12460$i)) + 1|0);
               $214 = HEAP8[$213>>0]|0;
               $215 = ($214<<24>>24)>(-65);
               if ($215) {
                label = 108;
               } else {
                label = 147;
               }
              }
              L134: do {
               if ((label|0) == 108) {
                label = 0;
                $216 = ($rest$sroa$0$12460$i|0)==(6102|0);
                do {
                 if (!($216)) {
                  $rhsc1867$i = HEAP8[$rest$sroa$0$12460$i>>0]|0;
                  $217 = ($rhsc1867$i<<24>>24)==(46);
                  if ($217) {
                   break;
                  }
                  if (!($212)) {
                   $$phi$trans$insert$i = ((($rest$sroa$0$12460$i)) + 1|0);
                   $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
                   $253 = ($$pre$i<<24>>24)>(-65);
                   if (!($253)) {
                    label = 147;
                    break L134;
                   }
                  }
                  $254 = ($rest$sroa$0$12460$i|0)==(6128|0);
                  $255 = ($rhsc1867$i<<24>>24)==(36);
                  $or$cond = $254 | $255;
                  if (!($or$cond)) {
                   label = 147;
                   break L134;
                  }
                  $264 = ($rest$sroa$82$12497$i|0)==(4);
                  do {
                   if ($264) {
                    label = 145;
                   } else {
                    $not$$i$i$i$i1198$i = ($rest$sroa$82$12497$i>>>0)>(4);
                    if ($not$$i$i$i$i1198$i) {
                     $265 = ((($rest$sroa$0$12460$i)) + 4|0);
                     $266 = HEAP8[$265>>0]|0;
                     $267 = ($266<<24>>24)>(-65);
                     if ($267) {
                      label = 145;
                      break;
                     } else {
                      label = 223;
                      break;
                     }
                    } else {
                     $407 = ($rest$sroa$82$12497$i|0)==(3);
                     if ($407) {
                      $635 = 1;
                      label = 224;
                      break;
                     } else {
                      break L130;
                     }
                    }
                   }
                  } while(0);
                  L148: do {
                   if ((label|0) == 145) {
                    label = 0;
                    $268 = ($rest$sroa$0$12460$i|0)==(6129|0);
                    do {
                     if (!($268)) {
                      $269 = (_memcmp(6129,$rest$sroa$0$12460$i,4)|0);
                      $270 = ($269|0)==(0);
                      if ($270) {
                       break;
                      }
                      if (!($264)) {
                       $$phi$trans$insert3095$i = ((($rest$sroa$0$12460$i)) + 4|0);
                       $$pre3096$i = HEAP8[$$phi$trans$insert3095$i>>0]|0;
                       $317 = ($$pre3096$i<<24>>24)>(-65);
                       if (!($317)) {
                        label = 223;
                        break L148;
                       }
                      }
                      $318 = ($rest$sroa$0$12460$i|0)==(6134|0);
                      do {
                       if (!($318)) {
                        $319 = (_memcmp(6134,$rest$sroa$0$12460$i,4)|0);
                        $320 = ($319|0)==(0);
                        if ($320) {
                         break;
                        }
                        if (!($264)) {
                         $$phi$trans$insert3097$i = ((($rest$sroa$0$12460$i)) + 4|0);
                         $$pre3098$i = HEAP8[$$phi$trans$insert3097$i>>0]|0;
                         $332 = ($$pre3098$i<<24>>24)>(-65);
                         if (!($332)) {
                          label = 223;
                          break L148;
                         }
                        }
                        $333 = ($rest$sroa$0$12460$i|0)==(6139|0);
                        do {
                         if (!($333)) {
                          $334 = (_memcmp(6139,$rest$sroa$0$12460$i,4)|0);
                          $335 = ($334|0)==(0);
                          if ($335) {
                           break;
                          }
                          if (!($264)) {
                           $$phi$trans$insert3099$i = ((($rest$sroa$0$12460$i)) + 4|0);
                           $$pre3100$i = HEAP8[$$phi$trans$insert3099$i>>0]|0;
                           $347 = ($$pre3100$i<<24>>24)>(-65);
                           if (!($347)) {
                            label = 223;
                            break L148;
                           }
                          }
                          $348 = ($rest$sroa$0$12460$i|0)==(6144|0);
                          do {
                           if (!($348)) {
                            $349 = (_memcmp(6144,$rest$sroa$0$12460$i,4)|0);
                            $350 = ($349|0)==(0);
                            if ($350) {
                             break;
                            }
                            if (!($264)) {
                             $$phi$trans$insert3101$i = ((($rest$sroa$0$12460$i)) + 4|0);
                             $$pre3102$i = HEAP8[$$phi$trans$insert3101$i>>0]|0;
                             $362 = ($$pre3102$i<<24>>24)>(-65);
                             if (!($362)) {
                              label = 223;
                              break L148;
                             }
                            }
                            $363 = ($rest$sroa$0$12460$i|0)==(6149|0);
                            do {
                             if (!($363)) {
                              $364 = (_memcmp(6149,$rest$sroa$0$12460$i,4)|0);
                              $365 = ($364|0)==(0);
                              if ($365) {
                               break;
                              }
                              if (!($264)) {
                               $$phi$trans$insert3103$i = ((($rest$sroa$0$12460$i)) + 4|0);
                               $$pre3104$i = HEAP8[$$phi$trans$insert3103$i>>0]|0;
                               $377 = ($$pre3104$i<<24>>24)>(-65);
                               if (!($377)) {
                                label = 223;
                                break L148;
                               }
                              }
                              $378 = ($rest$sroa$0$12460$i|0)==(6154|0);
                              do {
                               if (!($378)) {
                                $379 = (_memcmp(6154,$rest$sroa$0$12460$i,4)|0);
                                $380 = ($379|0)==(0);
                                if ($380) {
                                 break;
                                }
                                if (!($264)) {
                                 $$phi$trans$insert3105$i = ((($rest$sroa$0$12460$i)) + 4|0);
                                 $$pre3106$i = HEAP8[$$phi$trans$insert3105$i>>0]|0;
                                 $392 = ($$pre3106$i<<24>>24)>(-65);
                                 if (!($392)) {
                                  label = 223;
                                  break L148;
                                 }
                                }
                                $393 = ($rest$sroa$0$12460$i|0)==(6159|0);
                                if (!($393)) {
                                 $394 = (_memcmp(6159,$rest$sroa$0$12460$i,4)|0);
                                 $395 = ($394|0)==(0);
                                 if (!($395)) {
                                  label = 223;
                                  break L148;
                                 }
                                }
                                $405 = HEAP32[$141>>2]|0;
                                FUNCTION_TABLE_viiii[$405 & 255]($tmp318$i,$1,6068,1);
                                $406 = HEAP32[$tmp318$i>>2]|0;
                                $switch115$i = ($406|0)==(1);
                                if ($switch115$i) {
                                 label = 226;
                                 break L78;
                                }
                                $$pre$i1399$i = ((($rest$sroa$0$12460$i)) + 4|0);
                                if (!($264)) {
                                 $420 = HEAP8[$$pre$i1399$i>>0]|0;
                                 $421 = ($420<<24>>24)>(-65);
                                 if (!($421)) {
                                  label = 229;
                                  break L78;
                                 }
                                }
                                $422 = (($rest$sroa$82$12497$i) + -4)|0;
                                $rest$sroa$0$1$be$i = $$pre$i1399$i;$rest$sroa$82$1$be$i = $422;
                                break L134;
                               }
                              } while(0);
                              $390 = HEAP32[$141>>2]|0;
                              FUNCTION_TABLE_viiii[$390 & 255]($tmp299$i,$1,6158,1);
                              $391 = HEAP32[$tmp299$i>>2]|0;
                              $switch114$i = ($391|0)==(1);
                              if ($switch114$i) {
                               label = 216;
                               break L78;
                              }
                              $$pre$i1374$i = ((($rest$sroa$0$12460$i)) + 4|0);
                              if (!($264)) {
                               $402 = HEAP8[$$pre$i1374$i>>0]|0;
                               $403 = ($402<<24>>24)>(-65);
                               if (!($403)) {
                                label = 219;
                                break L78;
                               }
                              }
                              $404 = (($rest$sroa$82$12497$i) + -4)|0;
                              $rest$sroa$0$1$be$i = $$pre$i1374$i;$rest$sroa$82$1$be$i = $404;
                              break L134;
                             }
                            } while(0);
                            $375 = HEAP32[$141>>2]|0;
                            FUNCTION_TABLE_viiii[$375 & 255]($tmp280$i,$1,6153,1);
                            $376 = HEAP32[$tmp280$i>>2]|0;
                            $switch113$i = ($376|0)==(1);
                            if ($switch113$i) {
                             label = 206;
                             break L78;
                            }
                            $$pre$i1349$i = ((($rest$sroa$0$12460$i)) + 4|0);
                            if (!($264)) {
                             $387 = HEAP8[$$pre$i1349$i>>0]|0;
                             $388 = ($387<<24>>24)>(-65);
                             if (!($388)) {
                              label = 209;
                              break L78;
                             }
                            }
                            $389 = (($rest$sroa$82$12497$i) + -4)|0;
                            $rest$sroa$0$1$be$i = $$pre$i1349$i;$rest$sroa$82$1$be$i = $389;
                            break L134;
                           }
                          } while(0);
                          $360 = HEAP32[$141>>2]|0;
                          FUNCTION_TABLE_viiii[$360 & 255]($tmp261$i,$1,6148,1);
                          $361 = HEAP32[$tmp261$i>>2]|0;
                          $switch112$i = ($361|0)==(1);
                          if ($switch112$i) {
                           label = 196;
                           break L78;
                          }
                          $$pre$i1324$i = ((($rest$sroa$0$12460$i)) + 4|0);
                          if (!($264)) {
                           $372 = HEAP8[$$pre$i1324$i>>0]|0;
                           $373 = ($372<<24>>24)>(-65);
                           if (!($373)) {
                            label = 199;
                            break L78;
                           }
                          }
                          $374 = (($rest$sroa$82$12497$i) + -4)|0;
                          $rest$sroa$0$1$be$i = $$pre$i1324$i;$rest$sroa$82$1$be$i = $374;
                          break L134;
                         }
                        } while(0);
                        $345 = HEAP32[$141>>2]|0;
                        FUNCTION_TABLE_viiii[$345 & 255]($tmp242$i,$1,6143,1);
                        $346 = HEAP32[$tmp242$i>>2]|0;
                        $switch111$i = ($346|0)==(1);
                        if ($switch111$i) {
                         label = 186;
                         break L78;
                        }
                        $$pre$i1299$i = ((($rest$sroa$0$12460$i)) + 4|0);
                        if (!($264)) {
                         $357 = HEAP8[$$pre$i1299$i>>0]|0;
                         $358 = ($357<<24>>24)>(-65);
                         if (!($358)) {
                          label = 189;
                          break L78;
                         }
                        }
                        $359 = (($rest$sroa$82$12497$i) + -4)|0;
                        $rest$sroa$0$1$be$i = $$pre$i1299$i;$rest$sroa$82$1$be$i = $359;
                        break L134;
                       }
                      } while(0);
                      $330 = HEAP32[$141>>2]|0;
                      FUNCTION_TABLE_viiii[$330 & 255]($tmp223$i,$1,6138,1);
                      $331 = HEAP32[$tmp223$i>>2]|0;
                      $switch110$i = ($331|0)==(1);
                      if ($switch110$i) {
                       label = 176;
                       break L78;
                      }
                      $$pre$i1274$i = ((($rest$sroa$0$12460$i)) + 4|0);
                      if (!($264)) {
                       $342 = HEAP8[$$pre$i1274$i>>0]|0;
                       $343 = ($342<<24>>24)>(-65);
                       if (!($343)) {
                        label = 179;
                        break L78;
                       }
                      }
                      $344 = (($rest$sroa$82$12497$i) + -4)|0;
                      $rest$sroa$0$1$be$i = $$pre$i1274$i;$rest$sroa$82$1$be$i = $344;
                      break L134;
                     }
                    } while(0);
                    $315 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$315 & 255]($tmp204$i,$1,6133,1);
                    $316 = HEAP32[$tmp204$i>>2]|0;
                    $switch109$i = ($316|0)==(1);
                    if ($switch109$i) {
                     label = 166;
                     break L78;
                    }
                    $$pre$i1249$i = ((($rest$sroa$0$12460$i)) + 4|0);
                    if (!($264)) {
                     $327 = HEAP8[$$pre$i1249$i>>0]|0;
                     $328 = ($327<<24>>24)>(-65);
                     if (!($328)) {
                      label = 169;
                      break L78;
                     }
                    }
                    $329 = (($rest$sroa$82$12497$i) + -4)|0;
                    $rest$sroa$0$1$be$i = $$pre$i1249$i;$rest$sroa$82$1$be$i = $329;
                    break L134;
                   }
                  } while(0);
                  if ((label|0) == 223) {
                   label = 0;
                   $408 = ((($rest$sroa$0$12460$i)) + 3|0);
                   $409 = HEAP8[$408>>0]|0;
                   $410 = ($409<<24>>24)>(-65);
                   if ($410) {
                    $635 = 0;
                    label = 224;
                   }
                  }
                  do {
                   if ((label|0) == 224) {
                    label = 0;
                    $411 = ($rest$sroa$0$12460$i|0)==(6163|0);
                    if (!($411)) {
                     $412 = (_memcmp(6163,$rest$sroa$0$12460$i,3)|0);
                     $413 = ($412|0)==(0);
                     if (!($413)) {
                      break;
                     }
                    }
                    $423 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$423 & 255]($tmp337$i,$1,6166,1);
                    $424 = HEAP32[$tmp337$i>>2]|0;
                    $switch116$i = ($424|0)==(1);
                    if ($switch116$i) {
                     label = 237;
                     break L78;
                    }
                    if ($635) {
                     $$pre$i1424$i = ((($rest$sroa$0$12460$i)) + 3|0);
                     $$pre$phi$i1429$iZ2D = $$pre$i1424$i;
                    } else {
                     $not$$i$i1426$i = ($rest$sroa$82$12497$i>>>0)>(3);
                     if (!($not$$i$i1426$i)) {
                      label = 242;
                      break L78;
                     }
                     $438 = ((($rest$sroa$0$12460$i)) + 3|0);
                     $439 = HEAP8[$438>>0]|0;
                     $440 = ($439<<24>>24)>(-65);
                     if ($440) {
                      $$pre$phi$i1429$iZ2D = $438;
                     } else {
                      label = 242;
                      break L78;
                     }
                    }
                    $441 = (($rest$sroa$82$12497$i) + -3)|0;
                    $rest$sroa$0$1$be$i = $$pre$phi$i1429$iZ2D;$rest$sroa$82$1$be$i = $441;
                    break L134;
                   }
                  } while(0);
                  $425 = ($rest$sroa$82$12497$i|0)==(5);
                  if ($425) {
                   $636 = 1;
                  } else {
                   $not$$i$i$i$i1408$i = ($rest$sroa$82$12497$i>>>0)>(5);
                   if (!($not$$i$i$i$i1408$i)) {
                    break L130;
                   }
                   $426 = ((($rest$sroa$0$12460$i)) + 5|0);
                   $427 = HEAP8[$426>>0]|0;
                   $428 = ($427<<24>>24)>(-65);
                   if ($428) {
                    $636 = 0;
                   } else {
                    break L130;
                   }
                  }
                  $429 = ($rest$sroa$0$12460$i|0)==(6167|0);
                  do {
                   if (!($429)) {
                    $430 = (_memcmp(6167,$rest$sroa$0$12460$i,5)|0);
                    $431 = ($430|0)==(0);
                    if ($431) {
                     break;
                    }
                    if ($636) {
                     $637 = 1;
                    } else {
                     $not$$i$i$i$i1433$i = ($rest$sroa$82$12497$i>>>0)>(5);
                     if (!($not$$i$i$i$i1433$i)) {
                      break L130;
                     }
                     $$phi$trans$insert3107$i = ((($rest$sroa$0$12460$i)) + 5|0);
                     $$pre3108$i = HEAP8[$$phi$trans$insert3107$i>>0]|0;
                     $444 = ($$pre3108$i<<24>>24)>(-65);
                     if ($444) {
                      $637 = 0;
                     } else {
                      break L130;
                     }
                    }
                    $445 = ($rest$sroa$0$12460$i|0)==(6173|0);
                    do {
                     if (!($445)) {
                      $446 = (_memcmp(6173,$rest$sroa$0$12460$i,5)|0);
                      $447 = ($446|0)==(0);
                      if ($447) {
                       break;
                      }
                      if ($637) {
                       $638 = 1;
                      } else {
                       $not$$i$i$i$i1458$i = ($rest$sroa$82$12497$i>>>0)>(5);
                       if (!($not$$i$i$i$i1458$i)) {
                        break L130;
                       }
                       $$phi$trans$insert3109$i = ((($rest$sroa$0$12460$i)) + 5|0);
                       $$pre3110$i = HEAP8[$$phi$trans$insert3109$i>>0]|0;
                       $460 = ($$pre3110$i<<24>>24)>(-65);
                       if ($460) {
                        $638 = 0;
                       } else {
                        break L130;
                       }
                      }
                      $461 = ($rest$sroa$0$12460$i|0)==(6179|0);
                      do {
                       if (!($461)) {
                        $462 = (_memcmp(6179,$rest$sroa$0$12460$i,5)|0);
                        $463 = ($462|0)==(0);
                        if ($463) {
                         break;
                        }
                        if ($638) {
                         $639 = 1;
                        } else {
                         $not$$i$i$i$i1483$i = ($rest$sroa$82$12497$i>>>0)>(5);
                         if (!($not$$i$i$i$i1483$i)) {
                          break L130;
                         }
                         $$phi$trans$insert3111$i = ((($rest$sroa$0$12460$i)) + 5|0);
                         $$pre3112$i = HEAP8[$$phi$trans$insert3111$i>>0]|0;
                         $476 = ($$pre3112$i<<24>>24)>(-65);
                         if ($476) {
                          $639 = 0;
                         } else {
                          break L130;
                         }
                        }
                        $477 = ($rest$sroa$0$12460$i|0)==(6185|0);
                        do {
                         if (!($477)) {
                          $478 = (_memcmp(6185,$rest$sroa$0$12460$i,5)|0);
                          $479 = ($478|0)==(0);
                          if ($479) {
                           break;
                          }
                          if ($639) {
                           $640 = 1;
                          } else {
                           $not$$i$i$i$i1508$i = ($rest$sroa$82$12497$i>>>0)>(5);
                           if (!($not$$i$i$i$i1508$i)) {
                            break L130;
                           }
                           $$phi$trans$insert3113$i = ((($rest$sroa$0$12460$i)) + 5|0);
                           $$pre3114$i = HEAP8[$$phi$trans$insert3113$i>>0]|0;
                           $492 = ($$pre3114$i<<24>>24)>(-65);
                           if ($492) {
                            $640 = 0;
                           } else {
                            break L130;
                           }
                          }
                          $493 = ($rest$sroa$0$12460$i|0)==(6191|0);
                          do {
                           if (!($493)) {
                            $494 = (_memcmp(6191,$rest$sroa$0$12460$i,5)|0);
                            $495 = ($494|0)==(0);
                            if ($495) {
                             break;
                            }
                            if ($640) {
                             $641 = 1;
                            } else {
                             $not$$i$i$i$i1533$i = ($rest$sroa$82$12497$i>>>0)>(5);
                             if (!($not$$i$i$i$i1533$i)) {
                              break L130;
                             }
                             $$phi$trans$insert3115$i = ((($rest$sroa$0$12460$i)) + 5|0);
                             $$pre3116$i = HEAP8[$$phi$trans$insert3115$i>>0]|0;
                             $508 = ($$pre3116$i<<24>>24)>(-65);
                             if ($508) {
                              $641 = 0;
                             } else {
                              break L130;
                             }
                            }
                            $509 = ($rest$sroa$0$12460$i|0)==(6197|0);
                            do {
                             if (!($509)) {
                              $510 = (_memcmp(6197,$rest$sroa$0$12460$i,5)|0);
                              $511 = ($510|0)==(0);
                              if ($511) {
                               break;
                              }
                              if ($641) {
                               $642 = 1;
                              } else {
                               $not$$i$i$i$i1558$i = ($rest$sroa$82$12497$i>>>0)>(5);
                               if (!($not$$i$i$i$i1558$i)) {
                                break L130;
                               }
                               $$phi$trans$insert3117$i = ((($rest$sroa$0$12460$i)) + 5|0);
                               $$pre3118$i = HEAP8[$$phi$trans$insert3117$i>>0]|0;
                               $524 = ($$pre3118$i<<24>>24)>(-65);
                               if ($524) {
                                $642 = 0;
                               } else {
                                break L130;
                               }
                              }
                              $525 = ($rest$sroa$0$12460$i|0)==(6203|0);
                              do {
                               if (!($525)) {
                                $526 = (_memcmp(6203,$rest$sroa$0$12460$i,5)|0);
                                $527 = ($526|0)==(0);
                                if ($527) {
                                 break;
                                }
                                if ($642) {
                                 $643 = 1;
                                } else {
                                 $not$$i$i$i$i1583$i = ($rest$sroa$82$12497$i>>>0)>(5);
                                 if (!($not$$i$i$i$i1583$i)) {
                                  break L130;
                                 }
                                 $$phi$trans$insert3119$i = ((($rest$sroa$0$12460$i)) + 5|0);
                                 $$pre3120$i = HEAP8[$$phi$trans$insert3119$i>>0]|0;
                                 $540 = ($$pre3120$i<<24>>24)>(-65);
                                 if ($540) {
                                  $643 = 0;
                                 } else {
                                  break L130;
                                 }
                                }
                                $541 = ($rest$sroa$0$12460$i|0)==(6209|0);
                                do {
                                 if (!($541)) {
                                  $542 = (_memcmp(6209,$rest$sroa$0$12460$i,5)|0);
                                  $543 = ($542|0)==(0);
                                  if ($543) {
                                   break;
                                  }
                                  if ($643) {
                                   $644 = 1;
                                  } else {
                                   $not$$i$i$i$i1147$i = ($rest$sroa$82$12497$i>>>0)>(5);
                                   if (!($not$$i$i$i$i1147$i)) {
                                    break L130;
                                   }
                                   $$phi$trans$insert3121$i = ((($rest$sroa$0$12460$i)) + 5|0);
                                   $$pre3122$i = HEAP8[$$phi$trans$insert3121$i>>0]|0;
                                   $556 = ($$pre3122$i<<24>>24)>(-65);
                                   if ($556) {
                                    $644 = 0;
                                   } else {
                                    break L130;
                                   }
                                  }
                                  $557 = ($rest$sroa$0$12460$i|0)==(6215|0);
                                  do {
                                   if (!($557)) {
                                    $558 = (_memcmp(6215,$rest$sroa$0$12460$i,5)|0);
                                    $559 = ($558|0)==(0);
                                    if ($559) {
                                     break;
                                    }
                                    if ($644) {
                                     $645 = 1;
                                    } else {
                                     $not$$i$i$i$i1004$i = ($rest$sroa$82$12497$i>>>0)>(5);
                                     if (!($not$$i$i$i$i1004$i)) {
                                      break L130;
                                     }
                                     $$phi$trans$insert3123$i = ((($rest$sroa$0$12460$i)) + 5|0);
                                     $$pre3124$i = HEAP8[$$phi$trans$insert3123$i>>0]|0;
                                     $572 = ($$pre3124$i<<24>>24)>(-65);
                                     if ($572) {
                                      $645 = 0;
                                     } else {
                                      break L130;
                                     }
                                    }
                                    $573 = ($rest$sroa$0$12460$i|0)==(6221|0);
                                    if (!($573)) {
                                     $574 = (_memcmp(6221,$rest$sroa$0$12460$i,5)|0);
                                     $575 = ($574|0)==(0);
                                     if (!($575)) {
                                      break L130;
                                     }
                                    }
                                    $586 = HEAP32[$141>>2]|0;
                                    FUNCTION_TABLE_viiii[$586 & 255]($tmp527$i,$1,6226,1);
                                    $587 = HEAP32[$tmp527$i>>2]|0;
                                    $switch126$i = ($587|0)==(1);
                                    if ($switch126$i) {
                                     label = 363;
                                     break L78;
                                    }
                                    if ($645) {
                                     $$pre$i912$i = ((($rest$sroa$0$12460$i)) + 5|0);
                                     $$pre$phi$i917$iZ2D = $$pre$i912$i;
                                    } else {
                                     $not$$i$i914$i = ($rest$sroa$82$12497$i>>>0)>(5);
                                     if (!($not$$i$i914$i)) {
                                      label = 368;
                                      break L78;
                                     }
                                     $596 = ((($rest$sroa$0$12460$i)) + 5|0);
                                     $597 = HEAP8[$596>>0]|0;
                                     $598 = ($597<<24>>24)>(-65);
                                     if ($598) {
                                      $$pre$phi$i917$iZ2D = $596;
                                     } else {
                                      label = 368;
                                      break L78;
                                     }
                                    }
                                    $599 = (($rest$sroa$82$12497$i) + -5)|0;
                                    $rest$sroa$0$1$be$i = $$pre$phi$i917$iZ2D;$rest$sroa$82$1$be$i = $599;
                                    break L134;
                                   }
                                  } while(0);
                                  $570 = HEAP32[$141>>2]|0;
                                  FUNCTION_TABLE_viiii[$570 & 255]($tmp508$i,$1,6220,1);
                                  $571 = HEAP32[$tmp508$i>>2]|0;
                                  $switch125$i = ($571|0)==(1);
                                  if ($switch125$i) {
                                   label = 354;
                                   break L78;
                                  }
                                  if ($644) {
                                   $$pre$i938$i = ((($rest$sroa$0$12460$i)) + 5|0);
                                   $$pre$phi$i943$iZ2D = $$pre$i938$i;
                                  } else {
                                   $not$$i$i940$i = ($rest$sroa$82$12497$i>>>0)>(5);
                                   if (!($not$$i$i940$i)) {
                                    label = 359;
                                    break L78;
                                   }
                                   $582 = ((($rest$sroa$0$12460$i)) + 5|0);
                                   $583 = HEAP8[$582>>0]|0;
                                   $584 = ($583<<24>>24)>(-65);
                                   if ($584) {
                                    $$pre$phi$i943$iZ2D = $582;
                                   } else {
                                    label = 359;
                                    break L78;
                                   }
                                  }
                                  $585 = (($rest$sroa$82$12497$i) + -5)|0;
                                  $rest$sroa$0$1$be$i = $$pre$phi$i943$iZ2D;$rest$sroa$82$1$be$i = $585;
                                  break L134;
                                 }
                                } while(0);
                                $554 = HEAP32[$141>>2]|0;
                                FUNCTION_TABLE_viiii[$554 & 255]($tmp489$i,$1,6214,1);
                                $555 = HEAP32[$tmp489$i>>2]|0;
                                $switch124$i = ($555|0)==(1);
                                if ($switch124$i) {
                                 label = 341;
                                 break L78;
                                }
                                if ($643) {
                                 $$pre$i1020$i = ((($rest$sroa$0$12460$i)) + 5|0);
                                 $$pre$phi$i1025$iZ2D = $$pre$i1020$i;
                                } else {
                                 $not$$i$i1022$i = ($rest$sroa$82$12497$i>>>0)>(5);
                                 if (!($not$$i$i1022$i)) {
                                  label = 346;
                                  break L78;
                                 }
                                 $566 = ((($rest$sroa$0$12460$i)) + 5|0);
                                 $567 = HEAP8[$566>>0]|0;
                                 $568 = ($567<<24>>24)>(-65);
                                 if ($568) {
                                  $$pre$phi$i1025$iZ2D = $566;
                                 } else {
                                  label = 346;
                                  break L78;
                                 }
                                }
                                $569 = (($rest$sroa$82$12497$i) + -5)|0;
                                $rest$sroa$0$1$be$i = $$pre$phi$i1025$iZ2D;$rest$sroa$82$1$be$i = $569;
                                break L134;
                               }
                              } while(0);
                              $538 = HEAP32[$141>>2]|0;
                              FUNCTION_TABLE_viiii[$538 & 255]($tmp470$i,$1,6208,1);
                              $539 = HEAP32[$tmp470$i>>2]|0;
                              $switch123$i = ($539|0)==(1);
                              if ($switch123$i) {
                               label = 328;
                               break L78;
                              }
                              if ($642) {
                               $$pre$i1207$i = ((($rest$sroa$0$12460$i)) + 5|0);
                               $$pre$phi$i1212$iZ2D = $$pre$i1207$i;
                              } else {
                               $not$$i$i1209$i = ($rest$sroa$82$12497$i>>>0)>(5);
                               if (!($not$$i$i1209$i)) {
                                label = 333;
                                break L78;
                               }
                               $550 = ((($rest$sroa$0$12460$i)) + 5|0);
                               $551 = HEAP8[$550>>0]|0;
                               $552 = ($551<<24>>24)>(-65);
                               if ($552) {
                                $$pre$phi$i1212$iZ2D = $550;
                               } else {
                                label = 333;
                                break L78;
                               }
                              }
                              $553 = (($rest$sroa$82$12497$i) + -5)|0;
                              $rest$sroa$0$1$be$i = $$pre$phi$i1212$iZ2D;$rest$sroa$82$1$be$i = $553;
                              break L134;
                             }
                            } while(0);
                            $522 = HEAP32[$141>>2]|0;
                            FUNCTION_TABLE_viiii[$522 & 255]($tmp451$i,$1,6202,1);
                            $523 = HEAP32[$tmp451$i>>2]|0;
                            $switch122$i = ($523|0)==(1);
                            if ($switch122$i) {
                             label = 315;
                             break L78;
                            }
                            if ($641) {
                             $$pre$i1574$i = ((($rest$sroa$0$12460$i)) + 5|0);
                             $$pre$phi$i1579$iZ2D = $$pre$i1574$i;
                            } else {
                             $not$$i$i1576$i = ($rest$sroa$82$12497$i>>>0)>(5);
                             if (!($not$$i$i1576$i)) {
                              label = 320;
                              break L78;
                             }
                             $534 = ((($rest$sroa$0$12460$i)) + 5|0);
                             $535 = HEAP8[$534>>0]|0;
                             $536 = ($535<<24>>24)>(-65);
                             if ($536) {
                              $$pre$phi$i1579$iZ2D = $534;
                             } else {
                              label = 320;
                              break L78;
                             }
                            }
                            $537 = (($rest$sroa$82$12497$i) + -5)|0;
                            $rest$sroa$0$1$be$i = $$pre$phi$i1579$iZ2D;$rest$sroa$82$1$be$i = $537;
                            break L134;
                           }
                          } while(0);
                          $506 = HEAP32[$141>>2]|0;
                          FUNCTION_TABLE_viiii[$506 & 255]($tmp432$i,$1,6196,1);
                          $507 = HEAP32[$tmp432$i>>2]|0;
                          $switch121$i = ($507|0)==(1);
                          if ($switch121$i) {
                           label = 302;
                           break L78;
                          }
                          if ($640) {
                           $$pre$i1549$i = ((($rest$sroa$0$12460$i)) + 5|0);
                           $$pre$phi$i1554$iZ2D = $$pre$i1549$i;
                          } else {
                           $not$$i$i1551$i = ($rest$sroa$82$12497$i>>>0)>(5);
                           if (!($not$$i$i1551$i)) {
                            label = 307;
                            break L78;
                           }
                           $518 = ((($rest$sroa$0$12460$i)) + 5|0);
                           $519 = HEAP8[$518>>0]|0;
                           $520 = ($519<<24>>24)>(-65);
                           if ($520) {
                            $$pre$phi$i1554$iZ2D = $518;
                           } else {
                            label = 307;
                            break L78;
                           }
                          }
                          $521 = (($rest$sroa$82$12497$i) + -5)|0;
                          $rest$sroa$0$1$be$i = $$pre$phi$i1554$iZ2D;$rest$sroa$82$1$be$i = $521;
                          break L134;
                         }
                        } while(0);
                        $490 = HEAP32[$141>>2]|0;
                        FUNCTION_TABLE_viiii[$490 & 255]($tmp413$i,$1,6190,1);
                        $491 = HEAP32[$tmp413$i>>2]|0;
                        $switch120$i = ($491|0)==(1);
                        if ($switch120$i) {
                         label = 289;
                         break L78;
                        }
                        if ($639) {
                         $$pre$i1524$i = ((($rest$sroa$0$12460$i)) + 5|0);
                         $$pre$phi$i1529$iZ2D = $$pre$i1524$i;
                        } else {
                         $not$$i$i1526$i = ($rest$sroa$82$12497$i>>>0)>(5);
                         if (!($not$$i$i1526$i)) {
                          label = 294;
                          break L78;
                         }
                         $502 = ((($rest$sroa$0$12460$i)) + 5|0);
                         $503 = HEAP8[$502>>0]|0;
                         $504 = ($503<<24>>24)>(-65);
                         if ($504) {
                          $$pre$phi$i1529$iZ2D = $502;
                         } else {
                          label = 294;
                          break L78;
                         }
                        }
                        $505 = (($rest$sroa$82$12497$i) + -5)|0;
                        $rest$sroa$0$1$be$i = $$pre$phi$i1529$iZ2D;$rest$sroa$82$1$be$i = $505;
                        break L134;
                       }
                      } while(0);
                      $474 = HEAP32[$141>>2]|0;
                      FUNCTION_TABLE_viiii[$474 & 255]($tmp394$i,$1,6184,1);
                      $475 = HEAP32[$tmp394$i>>2]|0;
                      $switch119$i = ($475|0)==(1);
                      if ($switch119$i) {
                       label = 276;
                       break L78;
                      }
                      if ($638) {
                       $$pre$i1499$i = ((($rest$sroa$0$12460$i)) + 5|0);
                       $$pre$phi$i1504$iZ2D = $$pre$i1499$i;
                      } else {
                       $not$$i$i1501$i = ($rest$sroa$82$12497$i>>>0)>(5);
                       if (!($not$$i$i1501$i)) {
                        label = 281;
                        break L78;
                       }
                       $486 = ((($rest$sroa$0$12460$i)) + 5|0);
                       $487 = HEAP8[$486>>0]|0;
                       $488 = ($487<<24>>24)>(-65);
                       if ($488) {
                        $$pre$phi$i1504$iZ2D = $486;
                       } else {
                        label = 281;
                        break L78;
                       }
                      }
                      $489 = (($rest$sroa$82$12497$i) + -5)|0;
                      $rest$sroa$0$1$be$i = $$pre$phi$i1504$iZ2D;$rest$sroa$82$1$be$i = $489;
                      break L134;
                     }
                    } while(0);
                    $458 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$458 & 255]($tmp375$i,$1,6178,1);
                    $459 = HEAP32[$tmp375$i>>2]|0;
                    $switch118$i = ($459|0)==(1);
                    if ($switch118$i) {
                     label = 263;
                     break L78;
                    }
                    if ($637) {
                     $$pre$i1474$i = ((($rest$sroa$0$12460$i)) + 5|0);
                     $$pre$phi$i1479$iZ2D = $$pre$i1474$i;
                    } else {
                     $not$$i$i1476$i = ($rest$sroa$82$12497$i>>>0)>(5);
                     if (!($not$$i$i1476$i)) {
                      label = 268;
                      break L78;
                     }
                     $470 = ((($rest$sroa$0$12460$i)) + 5|0);
                     $471 = HEAP8[$470>>0]|0;
                     $472 = ($471<<24>>24)>(-65);
                     if ($472) {
                      $$pre$phi$i1479$iZ2D = $470;
                     } else {
                      label = 268;
                      break L78;
                     }
                    }
                    $473 = (($rest$sroa$82$12497$i) + -5)|0;
                    $rest$sroa$0$1$be$i = $$pre$phi$i1479$iZ2D;$rest$sroa$82$1$be$i = $473;
                    break L134;
                   }
                  } while(0);
                  $442 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$442 & 255]($tmp356$i,$1,6172,1);
                  $443 = HEAP32[$tmp356$i>>2]|0;
                  $switch117$i = ($443|0)==(1);
                  if ($switch117$i) {
                   label = 250;
                   break L78;
                  }
                  if ($636) {
                   $$pre$i1449$i = ((($rest$sroa$0$12460$i)) + 5|0);
                   $$pre$phi$i1454$iZ2D = $$pre$i1449$i;
                  } else {
                   $not$$i$i1451$i = ($rest$sroa$82$12497$i>>>0)>(5);
                   if (!($not$$i$i1451$i)) {
                    label = 255;
                    break L78;
                   }
                   $454 = ((($rest$sroa$0$12460$i)) + 5|0);
                   $455 = HEAP8[$454>>0]|0;
                   $456 = ($455<<24>>24)>(-65);
                   if ($456) {
                    $$pre$phi$i1454$iZ2D = $454;
                   } else {
                    label = 255;
                    break L78;
                   }
                  }
                  $457 = (($rest$sroa$82$12497$i) + -5)|0;
                  $rest$sroa$0$1$be$i = $$pre$phi$i1454$iZ2D;$rest$sroa$82$1$be$i = $457;
                  break L134;
                 }
                } while(0);
                $$pre$i1099$ptr$i = ((($rest$sroa$0$12460$i)) + 1|0);
                do {
                 if ($212) {
                  $631 = 0;
                  label = 129;
                 } else {
                  $218 = HEAP8[$$pre$i1099$ptr$i>>0]|0;
                  $219 = ($218<<24>>24)>(-65);
                  if (!($219)) {
                   label = 112;
                   break L78;
                  }
                  $220 = (($rest$sroa$82$12497$i) + -1)|0;
                  $$ptr$i = (($rest$sroa$0$12460$i) + ($rest$sroa$82$12497$i)|0);
                  $221 = ($220|0)==(0);
                  if ($221) {
                   $631 = 0;
                   label = 129;
                   break;
                  }
                  $223 = ((($rest$sroa$0$12460$i)) + 2|0);
                  $224 = ($218<<24>>24)>(-1);
                  do {
                   if ($224) {
                    $222 = $218&255;
                    $tmp157$sroa$5$2$ph$i = $222;
                   } else {
                    $225 = $218 & 31;
                    $226 = $225&255;
                    $227 = ($rest$sroa$82$12497$i|0)==(2);
                    if ($227) {
                     $234 = $$ptr$i;$return$0$i23$i$i1116$i = 0;
                    } else {
                     $228 = ((($rest$sroa$0$12460$i)) + 3|0);
                     $229 = HEAP8[$223>>0]|0;
                     $phitmp$i$i1114$i = $229 & 63;
                     $234 = $228;$return$0$i23$i$i1116$i = $phitmp$i$i1114$i;
                    }
                    $230 = $226 << 6;
                    $231 = $return$0$i23$i$i1116$i&255;
                    $232 = $231 | $230;
                    $233 = ($218&255)>(223);
                    if (!($233)) {
                     $tmp157$sroa$5$2$ph$i = $232;
                     break;
                    }
                    $235 = ($234|0)==($$ptr$i|0);
                    if ($235) {
                     $244 = $$ptr$i;$return$0$i16$i$i1121$i = 0;
                    } else {
                     $236 = ((($234)) + 1|0);
                     $237 = HEAP8[$234>>0]|0;
                     $phitmp32$i$i1119$i = $237 & 63;
                     $244 = $236;$return$0$i16$i$i1121$i = $phitmp32$i$i1119$i;
                    }
                    $238 = $231 << 6;
                    $239 = $return$0$i16$i$i1121$i&255;
                    $240 = $239 | $238;
                    $241 = $226 << 12;
                    $242 = $240 | $241;
                    $243 = ($218&255)>(239);
                    if (!($243)) {
                     $tmp157$sroa$5$2$ph$i = $242;
                     break;
                    }
                    $245 = ($244|0)==($$ptr$i|0);
                    if ($245) {
                     $return$0$i10$i$i1126$i = 0;
                    } else {
                     $246 = HEAP8[$244>>0]|0;
                     $phitmp33$i$i1124$i = $246 & 63;
                     $return$0$i10$i$i1126$i = $phitmp33$i$i1124$i;
                    }
                    $247 = $226 << 18;
                    $248 = $247 & 1835008;
                    $249 = $240 << 6;
                    $250 = $return$0$i10$i$i1126$i&255;
                    $251 = $249 | $248;
                    $252 = $251 | $250;
                    $tmp157$sroa$5$2$ph$i = $252;
                   }
                  } while(0);
                  $cond$i103 = ($tmp157$sroa$5$2$ph$i|0)==(46);
                  if (!($cond$i103)) {
                   $631 = $220;
                   label = 129;
                   break;
                  }
                  $256 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$256 & 255]($tmp167$i,$1,6124,2);
                  $self$i1140$sroa$0$0$copyload$i = HEAP32[$tmp167$i>>2]|0;
                  $switch3$i1141$i = ($self$i1140$sroa$0$0$copyload$i|0)==(1);
                  if ($switch3$i1141$i) {
                   label = 132;
                   break L78;
                  }
                  $258 = ($rest$sroa$82$12497$i|0)==(2);
                  if (!($258)) {
                   $259 = HEAP8[$223>>0]|0;
                   $260 = ($259<<24>>24)>(-65);
                   if (!($260)) {
                    label = 135;
                    break L78;
                   }
                  }
                  $261 = (($rest$sroa$82$12497$i) + -2)|0;
                  $$sink$i$index = $223;$$sink$i$index2 = $261;
                 }
                } while(0);
                if ((label|0) == 129) {
                 label = 0;
                 $257 = HEAP32[$141>>2]|0;
                 FUNCTION_TABLE_viiii[$257 & 255]($tmp184$i,$1,6102,1);
                 $self$i1155$sroa$0$0$copyload$i = HEAP32[$tmp184$i>>2]|0;
                 $switch3$i1156$i = ($self$i1155$sroa$0$0$copyload$i|0)==(1);
                 if ($switch3$i1156$i) {
                  label = 137;
                  break L78;
                 }
                 if (!($212)) {
                  $262 = HEAP8[$$pre$i1099$ptr$i>>0]|0;
                  $263 = ($262<<24>>24)>(-65);
                  if (!($263)) {
                   label = 140;
                   break L78;
                  }
                 }
                 $$sink$i$index = $$pre$i1099$ptr$i;$$sink$i$index2 = $631;
                }
                $rest$sroa$0$1$be$i = $$sink$i$index;$rest$sroa$82$1$be$i = $$sink$i$index2;
               }
              } while(0);
              if ((label|0) == 147) {
               label = 0;
               $271 = (($rest$sroa$0$12460$i) + ($rest$sroa$82$12497$i)|0);
               $272 = $rest$sroa$0$12460$i;
               $273 = $272;$tmp557$sroa$0$0$i = 0;
               L410: while(1) {
                $$cast$i$i$i$i = $273;
                $274 = ($$cast$i$i$i$i|0)==($271|0);
                if ($274) {
                 $idx$0$i = $rest$sroa$82$12497$i;
                 break;
                }
                $277 = ((($$cast$i$i$i$i)) + 1|0);
                $276 = HEAP8[$$cast$i$i$i$i>>0]|0;
                $278 = ($276<<24>>24)>(-1);
                $279 = $277;
                do {
                 if ($278) {
                  $275 = $276&255;
                  $314 = $279;$trunc$i$i$i = $275;
                 } else {
                  $280 = $276 & 31;
                  $281 = $280&255;
                  $282 = ($277|0)==($271|0);
                  if ($282) {
                   $290 = $271;$632 = $279;$return$0$i23$i$i$i$i$i$i = 0;
                  } else {
                   $283 = ((($$cast$i$i$i$i)) + 2|0);
                   $284 = HEAP8[$277>>0]|0;
                   $phitmp$i$i$i$i$i$i = $284 & 63;
                   $285 = $283;
                   $290 = $283;$632 = $285;$return$0$i23$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i;
                  }
                  $286 = $281 << 6;
                  $287 = $return$0$i23$i$i$i$i$i$i&255;
                  $288 = $287 | $286;
                  $289 = ($276&255)>(223);
                  if (!($289)) {
                   $314 = $632;$trunc$i$i$i = $288;
                   break;
                  }
                  $291 = ($290|0)==($271|0);
                  if ($291) {
                   $301 = $271;$633 = $632;$return$0$i16$i$i$i$i$i$i = 0;
                  } else {
                   $292 = ((($290)) + 1|0);
                   $293 = HEAP8[$290>>0]|0;
                   $phitmp32$i$i$i$i$i$i = $293 & 63;
                   $294 = $292;
                   $301 = $292;$633 = $294;$return$0$i16$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i;
                  }
                  $295 = $287 << 6;
                  $296 = $return$0$i16$i$i$i$i$i$i&255;
                  $297 = $296 | $295;
                  $298 = $281 << 12;
                  $299 = $297 | $298;
                  $300 = ($276&255)>(239);
                  if (!($300)) {
                   $314 = $633;$trunc$i$i$i = $299;
                   break;
                  }
                  $302 = ($301|0)==($271|0);
                  if ($302) {
                   $634 = $633;$return$0$i10$i$i$i$i$i$i = 0;
                  } else {
                   $303 = ((($301)) + 1|0);
                   $304 = HEAP8[$301>>0]|0;
                   $phitmp33$i$i$i$i$i$i = $304 & 63;
                   $305 = $303;
                   $634 = $305;$return$0$i10$i$i$i$i$i$i = $phitmp33$i$i$i$i$i$i;
                  }
                  $306 = $281 << 18;
                  $307 = $306 & 1835008;
                  $308 = $297 << 6;
                  $309 = $return$0$i10$i$i$i$i$i$i&255;
                  $310 = $308 | $307;
                  $311 = $310 | $309;
                  $314 = $634;$trunc$i$i$i = $311;
                 }
                } while(0);
                $312 = (($tmp557$sroa$0$0$i) - ($273))|0;
                $313 = (($312) + ($314))|0;
                $trunc$i$i$i$clear = $trunc$i$i$i & 2097151;
                switch ($trunc$i$i$i$clear|0) {
                case 46: case 36:  {
                 $idx$0$i = $tmp557$sroa$0$0$i;
                 break L410;
                 break;
                }
                default: {
                 $273 = $314;$tmp557$sroa$0$0$i = $313;
                }
                }
               }
               $607 = ($idx$0$i|0)==(0);
               $608 = ($rest$sroa$82$12497$i|0)==($idx$0$i|0);
               $or$cond$i$i895$i = $607 | $608;
               if (!($or$cond$i$i895$i)) {
                $not$$i$i896$i = ($rest$sroa$82$12497$i>>>0)>($idx$0$i>>>0);
                if (!($not$$i$i896$i)) {
                 label = 376;
                 break L78;
                }
                $609 = (($rest$sroa$0$12460$i) + ($idx$0$i)|0);
                $610 = HEAP8[$609>>0]|0;
                $611 = ($610<<24>>24)>(-65);
                if (!($611)) {
                 label = 376;
                 break L78;
                }
               }
               $612 = HEAP32[$141>>2]|0;
               FUNCTION_TABLE_viiii[$612 & 255]($tmp564$i,$1,$rest$sroa$0$12460$i,$idx$0$i);
               $self$i$sroa$0$0$copyload$i = HEAP32[$tmp564$i>>2]|0;
               $switch3$i$i = ($self$i$sroa$0$0$copyload$i|0)==(1);
               if ($switch3$i$i) {
                label = 378;
                break L78;
               }
               if ($or$cond$i$i895$i) {
                $$pre$i$i = (($rest$sroa$0$12460$i) + ($idx$0$i)|0);
                $$pre$phi$i$iZ2D = $$pre$i$i;
               } else {
                $not$$i$i$i = ($rest$sroa$82$12497$i>>>0)>($idx$0$i>>>0);
                if (!($not$$i$i$i)) {
                 label = 383;
                 break L78;
                }
                $613 = (($rest$sroa$0$12460$i) + ($idx$0$i)|0);
                $614 = HEAP8[$613>>0]|0;
                $615 = ($614<<24>>24)>(-65);
                if ($615) {
                 $$pre$phi$i$iZ2D = $613;
                } else {
                 label = 383;
                 break L78;
                }
               }
               $616 = (($rest$sroa$82$12497$i) - ($idx$0$i))|0;
               $rest$sroa$0$1$be$i = $$pre$phi$i$iZ2D;$rest$sroa$82$1$be$i = $616;
              }
              $617 = ($rest$sroa$82$1$be$i|0)==(0);
              if ($617) {
               break L129;
              } else {
               $rest$sroa$0$12460$i = $rest$sroa$0$1$be$i;$rest$sroa$82$12497$i = $rest$sroa$82$1$be$i;
               label = 106;
              }
             }
             $588 = HEAP32[$141>>2]|0;
             FUNCTION_TABLE_viiii[$588 & 255]($tmp544$i,$1,$rest$sroa$0$12460$i,$rest$sroa$82$12497$i);
             $589 = HEAP32[$tmp544$i>>2]|0;
             $switch127$i = ($589|0)==(1);
             if ($switch127$i) {
              label = 370;
              break L78;
             }
            }
           } while(0);
           $606 = ($196|0)==(0);
           if ($606) {
            break L4;
           } else {
            $first$0$off02537$i = 0;$inner$sroa$0$22538$i = $$pre$phi$i10461790$iZ2D;$inner$sroa$12$22539$i = $196;
           }
          }
          switch (label|0) {
           case 64: {
            $self$i964$sroa$5$0$$sroa_idx1762$i = ((($tmp99$i)) + 8|0);
            $self$i964$sroa$5$0$copyload$i = HEAP32[$self$i964$sroa$5$0$$sroa_idx1762$i>>2]|0;
            $self$i964$sroa$4$0$$sroa_idx1760$i = ((($tmp99$i)) + 4|0);
            $self$i964$sroa$4$0$copyload$i = HEAP32[$self$i964$sroa$4$0$$sroa_idx1760$i>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $self$i964$sroa$4$0$copyload$i;$tmp35$sroa$29$0$ph$off32 = $self$i964$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 78: {
            __ZN4core9panicking5panic17hf2309629b2721756E(2720);
            // unreachable;
            break;
           }
           case 85: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($inner$sroa$0$22538$i,$inner$sroa$12$22539$i,0,$182);
            // unreachable;
            break;
           }
           case 87: {
            $189 = ($self$sroa$0$0$copyload$i1036$i&65535) >>> 8;
            $190 = $189&255;
            __ZN4core6result13unwrap_failed17h983d887dc946d6deE($190);
            // unreachable;
            break;
           }
           case 92: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$02450$i,$rest$sroa$82$02451$i,$self$sroa$719$0$copyload$i$i,$rest$sroa$82$02451$i);
            // unreachable;
            break;
           }
           case 100: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$02450$i,$rest$sroa$82$02451$lcssa2601$i,1,$rest$sroa$82$02451$lcssa2601$i);
            // unreachable;
            break;
           }
           case 103: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$02450$i,$self$sroa$719$0$copyload$i$i,1,$self$sroa$719$0$copyload$i$i);
            // unreachable;
            break;
           }
           case 112: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,1,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 132: {
            $self$i1140$sroa$5$0$$sroa_idx1767$i = ((($tmp167$i)) + 8|0);
            $self$i1140$sroa$5$0$copyload$i = HEAP32[$self$i1140$sroa$5$0$$sroa_idx1767$i>>2]|0;
            $self$i1140$sroa$4$0$$sroa_idx1765$i = ((($tmp167$i)) + 4|0);
            $self$i1140$sroa$4$0$copyload$i = HEAP32[$self$i1140$sroa$4$0$$sroa_idx1765$i>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $self$i1140$sroa$4$0$copyload$i;$tmp35$sroa$29$0$ph$off32 = $self$i1140$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 135: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,2,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 137: {
            $self$i1155$sroa$5$0$$sroa_idx1772$i = ((($tmp184$i)) + 8|0);
            $self$i1155$sroa$5$0$copyload$i = HEAP32[$self$i1155$sroa$5$0$$sroa_idx1772$i>>2]|0;
            $self$i1155$sroa$4$0$$sroa_idx1770$i = ((($tmp184$i)) + 4|0);
            $self$i1155$sroa$4$0$copyload$i = HEAP32[$self$i1155$sroa$4$0$$sroa_idx1770$i>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $self$i1155$sroa$4$0$copyload$i;$tmp35$sroa$29$0$ph$off32 = $self$i1155$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 140: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,1,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 166: {
            $err4$sroa$0$0$$sroa_idx492$i = ((($tmp204$i)) + 4|0);
            $321 = $err4$sroa$0$0$$sroa_idx492$i;
            $322 = $321;
            $323 = HEAP32[$322>>2]|0;
            $324 = (($321) + 4)|0;
            $325 = $324;
            $326 = HEAP32[$325>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $323;$tmp35$sroa$29$0$ph$off32 = $326;
            break L38;
            break;
           }
           case 169: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 176: {
            $err5$sroa$0$0$$sroa_idx483$i = ((($tmp223$i)) + 4|0);
            $336 = $err5$sroa$0$0$$sroa_idx483$i;
            $337 = $336;
            $338 = HEAP32[$337>>2]|0;
            $339 = (($336) + 4)|0;
            $340 = $339;
            $341 = HEAP32[$340>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $338;$tmp35$sroa$29$0$ph$off32 = $341;
            break L38;
            break;
           }
           case 179: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 186: {
            $err6$sroa$0$0$$sroa_idx474$i = ((($tmp242$i)) + 4|0);
            $351 = $err6$sroa$0$0$$sroa_idx474$i;
            $352 = $351;
            $353 = HEAP32[$352>>2]|0;
            $354 = (($351) + 4)|0;
            $355 = $354;
            $356 = HEAP32[$355>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $353;$tmp35$sroa$29$0$ph$off32 = $356;
            break L38;
            break;
           }
           case 189: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 196: {
            $err7$sroa$0$0$$sroa_idx465$i = ((($tmp261$i)) + 4|0);
            $366 = $err7$sroa$0$0$$sroa_idx465$i;
            $367 = $366;
            $368 = HEAP32[$367>>2]|0;
            $369 = (($366) + 4)|0;
            $370 = $369;
            $371 = HEAP32[$370>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $368;$tmp35$sroa$29$0$ph$off32 = $371;
            break L38;
            break;
           }
           case 199: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 206: {
            $err8$sroa$0$0$$sroa_idx456$i = ((($tmp280$i)) + 4|0);
            $381 = $err8$sroa$0$0$$sroa_idx456$i;
            $382 = $381;
            $383 = HEAP32[$382>>2]|0;
            $384 = (($381) + 4)|0;
            $385 = $384;
            $386 = HEAP32[$385>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $383;$tmp35$sroa$29$0$ph$off32 = $386;
            break L38;
            break;
           }
           case 209: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 216: {
            $err9$sroa$0$0$$sroa_idx447$i = ((($tmp299$i)) + 4|0);
            $396 = $err9$sroa$0$0$$sroa_idx447$i;
            $397 = $396;
            $398 = HEAP32[$397>>2]|0;
            $399 = (($396) + 4)|0;
            $400 = $399;
            $401 = HEAP32[$400>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $398;$tmp35$sroa$29$0$ph$off32 = $401;
            break L38;
            break;
           }
           case 219: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 226: {
            $err10$sroa$0$0$$sroa_idx438$i = ((($tmp318$i)) + 4|0);
            $414 = $err10$sroa$0$0$$sroa_idx438$i;
            $415 = $414;
            $416 = HEAP32[$415>>2]|0;
            $417 = (($414) + 4)|0;
            $418 = $417;
            $419 = HEAP32[$418>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $416;$tmp35$sroa$29$0$ph$off32 = $419;
            break L38;
            break;
           }
           case 229: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,4,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 237: {
            $err11$sroa$0$0$$sroa_idx429$i = ((($tmp337$i)) + 4|0);
            $432 = $err11$sroa$0$0$$sroa_idx429$i;
            $433 = $432;
            $434 = HEAP32[$433>>2]|0;
            $435 = (($432) + 4)|0;
            $436 = $435;
            $437 = HEAP32[$436>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $434;$tmp35$sroa$29$0$ph$off32 = $437;
            break L38;
            break;
           }
           case 242: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,3,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 250: {
            $err12$sroa$0$0$$sroa_idx420$i = ((($tmp356$i)) + 4|0);
            $448 = $err12$sroa$0$0$$sroa_idx420$i;
            $449 = $448;
            $450 = HEAP32[$449>>2]|0;
            $451 = (($448) + 4)|0;
            $452 = $451;
            $453 = HEAP32[$452>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $450;$tmp35$sroa$29$0$ph$off32 = $453;
            break L38;
            break;
           }
           case 255: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 263: {
            $err13$sroa$0$0$$sroa_idx411$i = ((($tmp375$i)) + 4|0);
            $464 = $err13$sroa$0$0$$sroa_idx411$i;
            $465 = $464;
            $466 = HEAP32[$465>>2]|0;
            $467 = (($464) + 4)|0;
            $468 = $467;
            $469 = HEAP32[$468>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $466;$tmp35$sroa$29$0$ph$off32 = $469;
            break L38;
            break;
           }
           case 268: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 276: {
            $err14$sroa$0$0$$sroa_idx402$i = ((($tmp394$i)) + 4|0);
            $480 = $err14$sroa$0$0$$sroa_idx402$i;
            $481 = $480;
            $482 = HEAP32[$481>>2]|0;
            $483 = (($480) + 4)|0;
            $484 = $483;
            $485 = HEAP32[$484>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $482;$tmp35$sroa$29$0$ph$off32 = $485;
            break L38;
            break;
           }
           case 281: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 289: {
            $err15$sroa$0$0$$sroa_idx393$i = ((($tmp413$i)) + 4|0);
            $496 = $err15$sroa$0$0$$sroa_idx393$i;
            $497 = $496;
            $498 = HEAP32[$497>>2]|0;
            $499 = (($496) + 4)|0;
            $500 = $499;
            $501 = HEAP32[$500>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $498;$tmp35$sroa$29$0$ph$off32 = $501;
            break L38;
            break;
           }
           case 294: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 302: {
            $err16$sroa$0$0$$sroa_idx384$i = ((($tmp432$i)) + 4|0);
            $512 = $err16$sroa$0$0$$sroa_idx384$i;
            $513 = $512;
            $514 = HEAP32[$513>>2]|0;
            $515 = (($512) + 4)|0;
            $516 = $515;
            $517 = HEAP32[$516>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $514;$tmp35$sroa$29$0$ph$off32 = $517;
            break L38;
            break;
           }
           case 307: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 315: {
            $err17$sroa$0$0$$sroa_idx375$i = ((($tmp451$i)) + 4|0);
            $528 = $err17$sroa$0$0$$sroa_idx375$i;
            $529 = $528;
            $530 = HEAP32[$529>>2]|0;
            $531 = (($528) + 4)|0;
            $532 = $531;
            $533 = HEAP32[$532>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $530;$tmp35$sroa$29$0$ph$off32 = $533;
            break L38;
            break;
           }
           case 320: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 328: {
            $err18$sroa$0$0$$sroa_idx366$i = ((($tmp470$i)) + 4|0);
            $544 = $err18$sroa$0$0$$sroa_idx366$i;
            $545 = $544;
            $546 = HEAP32[$545>>2]|0;
            $547 = (($544) + 4)|0;
            $548 = $547;
            $549 = HEAP32[$548>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $546;$tmp35$sroa$29$0$ph$off32 = $549;
            break L38;
            break;
           }
           case 333: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 341: {
            $err19$sroa$0$0$$sroa_idx357$i = ((($tmp489$i)) + 4|0);
            $560 = $err19$sroa$0$0$$sroa_idx357$i;
            $561 = $560;
            $562 = HEAP32[$561>>2]|0;
            $563 = (($560) + 4)|0;
            $564 = $563;
            $565 = HEAP32[$564>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $562;$tmp35$sroa$29$0$ph$off32 = $565;
            break L38;
            break;
           }
           case 346: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 354: {
            $err20$sroa$0$0$$sroa_idx348$i = ((($tmp508$i)) + 4|0);
            $576 = $err20$sroa$0$0$$sroa_idx348$i;
            $577 = $576;
            $578 = HEAP32[$577>>2]|0;
            $579 = (($576) + 4)|0;
            $580 = $579;
            $581 = HEAP32[$580>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $578;$tmp35$sroa$29$0$ph$off32 = $581;
            break L38;
            break;
           }
           case 359: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 363: {
            $err21$sroa$0$0$$sroa_idx339$i = ((($tmp527$i)) + 4|0);
            $590 = $err21$sroa$0$0$$sroa_idx339$i;
            $591 = $590;
            $592 = HEAP32[$591>>2]|0;
            $593 = (($590) + 4)|0;
            $594 = $593;
            $595 = HEAP32[$594>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $592;$tmp35$sroa$29$0$ph$off32 = $595;
            break L38;
            break;
           }
           case 368: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,5,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
           case 370: {
            $err22$sroa$0$0$$sroa_idx330$i = ((($tmp544$i)) + 4|0);
            $600 = $err22$sroa$0$0$$sroa_idx330$i;
            $601 = $600;
            $602 = HEAP32[$601>>2]|0;
            $603 = (($600) + 4)|0;
            $604 = $603;
            $605 = HEAP32[$604>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $602;$tmp35$sroa$29$0$ph$off32 = $605;
            break L38;
            break;
           }
           case 376: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,0,$idx$0$i);
            // unreachable;
            break;
           }
           case 378: {
            $self$i$sroa$5$0$$sroa_idx1752$i = ((($tmp564$i)) + 8|0);
            $self$i$sroa$5$0$copyload$i = HEAP32[$self$i$sroa$5$0$$sroa_idx1752$i>>2]|0;
            $self$i$sroa$4$0$$sroa_idx1750$i = ((($tmp564$i)) + 4|0);
            $self$i$sroa$4$0$copyload$i = HEAP32[$self$i$sroa$4$0$$sroa_idx1750$i>>2]|0;
            $tmp35$sroa$29$0$ph$off0 = $self$i$sroa$4$0$copyload$i;$tmp35$sroa$29$0$ph$off32 = $self$i$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 383: {
            __ZN4core3str16slice_error_fail17hec153863008515e9E($rest$sroa$0$12460$i,$rest$sroa$82$12497$i,$idx$0$i,$rest$sroa$82$12497$i);
            // unreachable;
            break;
           }
          }
         } else {
          label = 59;
         }
        }
       } while(0);
       do {
        if ((label|0) == 59) {
         $142 = ((($2)) + 20|0);
         $143 = HEAP32[$142>>2]|0;
         FUNCTION_TABLE_viiii[$143 & 255]($tmp81$i,$1,$33,$self$sroa$6$0$copyload$i$i$i);
         $self$i930$sroa$0$0$copyload$i = HEAP32[$tmp81$i>>2]|0;
         $switch3$i931$i = ($self$i930$sroa$0$0$copyload$i|0)==(1);
         if ($switch3$i931$i) {
          $self$i930$sroa$5$0$$sroa_idx1757$i = ((($tmp81$i)) + 8|0);
          $self$i930$sroa$5$0$copyload$i = HEAP32[$self$i930$sroa$5$0$$sroa_idx1757$i>>2]|0;
          $self$i930$sroa$4$0$$sroa_idx1755$i = ((($tmp81$i)) + 4|0);
          $self$i930$sroa$4$0$copyload$i = HEAP32[$self$i930$sroa$4$0$$sroa_idx1755$i>>2]|0;
          $tmp35$sroa$29$0$ph$off0 = $self$i930$sroa$4$0$copyload$i;$tmp35$sroa$29$0$ph$off32 = $self$i930$sroa$5$0$copyload$i;
          break;
         } else {
          break L4;
         }
        }
       } while(0);
       HEAP32[$0>>2] = 1;
       $tmp0$sroa$0$0$$sroa_idx2$i76 = ((($0)) + 4|0);
       $620 = $tmp0$sroa$0$0$$sroa_idx2$i76;
       $621 = $620;
       HEAP32[$621>>2] = $tmp35$sroa$29$0$ph$off0;
       $622 = (($620) + 4)|0;
       $623 = $622;
       HEAP32[$623>>2] = $tmp35$sroa$29$0$ph$off32;
       break L1;
      }
     } else {
      label = 8;
     }
    }
   } while(0);
   do {
    if ((label|0) == 8) {
     HEAP32[$tmp47>>2] = 2532;
     $34 = ((($tmp47)) + 4|0);
     HEAP32[$34>>2] = 1;
     $tmp1$sroa$0$0$$sroa_idx$i95 = ((($tmp47)) + 8|0);
     HEAP32[$tmp1$sroa$0$0$$sroa_idx$i95>>2] = 0;
     $35 = ((($tmp47)) + 16|0);
     HEAP32[$35>>2] = 10460;
     $36 = ((($tmp47)) + 20|0);
     HEAP32[$36>>2] = 0;
     $37 = HEAP32[$25>>2]|0;
     FUNCTION_TABLE_viii[$37 & 255]($tmp45,$1,$tmp47);
     $self$i96$sroa$0$0$copyload = HEAP32[$tmp45>>2]|0;
     $switch3$i97 = ($self$i96$sroa$0$0$copyload|0)==(1);
     if ($switch3$i97) {
      $self$i96$sroa$5$0$$sroa_idx194 = ((($tmp45)) + 8|0);
      $self$i96$sroa$5$0$copyload = HEAP32[$self$i96$sroa$5$0$$sroa_idx194>>2]|0;
      $self$i96$sroa$4$0$$sroa_idx192 = ((($tmp45)) + 4|0);
      $self$i96$sroa$4$0$copyload = HEAP32[$self$i96$sroa$4$0$$sroa_idx192>>2]|0;
      HEAP32[$0>>2] = 1;
      $tmp0$sroa$0$0$$sroa_idx2$i = ((($0)) + 4|0);
      $624 = $tmp0$sroa$0$0$$sroa_idx2$i;
      $625 = $624;
      HEAP32[$625>>2] = $self$i96$sroa$4$0$copyload;
      $626 = (($624) + 4)|0;
      $627 = $626;
      HEAP32[$627>>2] = $self$i96$sroa$5$0$copyload;
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $618 = ((($2)) + 20|0);
   $619 = HEAP32[$618>>2]|0;
   FUNCTION_TABLE_viiii[$619 & 255]($0,$1,6227,1);
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN50__LT__BP_mut_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h14f66fede04084e7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $switch$i$i = 0, $tmp18$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp18$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 12|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (__ZN4core3fmt9Formatter9alternate17h6bcd8ef83c611da8E($1)|0);
 $12 = HEAP32[$1>>2]|0;
 if ($11) {
  $13 = $12 | 8;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$3>>2]|0;
  $switch$i$i = ($14|0)==(1);
  if ($switch$i$i) {
   $17 = $13;
  } else {
   HEAP32[$3>>2] = 1;
   $15 = ((($1)) + 16|0);
   HEAP32[$15>>2] = 10;
   $17 = $13;
  }
 } else {
  $17 = $12;
 }
 $16 = $17 | 4;
 HEAP32[$1>>2] = $16;
 HEAP32[$tmp18$i$i>>2] = $2;
 $18 = (__ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h64fa9034f3e0160fE($tmp18$i$i,$1)|0);
 $19 = $3;
 $20 = $19;
 HEAP32[$20>>2] = $6;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $9;
 HEAP32[$1>>2] = $10;
 STACKTOP = sp;return ($18|0);
}
function __ZN4core6result13unwrap_failed17h983d887dc946d6deE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 48|0;
 $error = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 5958;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP8[$error>>0] = $0;
 $2 = HEAP32[714]|0;
 $3 = HEAP32[(2860)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$tmp7>>2] = $4;
 $6 = ((($tmp7)) + 4|0);
 HEAP32[$6>>2] = (115);
 $7 = ((($tmp7)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($tmp7)) + 12|0);
 HEAP32[$8>>2] = (116);
 HEAP32[$tmp2>>2] = $2;
 $9 = ((($tmp2)) + 4|0);
 HEAP32[$9>>2] = $3;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($tmp2)) + 16|0);
 HEAP32[$10>>2] = $tmp7;
 $11 = ((($tmp2)) + 20|0);
 HEAP32[$11>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,2844);
 // unreachable;
}
function __ZN3std10sys_common7condvar7Condvar3new17h4dc7607d38a4fadcE($0) {
 $0 = $0|0;
 var $tmp0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp0 = sp;
 __ZN3std3sys7condvar7Condvar3new17h6b1d5f097b9841fbE($tmp0);
 dest=$0; src=$tmp0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key$018 = 0, $key$i = 0, $key$i9 = 0, $left_val$i = 0, $left_val$i10 = 0, $return$0 = 0, $right_val$i = 0, $right_val$i11 = 0, $success = 0, $tmp1$sroa$0$0$$sroa_idx$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i$i15 = 0, $tmp18$i = 0;
 var $tmp18$i13 = 0, $tmp23$i = 0, $tmp3$i = 0, $tmp3$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $key$i9 = sp + 92|0;
 $left_val$i10 = sp + 88|0;
 $right_val$i11 = sp + 84|0;
 $tmp3$i12 = sp + 80|0;
 $tmp18$i13 = sp + 40|0;
 $key$i = sp + 76|0;
 $left_val$i = sp + 72|0;
 $right_val$i = sp + 68|0;
 $tmp3$i = sp + 64|0;
 $tmp18$i = sp + 16|0;
 $tmp23$i = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$key$i>>2] = 0;
 $3 = (_pthread_key_create(($key$i|0),($2|0))|0);
 HEAP32[$tmp3$i>>2] = $3;
 HEAP32[$left_val$i>>2] = $tmp3$i;
 HEAP32[$right_val$i>>2] = 10456;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = $left_val$i;
  $6 = $right_val$i;
  HEAP32[$tmp23$i>>2] = $5;
  $7 = ((($tmp23$i)) + 4|0);
  HEAP32[$7>>2] = (117);
  $8 = ((($tmp23$i)) + 8|0);
  HEAP32[$8>>2] = $6;
  $9 = ((($tmp23$i)) + 12|0);
  HEAP32[$9>>2] = (117);
  HEAP32[$tmp18$i>>2] = 2540;
  $10 = ((($tmp18$i)) + 4|0);
  HEAP32[$10>>2] = 3;
  $tmp1$sroa$0$0$$sroa_idx$i$i = ((($tmp18$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i>>2] = 0;
  $11 = ((($tmp18$i)) + 16|0);
  HEAP32[$11>>2] = $tmp23$i;
  $12 = ((($tmp18$i)) + 20|0);
  HEAP32[$12>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h4bc23b829f3f0569E($tmp18$i,2564);
  // unreachable;
 }
 $13 = HEAP32[$key$i>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  HEAP32[$key$i9>>2] = 0;
  $16 = (_pthread_key_create(($key$i9|0),($15|0))|0);
  HEAP32[$tmp3$i12>>2] = $16;
  HEAP32[$left_val$i10>>2] = $tmp3$i12;
  HEAP32[$right_val$i11>>2] = 10456;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = $left_val$i10;
   $19 = $right_val$i11;
   HEAP32[$tmp23$i>>2] = $18;
   $20 = ((($tmp23$i)) + 4|0);
   HEAP32[$20>>2] = (117);
   $21 = ((($tmp23$i)) + 8|0);
   HEAP32[$21>>2] = $19;
   $22 = ((($tmp23$i)) + 12|0);
   HEAP32[$22>>2] = (117);
   HEAP32[$tmp18$i13>>2] = 2540;
   $23 = ((($tmp18$i13)) + 4|0);
   HEAP32[$23>>2] = 3;
   $tmp1$sroa$0$0$$sroa_idx$i$i15 = ((($tmp18$i13)) + 8|0);
   HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i15>>2] = 0;
   $24 = ((($tmp18$i13)) + 16|0);
   HEAP32[$24>>2] = $tmp23$i;
   $25 = ((($tmp18$i13)) + 20|0);
   HEAP32[$25>>2] = 2;
   __ZN3std9panicking15begin_panic_fmt17h4bc23b829f3f0569E($tmp18$i13,2564);
   // unreachable;
  }
  $26 = HEAP32[$key$i9>>2]|0;
  (_pthread_key_delete(0)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   __ZN3std9panicking11begin_panic17h23145ec831f26d17E_243();
   // unreachable;
  } else {
   $key$018 = $26;
  }
 } else {
  $key$018 = $13;
 }
 $28 = HEAP32[$0>>2]|0;if (($28|0) == 0) HEAP32[$0>>2] = $key$018;
 $success = ($28|0)==(0);
 if ($success) {
  $return$0 = $key$018;
  STACKTOP = sp;return ($return$0|0);
 }
 (_pthread_key_delete(($key$018|0))|0);
 $return$0 = $28;
 STACKTOP = sp;return ($return$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4b295a323119da67E_242($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h1dd29bef2ec747e8E($2,$1)|0);
 return ($3|0);
}
function __ZN3std9panicking11begin_panic17h23145ec831f26d17E_243() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rust_allocate(8,4)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  HEAP32[$0>>2] = 6336;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = 26;
  __ZN3std9panicking20rust_panic_with_hook17h078c87c7ade81a5eE($0,312,2576);
  // unreachable;
 }
}
function __ZN4drop17hb53e40539eb19692E_244($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h06b90f9153f183bbE_245($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-900289477);
 return -1653100559;
}
function __ZN3std3sys9backtrace7tracing3imp5write17h09a31f5b0098d01aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $cond = 0;
 var $cond$i$i = 0, $cx = 0, $or$cond = 0, $ret$sroa$0$0 = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$4$0$$sroa_idx101 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$5$0$$sroa_idx103 = 0, $self$i$sroa$5$0$copyload = 0, $switch3$i = 0, $switch4 = 0, $switch5$not = 0, $tmp0$sroa$0$0$$sroa_idx2$i = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp22$sroa$0$0$$sroa_idx = 0, $tmp22$sroa$4$0$$sroa_idx = 0, $tmp35$sroa$4$0$$sroa_idx98 = 0, $tmp5 = 0, $tmp7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $cx = sp + 40|0;
 $tmp5 = sp + 24|0;
 $tmp7 = sp;
 (_pthread_mutex_lock(((10368)|0))|0);
 HEAP32[$tmp7>>2] = 2588;
 $3 = ((($tmp7)) + 4|0);
 HEAP32[$3>>2] = 1;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp7)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $4 = ((($tmp7)) + 16|0);
 HEAP32[$4>>2] = 10460;
 $5 = ((($tmp7)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_viii[$7 & 255]($tmp5,$1,$tmp7);
 $self$i$sroa$0$0$copyload = HEAP32[$tmp5>>2]|0;
 $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
 if ($switch3$i) {
  $self$i$sroa$5$0$$sroa_idx103 = ((($tmp5)) + 8|0);
  $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx103>>2]|0;
  $self$i$sroa$4$0$$sroa_idx101 = ((($tmp5)) + 4|0);
  $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx101>>2]|0;
  HEAP32[$0>>2] = 1;
  $tmp0$sroa$0$0$$sroa_idx2$i = ((($0)) + 4|0);
  $8 = $tmp0$sroa$0$0$$sroa_idx2$i;
  $9 = $8;
  HEAP32[$9>>2] = $self$i$sroa$4$0$copyload;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $self$i$sroa$5$0$copyload;
  STACKTOP = sp;return;
 }
 HEAP32[$cx>>2] = 0;
 $12 = ((($cx)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($cx)) + 8|0);
 HEAP32[$13>>2] = $2;
 $tmp22$sroa$0$0$$sroa_idx = ((($cx)) + 12|0);
 HEAP32[$tmp22$sroa$0$0$$sroa_idx>>2] = 0;
 $tmp22$sroa$4$0$$sroa_idx = ((($cx)) + 16|0);
 $14 = (__Unwind_Backtrace((118|0),($cx|0))|0);
 $cond = ($14|0)==(0);
 $15 = HEAP32[$tmp22$sroa$0$0$$sroa_idx>>2]|0;
 $switch4 = ($15|0)==(1);
 $or$cond = $cond & $switch4;
 $16 = $tmp22$sroa$4$0$$sroa_idx;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $ret$sroa$0$0 = $or$cond&1;
 (_pthread_mutex_unlock(((10368)|0))|0);
 HEAP32[$0>>2] = $ret$sroa$0$0;
 $tmp35$sroa$4$0$$sroa_idx98 = ((($0)) + 4|0);
 $22 = $tmp35$sroa$4$0$$sroa_idx98;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[$tmp22$sroa$0$0$$sroa_idx>>2]|0;
 $switch5$not = ($26|0)!=(1);
 $brmerge = $or$cond | $switch5$not;
 if (!($brmerge)) {
  $27 = HEAP32[$tmp22$sroa$4$0$$sroa_idx>>2]|0;
  $cond$i$i = ($27|0)==(1);
  if ($cond$i$i) {
   $28 = ((($cx)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($29)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vi[$34 & 255]($31);
   $35 = HEAP32[$32>>2]|0;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = ((($35)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    ___rust_deallocate($31,$37,$40);
   }
   ___rust_deallocate($29,12,4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN3std3sys9backtrace7tracing3imp5write8trace_fn17he3bb99171700a195E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i87 = 0, $cond$i86 = 0;
 var $e$sroa$0$0$$sroa_idx68 = 0, $e1$sroa$0$0$$sroa_idx60 = 0, $ip$0 = 0, $ip$0$v = 0, $ip_before_insn = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $return$0 = 0, $return$1 = 0, $switch$i = 0, $switch8 = 0, $switch9 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp29 = 0, $tmp31 = 0, $tmp46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $ip_before_insn = sp + 52|0;
 $tmp29 = sp + 40|0;
 $tmp31 = sp + 16|0;
 $tmp46 = sp;
 HEAP32[$ip_before_insn>>2] = 0;
 $2 = (__Unwind_GetIPInfo(($0|0),($ip_before_insn|0))|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$ip_before_insn>>2]|0;
 $5 = ($4|0)==(0);
 $or$cond = $3 & $5;
 $6 = $or$cond << 31 >> 31;
 $ip$0$v = (($6) + ($2))|0;
 $ip$0 = $ip$0$v;
 $7 = (__Unwind_FindEnclosingFunction(($ip$0|0))|0);
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$1>>2] = $9;
 $10 = ($9|0)<(1);
 do {
  if ($10) {
   $return$1 = 0;
  } else {
   $11 = ($9|0)>(100);
   if ($11) {
    $12 = ((($1)) + 4|0);
    $13 = ((($1)) + 8|0);
    $14 = HEAP32[$12>>2]|0;
    $15 = HEAP32[$13>>2]|0;
    HEAP32[$tmp31>>2] = 2596;
    $16 = ((($tmp31)) + 4|0);
    HEAP32[$16>>2] = 1;
    $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp31)) + 8|0);
    HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
    $17 = ((($tmp31)) + 16|0);
    HEAP32[$17>>2] = 10460;
    $18 = ((($tmp31)) + 20|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($15)) + 24|0);
    $20 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_viii[$20 & 255]($tmp29,$14,$tmp31);
    $21 = HEAP32[$tmp29>>2]|0;
    $switch8 = ($21|0)==(1);
    if ($switch8) {
     $e$sroa$0$0$$sroa_idx68 = ((($tmp29)) + 4|0);
     $24 = $e$sroa$0$0$$sroa_idx68;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $27 = (($24) + 4)|0;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($1)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $cond$i = ($31|0)==(1);
     $32 = ((($1)) + 16|0);
     if ($cond$i) {
      $33 = HEAP32[$32>>2]|0;
      $cond$i$i$i = ($33|0)==(1);
      if ($cond$i$i$i) {
       $34 = ((($1)) + 20|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ((($35)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ((($35)) + 8|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = HEAP32[$39>>2]|0;
       __THREW__ = 0;
       invoke_vi($40|0,($37|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        $92 = ___cxa_find_matching_catch_2()|0;
        $93 = tempRet0;
        HEAP32[$30>>2] = 1;
        $94 = $32;
        $95 = $94;
        HEAP32[$95>>2] = $26;
        $96 = (($94) + 4)|0;
        $97 = $96;
        HEAP32[$97>>2] = $29;
        $personalityslot$sroa$0$0 = $92;$personalityslot$sroa$6$0 = $93;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $43 = HEAP32[$38>>2]|0;
       $44 = ((($43)) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)==(0);
       if (!($46)) {
        $47 = ((($43)) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        ___rust_deallocate($37,$45,$48);
       }
       ___rust_deallocate($35,12,4);
      }
     }
     HEAP32[$30>>2] = 1;
     $49 = $32;
     $50 = $49;
     HEAP32[$50>>2] = $26;
     $51 = (($49) + 4)|0;
     $52 = $51;
     HEAP32[$52>>2] = $29;
    }
    $return$1 = 9;
    break;
   }
   $22 = ((($1)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $switch$i = ($23|0)==(1);
   if ($switch$i) {
    $return$1 = 9;
   } else {
    $53 = ((($1)) + 4|0);
    $54 = ((($1)) + 8|0);
    $55 = HEAP32[$53>>2]|0;
    $56 = HEAP32[$54>>2]|0;
    __ZN3std3sys9backtrace8printing3imp5print17h93686ab3d5c84b5dE($tmp46,$55,$56,$9,$ip$0,$7);
    $57 = HEAP32[$tmp46>>2]|0;
    $switch9 = ($57|0)==(1);
    if ($switch9) {
     $e1$sroa$0$0$$sroa_idx60 = ((($tmp46)) + 4|0);
     $58 = $e1$sroa$0$0$$sroa_idx60;
     $59 = $58;
     $60 = HEAP32[$59>>2]|0;
     $61 = (($58) + 4)|0;
     $62 = $61;
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[$22>>2]|0;
     $cond$i86 = ($64|0)==(1);
     $65 = ((($1)) + 16|0);
     if ($cond$i86) {
      $66 = HEAP32[$65>>2]|0;
      $cond$i$i$i87 = ($66|0)==(1);
      if ($cond$i$i$i87) {
       $67 = ((($1)) + 20|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($68)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($68)) + 8|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       invoke_vi($73|0,($70|0));
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        $86 = ___cxa_find_matching_catch_2()|0;
        $87 = tempRet0;
        HEAP32[$22>>2] = 1;
        $88 = $65;
        $89 = $88;
        HEAP32[$89>>2] = $60;
        $90 = (($88) + 4)|0;
        $91 = $90;
        HEAP32[$91>>2] = $63;
        $personalityslot$sroa$0$0 = $86;$personalityslot$sroa$6$0 = $87;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $76 = HEAP32[$71>>2]|0;
       $77 = ((($76)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==(0);
       if (!($79)) {
        $80 = ((($76)) + 8|0);
        $81 = HEAP32[$80>>2]|0;
        ___rust_deallocate($70,$78,$81);
       }
       ___rust_deallocate($68,12,4);
      }
     }
     HEAP32[$22>>2] = 1;
     $82 = $65;
     $83 = $82;
     HEAP32[$83>>2] = $60;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $63;
    }
    $return$0 = 0;
    STACKTOP = sp;return ($return$0|0);
   }
  }
 } while(0);
 $return$0 = $return$1;
 STACKTOP = sp;return ($return$0|0);
}
function __ZN3std3sys5mutex5Mutex3new17hc5931bc70631e930E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[(10392)>>2]|0;HEAP32[$0+4>>2]=HEAP32[(10392)+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[(10392)+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[(10392)+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[(10392)+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[(10392)+20>>2]|0;
 return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_420($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN3std6thread6Thread3new17h3e967f9e7138a86eE($0) {
 $0 = $0|0;
 var $$fca$0$0$gep = 0, $$fca$0$0$load = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attr$i$i$i = 0, $cname$sroa$0$0 = 0;
 var $cname$sroa$5$0 = 0, $data$i$sroa$0$0$$sroa_idx = 0, $data$i$sroa$10$0$$sroa_idx = 0, $data$i$sroa$4$0$$sroa_idx = 0, $data$i$sroa$5$0$$sroa_idx = 0, $data$i$sroa$6$0$$sroa_raw_idx = 0, $data$i$sroa$7$0$$sroa_raw_idx = 0, $data$i$sroa$9$0$$sroa_idx = 0, $e$sroa$4$0$$sroa_idx23$i$i$i = 0, $e$sroa$5$0$$sroa_idx25$i$i$i = 0, $e$sroa$6$0$$sroa_idx27$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $name$sroa$0$sroa$0$0$copyload = 0, $name$sroa$0$sroa$4$0$copyload = 0, $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx74 = 0, $name$sroa$0$sroa$5$0$copyload = 0, $name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast$sroa_idx76 = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0;
 var $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$0$1$ph = 0, $personalityslot$sroa$6$0 = 0, $personalityslot$sroa$6$0$i = 0, $personalityslot$sroa$6$1$ph = 0, $self$sroa$0$0$copyload$i$i$i = 0, $self$sroa$12$0$$sroa_idx16$i$i$i = 0, $self$sroa$12$0$copyload$i$i$i = 0, $self$sroa$13$0$$sroa_idx19$i$i$i = 0, $self$sroa$13$0$copyload$i$i$i = 0, $self$sroa$6$0$$sroa_idx8$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i = 0, $self$sroa$9$0$$sroa_idx11$i$i$i = 0, $self$sroa$9$0$copyload$i$i$i = 0, $switch3$i$i$i = 0, $switch3tmp$i = 0, $switchtmp$i = 0, $tmp0$i$i = 0, $tmp1$i$i$i = 0, $tmp2$i$i$i = 0;
 var $tmp3$sroa$0$sroa$4$0$tmp3$sroa$0$0$$sroa_cast$sroa_idx73$i = 0, $tmp3$sroa$0$sroa$5$0$tmp3$sroa$0$0$$sroa_cast$sroa_idx75$i = 0, $tmp4$i$i$i = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $attr$i$i$i = sp + 80|0;
 $tmp4$i$i$i = sp + 64|0;
 $tmp1$i$i$i = sp + 48|0;
 $tmp2$i$i$i = sp + 32|0;
 $tmp0$i$i = sp + 8|0;
 $tmp_ret = sp;
 $name$sroa$0$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $switch3tmp$i = ($name$sroa$0$sroa$0$0$copyload|0)==(0|0);
 L1: do {
  if ($switch3tmp$i) {
   $cname$sroa$0$0 = 0;$cname$sroa$5$0 = 0;
  } else {
   $name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast$sroa_idx76 = ((($0)) + 8|0);
   $name$sroa$0$sroa$5$0$copyload = HEAP32[$name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast$sroa_idx76>>2]|0;
   $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx74 = ((($0)) + 4|0);
   $name$sroa$0$sroa$4$0$copyload = HEAP32[$name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx74>>2]|0;
   HEAP32[$tmp2$i$i$i>>2] = $name$sroa$0$sroa$0$0$copyload;
   $tmp3$sroa$0$sroa$4$0$tmp3$sroa$0$0$$sroa_cast$sroa_idx73$i = ((($tmp2$i$i$i)) + 4|0);
   HEAP32[$tmp3$sroa$0$sroa$4$0$tmp3$sroa$0$0$$sroa_cast$sroa_idx73$i>>2] = $name$sroa$0$sroa$4$0$copyload;
   $tmp3$sroa$0$sroa$5$0$tmp3$sroa$0$0$$sroa_cast$sroa_idx75$i = ((($tmp2$i$i$i)) + 8|0);
   HEAP32[$tmp3$sroa$0$sroa$5$0$tmp3$sroa$0$0$$sroa_cast$sroa_idx75$i>>2] = $name$sroa$0$sroa$5$0$copyload;
   __THREW__ = 0;
   invoke_vii(119,($tmp1$i$i$i|0),($tmp2$i$i$i|0));
   $1 = __THREW__; __THREW__ = 0;
   $2 = $1&1;
   do {
    if (!($2)) {
     __THREW__ = 0;
     invoke_vii(120,($tmp0$i$i|0),($tmp1$i$i$i|0));
     $3 = __THREW__; __THREW__ = 0;
     $4 = $3&1;
     if (!($4)) {
      $self$sroa$0$0$copyload$i$i$i = HEAP32[$tmp0$i$i>>2]|0;
      $self$sroa$6$0$$sroa_idx8$i$i$i = ((($tmp0$i$i)) + 4|0);
      $self$sroa$6$0$copyload$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx8$i$i$i>>2]|0;
      $self$sroa$9$0$$sroa_idx11$i$i$i = ((($tmp0$i$i)) + 8|0);
      $self$sroa$9$0$copyload$i$i$i = HEAP32[$self$sroa$9$0$$sroa_idx11$i$i$i>>2]|0;
      $switch3$i$i$i = ($self$sroa$0$0$copyload$i$i$i|0)==(1);
      if ($switch3$i$i$i) {
       $self$sroa$13$0$$sroa_idx19$i$i$i = ((($tmp0$i$i)) + 16|0);
       $self$sroa$13$0$copyload$i$i$i = HEAP32[$self$sroa$13$0$$sroa_idx19$i$i$i>>2]|0;
       $self$sroa$12$0$$sroa_idx16$i$i$i = ((($tmp0$i$i)) + 12|0);
       $self$sroa$12$0$copyload$i$i$i = HEAP32[$self$sroa$12$0$$sroa_idx16$i$i$i>>2]|0;
       HEAP32[$tmp4$i$i$i>>2] = $self$sroa$6$0$copyload$i$i$i;
       $e$sroa$4$0$$sroa_idx23$i$i$i = ((($tmp4$i$i$i)) + 4|0);
       HEAP32[$e$sroa$4$0$$sroa_idx23$i$i$i>>2] = $self$sroa$9$0$copyload$i$i$i;
       $e$sroa$5$0$$sroa_idx25$i$i$i = ((($tmp4$i$i$i)) + 8|0);
       HEAP32[$e$sroa$5$0$$sroa_idx25$i$i$i>>2] = $self$sroa$12$0$copyload$i$i$i;
       $e$sroa$6$0$$sroa_idx27$i$i$i = ((($tmp4$i$i$i)) + 12|0);
       HEAP32[$e$sroa$6$0$$sroa_idx27$i$i$i>>2] = $self$sroa$13$0$copyload$i$i$i;
       __THREW__ = 0;
       invoke_vi(121,($tmp4$i$i$i|0));
       $5 = __THREW__; __THREW__ = 0;
       break;
      } else {
       $cname$sroa$0$0 = $self$sroa$6$0$copyload$i$i$i;$cname$sroa$5$0 = $self$sroa$9$0$copyload$i$i$i;
       break L1;
      }
     }
    }
   } while(0);
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$6$0 = $36;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $6 = (___rust_allocate(24,8)|0);
 $7 = ($6|0)==(0|0);
 L12: do {
  if ($7) {
   __THREW__ = 0;
   invoke_v(72);
   $8 = __THREW__; __THREW__ = 0;
   $9 = ___cxa_find_matching_catch_2()|0;
   $10 = tempRet0;
   $eh$lpad$body$index2Z2D = $10;$eh$lpad$body$indexZ2D = $9;
   label = 23;
  } else {
   __THREW__ = 0;
   invoke_vi(122,($6|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   do {
    if ($12) {
     $16 = ___cxa_find_matching_catch_2()|0;
     $17 = tempRet0;
     ___rust_deallocate($6,24,8);
     $personalityslot$sroa$0$0$i = $16;$personalityslot$sroa$6$0$i = $17;
    } else {
     __THREW__ = 0;
     $13 = (invoke_i(123)|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      $18 = ___cxa_find_matching_catch_2()|0;
      $19 = tempRet0;
      ___rust_deallocate($6,24,8);
      $personalityslot$sroa$0$0$i = $18;$personalityslot$sroa$6$0$i = $19;
      break;
     }
     $20 = $6;
     HEAP32[$attr$i$i$i>>2] = 0;
     (_pthread_mutexattr_init(($attr$i$i$i|0))|0);
     (_pthread_mutexattr_settype(($attr$i$i$i|0),0)|0);
     (_pthread_mutex_init(($6|0),($attr$i$i$i|0))|0);
     (_pthread_mutexattr_destroy(($attr$i$i$i|0))|0);
     __THREW__ = 0;
     invoke_vi(124,($tmp_ret|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $33 = ___cxa_find_matching_catch_2()|0;
      $34 = tempRet0;
      (_pthread_mutex_destroy(($6|0))|0);
      ___rust_deallocate($6,24,8);
      $personalityslot$sroa$0$1$ph = $33;$personalityslot$sroa$6$1$ph = $34;
      break L12;
     }
     $23 = HEAP32[$tmp_ret>>2]|0;
     $$fca$0$0$gep = ((($tmp_ret)) + 4|0);
     $$fca$0$0$load = HEAP32[$$fca$0$0$gep>>2]|0;
     $24 = (___rust_allocate(32,4)|0);
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP32[$24>>2] = 1;
      $29 = ((($24)) + 4|0);
      HEAP32[$29>>2] = 1;
      $data$i$sroa$0$0$$sroa_idx = ((($24)) + 8|0);
      HEAP32[$data$i$sroa$0$0$$sroa_idx>>2] = $cname$sroa$0$0;
      $data$i$sroa$4$0$$sroa_idx = ((($24)) + 12|0);
      HEAP32[$data$i$sroa$4$0$$sroa_idx>>2] = $cname$sroa$5$0;
      $data$i$sroa$5$0$$sroa_idx = ((($24)) + 16|0);
      HEAP32[$data$i$sroa$5$0$$sroa_idx>>2] = $20;
      $data$i$sroa$6$0$$sroa_raw_idx = ((($24)) + 20|0);
      HEAP8[$data$i$sroa$6$0$$sroa_raw_idx>>0] = $13;
      $data$i$sroa$7$0$$sroa_raw_idx = ((($24)) + 21|0);
      HEAP8[$data$i$sroa$7$0$$sroa_raw_idx>>0] = 0;
      $data$i$sroa$9$0$$sroa_idx = ((($24)) + 24|0);
      HEAP32[$data$i$sroa$9$0$$sroa_idx>>2] = $23;
      $data$i$sroa$10$0$$sroa_idx = ((($24)) + 28|0);
      HEAP32[$data$i$sroa$10$0$$sroa_idx>>2] = $$fca$0$0$load;
      $30 = $24;
      STACKTOP = sp;return ($30|0);
     }
     __THREW__ = 0;
     invoke_v(72);
     $26 = __THREW__; __THREW__ = 0;
     $27 = ___cxa_find_matching_catch_2()|0;
     $28 = tempRet0;
     $personalityslot$sroa$0$0 = $27;$personalityslot$sroa$6$0 = $28;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   } while(0);
   $eh$lpad$body$index2Z2D = $personalityslot$sroa$6$0$i;$eh$lpad$body$indexZ2D = $personalityslot$sroa$0$0$i;
   label = 23;
  }
 } while(0);
 if ((label|0) == 23) {
  $personalityslot$sroa$0$1$ph = $eh$lpad$body$indexZ2D;$personalityslot$sroa$6$1$ph = $eh$lpad$body$index2Z2D;
 }
 $switchtmp$i = ($cname$sroa$0$0|0)==(0);
 $31 = ($cname$sroa$5$0|0)==(0);
 $or$cond = $switchtmp$i | $31;
 if ($or$cond) {
  $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $32 = $cname$sroa$0$0;
 ___rust_deallocate($32,$cname$sroa$5$0,1);
 $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core6result13unwrap_failed17h0599078157cc6e6bE_423($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0;
 var $not$$i$i$i$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 56|0;
 $error = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 6481;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 47;
 ;HEAP32[$error>>2]=HEAP32[$0>>2]|0;HEAP32[$error+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$0+12>>2]|0;
 $2 = HEAP32[714]|0;
 $3 = HEAP32[(2860)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$tmp7>>2] = $4;
 $6 = ((($tmp7)) + 4|0);
 HEAP32[$6>>2] = (125);
 $7 = ((($tmp7)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($tmp7)) + 12|0);
 HEAP32[$8>>2] = (67);
 HEAP32[$tmp2>>2] = $2;
 $9 = ((($tmp2)) + 4|0);
 HEAP32[$9>>2] = $3;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($tmp2)) + 16|0);
 HEAP32[$10>>2] = $tmp7;
 $11 = ((($tmp2)) + 20|0);
 HEAP32[$11>>2] = 2;
 __THREW__ = 0;
 invoke_vii(68,($tmp2|0),(2844|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 $15 = ((($error)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $not$$i$i$i$i$i = ($16|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($13|0);
  // unreachable;
 }
 $17 = ((($error)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 ___rust_deallocate($18,$16,1);
 ___resumeException($13|0);
 // unreachable;
}
function __ZN3std6thread6Thread4name17hfa4698c20da3d899E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i = 0, $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $switch2tmp$i = 0, $switchtmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $switchtmp$i$i = ($6|0)==(0|0);
 if ($switchtmp$i$i) {
  $$sink$i = 0;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 }
 __ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17h28f74963dd69ab05E($3,$5);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index2 = ((($3)) + 4|0);
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
 $switch2tmp$i = ($$sreg$field|0)==(0|0);
 if ($switch2tmp$i) {
  $$sink$i = 0;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 }
 __ZN3std3ffi5c_str4CStr8to_bytes17h354e9e9265613016E($2,$$sreg$field,$$sreg$field3);
 $$sreg1$field = HEAP32[$2>>2]|0;
 $$sreg1$index5 = ((($2)) + 4|0);
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $$sreg1$field6;
 $$sink$i = $$sreg1$field;
 HEAP32[$0>>2] = $$sink$i;
 STACKTOP = sp;return;
}
function __ZN4drop17hb53e40539eb19692E_428($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN79__LT_std__thread__Thread_u20_as_u20_std__sys_common__thread_info__NewThread_GT_3new17hda57180141716b21E($0) {
 $0 = $0|0;
 var $1 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp1 = sp;
 ;HEAP32[$tmp1>>2]=HEAP32[$0>>2]|0;HEAP32[$tmp1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$tmp1+8>>2]=HEAP32[$0+8>>2]|0;
 $1 = (__ZN3std6thread6Thread3new17h3e967f9e7138a86eE($tmp1)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN3std9panicking11begin_panic17h23145ec831f26d17E_432($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rust_allocate(8,4)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 } else {
  HEAP32[$3>>2] = $0;
  $5 = ((($3)) + 4|0);
  HEAP32[$5>>2] = $1;
  __ZN3std9panicking20rust_panic_with_hook17h078c87c7ade81a5eE($3,328,$2);
  // unreachable;
 }
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h06b90f9153f183bbE_433($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-900289477);
 return -1653100559;
}
function __ZN3std3sys2os5errno17ha307a6ea5731d212E() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN3std3sys2os12error_string17hde04785399ecd97dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf = 0, $buf8 = 0, $scevgep = 0, $scevgep4 = 0, $scevgep5 = 0, $scevgep56 = 0, $scevgep9 = 0;
 var $scevgep910 = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx19$i = 0, $self$sroa$6$0$copyload$i = 0, $self$sroa$8$0$$sroa_idx21$i = 0, $self$sroa$8$0$copyload$i = 0, $switch2$i = 0, $tmp17 = 0, $umax = 0, $umax7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $2 = sp + 16|0;
 $3 = sp;
 $buf = sp + 40|0;
 $buf8 = $buf;
 $tmp17 = sp + 24|0;
 $scevgep = ((($buf)) + 128|0);
 $scevgep4 = $scevgep;
 $scevgep5 = ((($buf)) + 1|0);
 $scevgep56 = $scevgep5;
 $4 = ($scevgep4>>>0)>($scevgep56>>>0);
 $umax = $4 ? $scevgep4 : $scevgep56;
 $umax7 = $umax;
 $5 = (0 - ($buf8))|0;
 $scevgep9 = (($umax7) + ($5)|0);
 $scevgep910 = $scevgep9;
 _memset(($buf|0),0,($scevgep910|0))|0;
 $6 = (_strerror_r($1,$buf,128)|0);
 $7 = ($6|0)<(0);
 if ($7) {
  __ZN3std9panicking11begin_panic17h23145ec831f26d17E_432(6528,18,2604);
  // unreachable;
 }
 __ZN3std3ffi5c_str4CStr8from_ptr17hccf32a6a0d5018c7E($3,$buf);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index2 = ((($3)) + 4|0);
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
 __ZN3std3ffi5c_str4CStr8to_bytes17h354e9e9265613016E($2,$$sreg$field,$$sreg$field3);
 $$sreg1$field = HEAP32[$2>>2]|0;
 $$sreg1$index5 = ((($2)) + 4|0);
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
 __ZN4core3str9from_utf817h62275e07c46015c9E($tmp17,$$sreg1$field,$$sreg1$field6);
 $self$sroa$0$0$copyload$i = HEAP32[$tmp17>>2]|0;
 $self$sroa$6$0$$sroa_idx19$i = ((($tmp17)) + 4|0);
 $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx19$i>>2]|0;
 $switch2$i = ($self$sroa$0$0$copyload$i|0)==(0);
 if ($switch2$i) {
  $self$sroa$8$0$$sroa_idx21$i = ((($tmp17)) + 8|0);
  $self$sroa$8$0$copyload$i = HEAP32[$self$sroa$8$0$$sroa_idx21$i>>2]|0;
  $8 = $self$sroa$6$0$copyload$i;
  __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h71b09002dec7385eE($0,$8,$self$sroa$8$0$copyload$i);
  STACKTOP = sp;return;
 } else {
  __ZN4core6result13unwrap_failed17hf692d80f60a15644E_575($self$sroa$6$0$copyload$i);
  // unreachable;
 }
}
function __ZN4core6result13unwrap_failed17hf692d80f60a15644E_575($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $msg = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 48|0;
 $error = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$msg>>2] = 6438;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP32[$error>>2] = $0;
 $2 = HEAP32[714]|0;
 $3 = HEAP32[(2860)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$tmp7>>2] = $4;
 $6 = ((($tmp7)) + 4|0);
 HEAP32[$6>>2] = (125);
 $7 = ((($tmp7)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($tmp7)) + 12|0);
 HEAP32[$8>>2] = (126);
 HEAP32[$tmp2>>2] = $2;
 $9 = ((($tmp2)) + 4|0);
 HEAP32[$9>>2] = $3;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($tmp2)) + 16|0);
 HEAP32[$10>>2] = $tmp7;
 $11 = ((($tmp2)) + 20|0);
 HEAP32[$11>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,2844);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h58182ad79fce4c6dE_578($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$i = 0, $return$0$sroa$speculated$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(6571,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $return$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($return$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17hf2309629b2721756E(2676);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($return$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$return$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $return$0$sroa$speculated$i$i$i;
 return;
}
function __ZN3std3ffi5c_str7CString3new17hba318d0e49c1dae4E_579($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $tmp1 = 0;
 var $vector$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vector$i$i$i$i = sp + 16|0;
 $tmp1 = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17hf2309629b2721756E(2676);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17ha2998ef21a53f982E();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i$i>>2] = $8;
 $9 = ((($vector$i$i$i$i)) + 4|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($vector$i$i$i$i)) + 8|0);
 HEAP32[$10>>2] = 0;
 __THREW__ = 0;
 invoke_vii(127,($vector$i$i$i$i|0),($2|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $16 = HEAP32[$9>>2]|0;
  $not$$i$i$i$i$i$i$i$i = ($16|0)==(0);
  if ($not$$i$i$i$i$i$i$i$i) {
   ___resumeException($4|0);
   // unreachable;
  }
  $17 = HEAP32[$vector$i$i$i$i>>2]|0;
  ___rust_deallocate($17,$16,1);
  ___resumeException($4|0);
  // unreachable;
 } else {
  if ($5) {
   ;HEAP32[$tmp1>>2]=HEAP32[$vector$i$i$i$i>>2]|0;HEAP32[$tmp1+4>>2]=HEAP32[$vector$i$i$i$i+4>>2]|0;HEAP32[$tmp1+8>>2]=HEAP32[$vector$i$i$i$i+8>>2]|0;
   __ZN3std3ffi5c_str7CString4_new17hdb108839b3ef2883E($0,$tmp1);
   STACKTOP = sp;return;
  }
  $$pre$i$i$i$i$i = HEAP32[$10>>2]|0;
  $13 = HEAP32[$vector$i$i$i$i>>2]|0;
  $scevgep$i$i$i$i = (($13) + ($$pre$i$i$i$i$i)|0);
  _memcpy(($scevgep$i$i$i$i|0),($1|0),($2|0))|0;
  $14 = (($$pre$i$i$i$i$i) + ($2))|0;
  HEAP32[$10>>2] = $14;
  ;HEAP32[$tmp1>>2]=HEAP32[$vector$i$i$i$i>>2]|0;HEAP32[$tmp1+4>>2]=HEAP32[$vector$i$i$i$i+4>>2]|0;HEAP32[$tmp1+8>>2]=HEAP32[$vector$i$i$i$i+8>>2]|0;
  __ZN3std3ffi5c_str7CString4_new17hdb108839b3ef2883E($0,$tmp1);
  STACKTOP = sp;return;
 }
}
function __ZN3std3sys2os6getenv17hebb75126b85907c0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i$i = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $$sreg1$field = 0, $$sreg1$field8 = 0, $$sreg1$index7 = 0, $$sreg2$field = 0, $$sreg2$field11 = 0, $$sreg2$index10 = 0, $$sreg3$field = 0, $$sreg3$field14 = 0, $$sreg3$index13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $err$sroa$5$0$$sroa_idx106 = 0;
 var $err$sroa$6$0$$sroa_idx109 = 0, $err$sroa$7$0$$sroa_idx112 = 0, $k = 0, $k$sroa_raw_idx = 0, $lpad$thr_comm$sink$index = 0, $lpad$thr_comm$sink$index19 = 0, $not$$i$i$i$i$i$i = 0, $personalityslot$sroa$0$1126 = 0, $personalityslot$sroa$7$1124 = 0, $ptr$0$i$i$i$i = 0, $ret$sroa$0$0 = 0, $ret$sroa$0$0$copyload90 = 0, $ret$sroa$6$0 = 0, $ret$sroa$6$0$$sroa_idx93 = 0, $ret$sroa$6$0$copyload94 = 0, $ret$sroa$7$0 = 0, $ret$sroa$7$0$$sroa_idx97 = 0, $ret$sroa$7$0$copyload98 = 0, $scevgep$i$i = 0, $self$i$sroa$0$0$copyload = 0;
 var $self$i$sroa$4$0$$sroa_idx116 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$6$0$$sroa_idx118 = 0, $self$i$sroa$6$0$copyload = 0, $self$i$sroa$8$0$$sroa_idx120 = 0, $self$i$sroa$8$0$copyload = 0, $self$i$sroa$9$0$$sroa_idx122 = 0, $self$i$sroa$9$0$copyload = 0, $switch3$i = 0, $tmp0$sroa$0$0$$sroa_idx2$i = 0, $tmp19 = 0, $tmp2 = 0, $tmp20 = 0, $tmp29$sroa$0$sroa$0$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx = 0, $tmp29$sroa$0$sroa$4$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx100 = 0, $tmp29$sroa$0$sroa$5$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx102 = 0, $tmp7 = 0, $tmp8 = 0, $vector$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp + 48|0;
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $vector$i$i = sp + 144|0;
 $k = sp + 136|0;
 $tmp2 = sp + 112|0;
 $tmp7 = sp + 104|0;
 $tmp8 = sp + 88|0;
 $tmp19 = sp + 72|0;
 $tmp20 = sp + 56|0;
 __THREW__ = 0;
 invoke_viii(128,($6|0),($1|0),($2|0));
 $$sreg$field = HEAP32[$6>>2]|0;
 $$sreg$index4 = ((($6)) + 4|0);
 $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_viii(129,($tmp2|0),($$sreg$field|0),($$sreg$field5|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $self$i$sroa$0$0$copyload = HEAP32[$tmp2>>2]|0;
   $self$i$sroa$4$0$$sroa_idx116 = ((($tmp2)) + 4|0);
   $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx116>>2]|0;
   $self$i$sroa$6$0$$sroa_idx118 = ((($tmp2)) + 8|0);
   $self$i$sroa$6$0$copyload = HEAP32[$self$i$sroa$6$0$$sroa_idx118>>2]|0;
   $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
   if ($switch3$i) {
    $self$i$sroa$9$0$$sroa_idx122 = ((($tmp2)) + 16|0);
    $self$i$sroa$9$0$copyload = HEAP32[$self$i$sroa$9$0$$sroa_idx122>>2]|0;
    $self$i$sroa$8$0$$sroa_idx120 = ((($tmp2)) + 12|0);
    $self$i$sroa$8$0$copyload = HEAP32[$self$i$sroa$8$0$$sroa_idx120>>2]|0;
    HEAP32[$tmp8>>2] = $self$i$sroa$4$0$copyload;
    $err$sroa$5$0$$sroa_idx106 = ((($tmp8)) + 4|0);
    HEAP32[$err$sroa$5$0$$sroa_idx106>>2] = $self$i$sroa$6$0$copyload;
    $err$sroa$6$0$$sroa_idx109 = ((($tmp8)) + 8|0);
    HEAP32[$err$sroa$6$0$$sroa_idx109>>2] = $self$i$sroa$8$0$copyload;
    $err$sroa$7$0$$sroa_idx112 = ((($tmp8)) + 12|0);
    HEAP32[$err$sroa$7$0$$sroa_idx112>>2] = $self$i$sroa$9$0$copyload;
    __THREW__ = 0;
    invoke_vii(130,($tmp7|0),($tmp8|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $65 = ___cxa_find_matching_catch_2()|0;
     $66 = tempRet0;
     $personalityslot$sroa$0$1126 = $65;$personalityslot$sroa$7$1124 = $66;
     ___resumeException($personalityslot$sroa$0$1126|0);
     // unreachable;
    } else {
     $17 = $tmp7;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = (($17) + 4)|0;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     HEAP32[$0>>2] = 1;
     $tmp0$sroa$0$0$$sroa_idx2$i = ((($0)) + 4|0);
     $23 = $tmp0$sroa$0$0$$sroa_idx2$i;
     $24 = $23;
     HEAP32[$24>>2] = $19;
     $25 = (($23) + 4)|0;
     $26 = $25;
     HEAP32[$26>>2] = $22;
     STACKTOP = sp;return;
    }
   }
   HEAP32[$k>>2] = $self$i$sroa$4$0$copyload;
   $k$sroa_raw_idx = ((($k)) + 4|0);
   HEAP32[$k$sroa_raw_idx>>2] = $self$i$sroa$6$0$copyload;
   (_pthread_mutex_lock(((10416)|0))|0);
   __THREW__ = 0;
   invoke_vii(131,($5|0),($k|0));
   $$sreg1$field = HEAP32[$5>>2]|0;
   $$sreg1$index7 = ((($5)) + 4|0);
   $$sreg1$field8 = HEAP32[$$sreg1$index7>>2]|0;
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   L12: do {
    if ($28) {
     label = 3;
    } else {
     __THREW__ = 0;
     $29 = (invoke_iii(132,($$sreg1$field|0),($$sreg1$field8|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      label = 3;
     } else {
      $32 = (_getenv(($29|0))|0);
      $33 = ($32|0)==(0|0);
      L15: do {
       if ($33) {
        $ret$sroa$0$0 = 0;$ret$sroa$6$0 = 0;$ret$sroa$7$0 = 0;
       } else {
        __THREW__ = 0;
        invoke_vii(133,($4|0),($32|0));
        $$sreg2$field = HEAP32[$4>>2]|0;
        $$sreg2$index10 = ((($4)) + 4|0);
        $$sreg2$field11 = HEAP32[$$sreg2$index10>>2]|0;
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        do {
         if (!($35)) {
          __THREW__ = 0;
          invoke_viii(134,($3|0),($$sreg2$field|0),($$sreg2$field11|0));
          $$sreg3$field = HEAP32[$3>>2]|0;
          $$sreg3$index13 = ((($3)) + 4|0);
          $$sreg3$field14 = HEAP32[$$sreg3$index13>>2]|0;
          $36 = __THREW__; __THREW__ = 0;
          $37 = $36&1;
          if (!($37)) {
           $38 = ($$sreg3$field14|0)<(0);
           if ($38) {
            __THREW__ = 0;
            invoke_vi(71,(2676|0));
            $39 = __THREW__; __THREW__ = 0;
            break;
           }
           $40 = ($$sreg3$field14|0)==(0);
           if ($40) {
            $ptr$0$i$i$i$i = (1);
           } else {
            $41 = (___rust_allocate($$sreg3$field14,1)|0);
            $42 = ($41|0)==(0|0);
            if ($42) {
             __THREW__ = 0;
             invoke_v(72);
             $43 = __THREW__; __THREW__ = 0;
             break;
            } else {
             $ptr$0$i$i$i$i = $41;
            }
           }
           $44 = $ptr$0$i$i$i$i;
           HEAP32[$vector$i$i>>2] = $44;
           $45 = ((($vector$i$i)) + 4|0);
           HEAP32[$45>>2] = $$sreg3$field14;
           $46 = ((($vector$i$i)) + 8|0);
           HEAP32[$46>>2] = 0;
           __THREW__ = 0;
           invoke_vii(127,($vector$i$i|0),($$sreg3$field14|0));
           $47 = __THREW__; __THREW__ = 0;
           $48 = $47&1;
           if ($48) {
            $51 = ___cxa_find_matching_catch_2()|0;
            $52 = tempRet0;
            $53 = HEAP32[$45>>2]|0;
            $not$$i$i$i$i$i$i = ($53|0)==(0);
            if ($not$$i$i$i$i$i$i) {
             $lpad$thr_comm$sink$index = $51;$lpad$thr_comm$sink$index19 = $52;
             break L12;
            }
            $54 = HEAP32[$vector$i$i>>2]|0;
            ___rust_deallocate($54,$53,1);
            $lpad$thr_comm$sink$index = $51;$lpad$thr_comm$sink$index19 = $52;
            break L12;
           }
           if (!($40)) {
            $$pre$i$i$i = HEAP32[$46>>2]|0;
            $49 = HEAP32[$vector$i$i>>2]|0;
            $scevgep$i$i = (($49) + ($$pre$i$i$i)|0);
            _memcpy(($scevgep$i$i|0),($$sreg3$field|0),($$sreg3$field14|0))|0;
            $50 = (($$pre$i$i$i) + ($$sreg3$field14))|0;
            HEAP32[$46>>2] = $50;
           }
           ;HEAP32[$tmp20>>2]=HEAP32[$vector$i$i>>2]|0;HEAP32[$tmp20+4>>2]=HEAP32[$vector$i$i+4>>2]|0;HEAP32[$tmp20+8>>2]=HEAP32[$vector$i$i+8>>2]|0;
           __THREW__ = 0;
           invoke_vii(135,($tmp19|0),($tmp20|0));
           $55 = __THREW__; __THREW__ = 0;
           $56 = $55&1;
           if (!($56)) {
            $ret$sroa$0$0$copyload90 = HEAP32[$tmp19>>2]|0;
            $ret$sroa$6$0$$sroa_idx93 = ((($tmp19)) + 4|0);
            $ret$sroa$6$0$copyload94 = HEAP32[$ret$sroa$6$0$$sroa_idx93>>2]|0;
            $ret$sroa$7$0$$sroa_idx97 = ((($tmp19)) + 8|0);
            $ret$sroa$7$0$copyload98 = HEAP32[$ret$sroa$7$0$$sroa_idx97>>2]|0;
            $ret$sroa$0$0 = $ret$sroa$0$0$copyload90;$ret$sroa$6$0 = $ret$sroa$6$0$copyload94;$ret$sroa$7$0 = $ret$sroa$7$0$copyload98;
            break L15;
           }
          }
         }
        } while(0);
        $67 = ___cxa_find_matching_catch_2()|0;
        $68 = tempRet0;
        $lpad$thr_comm$sink$index = $67;$lpad$thr_comm$sink$index19 = $68;
        break L12;
       }
      } while(0);
      (_pthread_mutex_unlock(((10416)|0))|0);
      HEAP32[$0>>2] = 0;
      $tmp29$sroa$0$sroa$0$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx = ((($0)) + 4|0);
      HEAP32[$tmp29$sroa$0$sroa$0$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx>>2] = $ret$sroa$0$0;
      $tmp29$sroa$0$sroa$4$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx100 = ((($0)) + 8|0);
      HEAP32[$tmp29$sroa$0$sroa$4$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx100>>2] = $ret$sroa$6$0;
      $tmp29$sroa$0$sroa$5$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx102 = ((($0)) + 12|0);
      HEAP32[$tmp29$sroa$0$sroa$5$0$tmp29$sroa$0$0$$sroa_cast25$sroa_idx102>>2] = $ret$sroa$7$0;
      $57 = ((($k)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==(0);
      if (!($59)) {
       $60 = HEAP32[$k>>2]|0;
       ___rust_deallocate($60,$58,1);
      }
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 3) {
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    $lpad$thr_comm$sink$index = $9;$lpad$thr_comm$sink$index19 = $10;
   }
   $61 = ((($k)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   if ($63) {
    $personalityslot$sroa$0$1126 = $lpad$thr_comm$sink$index;$personalityslot$sroa$7$1124 = $lpad$thr_comm$sink$index19;
    ___resumeException($personalityslot$sroa$0$1126|0);
    // unreachable;
   }
   $64 = HEAP32[$k>>2]|0;
   ___rust_deallocate($64,$62,1);
   $personalityslot$sroa$0$1126 = $lpad$thr_comm$sink$index;$personalityslot$sroa$7$1124 = $lpad$thr_comm$sink$index19;
   ___resumeException($personalityslot$sroa$0$1126|0);
   // unreachable;
  }
 }
 $11 = ___cxa_find_matching_catch_2()|0;
 $12 = tempRet0;
 $personalityslot$sroa$0$1126 = $11;$personalityslot$sroa$7$1124 = $12;
 ___resumeException($personalityslot$sroa$0$1126|0);
 // unreachable;
}
function __ZN60__LT_std__sys__os_str__Slice_u20_as_u20_core__fmt__Debug_GT_3fmt17haa6ec941d47dfd57E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i12 = 0;
 var $return$sroa$0$0$i16 = 0, $switch$i = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp1 = sp;
 __ZN11collections6string6String15from_utf8_lossy17he3e6a9c7fc6a0d43E($tmp1,$0,$1);
 $3 = HEAP32[$tmp1>>2]|0;
 $switch$i = ($3|0)==(1);
 $4 = ((($tmp1)) + 4|0);
 if (!($switch$i)) {
  $5 = ((($tmp1)) + 8|0);
  $6 = HEAP32[$4>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17he908de228f92c287E($6,$7,$2)|0);
  $return$sroa$0$0$i16 = $8;
  STACKTOP = sp;return ($return$sroa$0$0$i16|0);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($tmp1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 $12 = (invoke_iiii(136,($9|0),($11|0),($2|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  $19 = ((($tmp1)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $not$$i$i$i$i$i$i12 = ($20|0)==(0);
  if ($not$$i$i$i$i$i$i12) {
   ___resumeException($15|0);
   // unreachable;
  }
  ___rust_deallocate($9,$20,1);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $16 = ((($tmp1)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $not$$i$i$i$i$i$i = ($17|0)==(0);
  if ($not$$i$i$i$i$i$i) {
   $return$sroa$0$0$i16 = $12;
   STACKTOP = sp;return ($return$sroa$0$0$i16|0);
  }
  ___rust_deallocate($9,$17,1);
  $return$sroa$0$0$i16 = $12;
  STACKTOP = sp;return ($return$sroa$0$0$i16|0);
 }
 return (0)|0;
}
function __ZN3std3sys6os_str3Buf8as_slice17h49bf8867349186baE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std3sys6os_str5Slice8from_str17h63c46f212e29d9f8E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = $0;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $1;
 return;
}
function __ZN3std3sys5stdio6Stderr3new17h0eadcd5c4e2628b1E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std3sys5stdio6Stderr5write17h1d1c2adbed953f96E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, $fd = 0, $personalityslot$sroa$0$022 = 0, $personalityslot$sroa$5$021 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $fd = sp + 16|0;
 $ret = sp;
 __THREW__ = 0;
 $4 = (invoke_ii(137,2)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   $personalityslot$sroa$0$022 = $31;$personalityslot$sroa$5$021 = $32;
  } else {
   HEAP32[$fd>>2] = $4;
   __THREW__ = 0;
   invoke_viiii(138,($ret|0),($fd|0),($2|0),($3|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = tempRet0;
    __ZN58__LT_std__sys__fd__FileDesc_u20_as_u20_core__ops__Drop_GT_4drop17h90a51148a755edccE($fd);
    $personalityslot$sroa$0$022 = $11;$personalityslot$sroa$5$021 = $12;
    break;
   }
   __THREW__ = 0;
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    ;HEAP32[$0>>2]=HEAP32[$ret>>2]|0;HEAP32[$0+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$ret+8>>2]|0;
    STACKTOP = sp;return;
   }
   $13 = ___cxa_find_matching_catch_2()|0;
   $14 = tempRet0;
   $15 = HEAP32[$ret>>2]|0;
   $cond$i = ($15|0)==(1);
   if ($cond$i) {
    $16 = ((($ret)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $cond$i$i$i = ($17|0)==(1);
    if ($cond$i$i$i) {
     $18 = ((($ret)) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($19)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = HEAP32[$23>>2]|0;
     FUNCTION_TABLE_vi[$24 & 255]($21);
     $25 = HEAP32[$22>>2]|0;
     $26 = ((($25)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(0);
     if (!($28)) {
      $29 = ((($25)) + 8|0);
      $30 = HEAP32[$29>>2]|0;
      ___rust_deallocate($21,$27,$30);
     }
     ___rust_deallocate($19,12,4);
     $personalityslot$sroa$0$022 = $13;$personalityslot$sroa$5$021 = $14;
    } else {
     $personalityslot$sroa$0$022 = $13;$personalityslot$sroa$5$021 = $14;
    }
   } else {
    $personalityslot$sroa$0$022 = $13;$personalityslot$sroa$5$021 = $14;
   }
  }
 } while(0);
 ___resumeException($personalityslot$sroa$0$022|0);
 // unreachable;
}
function __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5write17h0c414e1f808abd0dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN3std3sys5stdio6Stderr5write17h1d1c2adbed953f96E($0,0,$2,$3);
 return;
}
function __ZN58__LT_std__sys__stdio__Stderr_u20_as_u20_std__io__Write_GT_5flush17h039240223aae0fa2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std3sys17decode_error_kind17h75a4548c859f92b6E($0) {
 $0 = $0|0;
 var $1 = 0, $return$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 111:  {
   $return$0 = 2;
   break;
  }
  case 104:  {
   $return$0 = 3;
   break;
  }
  case 13: case 1:  {
   $return$0 = 1;
   break;
  }
  case 32:  {
   $return$0 = 8;
   break;
  }
  case 107:  {
   $return$0 = 5;
   break;
  }
  case 103:  {
   $return$0 = 4;
   break;
  }
  case 99:  {
   $return$0 = 7;
   break;
  }
  case 98:  {
   $return$0 = 6;
   break;
  }
  case 2:  {
   $return$0 = 0;
   break;
  }
  case 4:  {
   $return$0 = 15;
   break;
  }
  case 22:  {
   $return$0 = 11;
   break;
  }
  case 110:  {
   $return$0 = 13;
   break;
  }
  case 17:  {
   $return$0 = 9;
   break;
  }
  case 11:  {
   $1 = 10;
   label = 15;
   break;
  }
  default: {
   $1 = 16;
   label = 15;
  }
  }
 } while(0);
 if ((label|0) == 15) {
  $return$0 = $1;
 }
 return ($return$0|0);
}
function __ZN46__LT_isize_u20_as_u20_std__sys__IsMinusOne_GT_12is_minus_one17h16d1fe41b33164adE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 return ($2|0);
}
function _rust_eh_personality() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___rust_start_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
 return (0)|0;
}
function __ZN11collections6string6String15from_utf8_lossy17he3e6a9c7fc6a0d43E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$fca$0$gep = 0, $$fca$0$load = 0, $$off = 0, $$off325 = 0, $$off327 = 0, $$pre$i = 0, $$pre$i127 = 0, $$pre$i145 = 0, $$pre$i152 = 0, $$pre$i165 = 0, $$pre$i172 = 0, $$pre$i195 = 0, $$pre$i202 = 0, $$pre$i209 = 0, $$pre$i222 = 0, $$pre$i229 = 0, $$pre$i240 = 0, $$pre$i259 = 0, $$pre$i266 = 0, $$pre$i277 = 0;
 var $$pre$i290 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond10 = 0, $cond11 = 0;
 var $cond9 = 0, $e = 0, $exitcond$i = 0, $exitcond$i130 = 0, $exitcond$i155 = 0, $exitcond$i168 = 0, $exitcond$i198 = 0, $exitcond$i225 = 0, $exitcond$i243 = 0, $exitcond$i262 = 0, $exitcond$i293 = 0, $i$0$be = 0, $i$0366 = 0, $iter$sroa$0$016$i = 0, $iter$sroa$0$016$i129 = 0, $iter$sroa$0$016$i154 = 0, $iter$sroa$0$016$i167 = 0, $iter$sroa$0$016$i197 = 0, $iter$sroa$0$016$i224 = 0, $iter$sroa$0$016$i242 = 0;
 var $iter$sroa$0$016$i261 = 0, $iter$sroa$0$016$i292 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $not$$i$i$i$i$i = 0, $or$cond110 = 0, $or$cond111 = 0, $or$cond112 = 0, $or$cond113 = 0, $or$cond115 = 0, $or$cond116 = 0, $or$cond120 = 0, $or$cond121 = 0, $or$cond122 = 0, $or$cond123 = 0, $ptr$0$i$i$i = 0, $res = 0, $subseqidx$0$be = 0, $subseqidx$0$lcssa = 0, $subseqidx$0$ph = 0;
 var $subseqidx$0365 = 0, $switch = 0, $tmp0$sroa$4$0$$sroa_idx2$i = 0, $tmp0$sroa$5$0$$sroa_idx4$i = 0, $tmp1 = 0, $tmp303$sroa$0$0$$sroa_idx18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $e = sp + 32|0;
 $res = sp + 16|0;
 $tmp1 = sp;
 __ZN4core3str9from_utf817h62275e07c46015c9E($tmp1,$1,$2);
 $3 = HEAP32[$tmp1>>2]|0;
 $switch = ($3|0)==(1);
 if (!($switch)) {
  $4 = ((($tmp1)) + 8|0);
  $5 = ((($tmp1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  HEAP32[$0>>2] = 0;
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $6;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $7;
  STACKTOP = sp;return;
 }
 $$fca$0$gep = ((($tmp1)) + 4|0);
 $$fca$0$load = HEAP32[$$fca$0$gep>>2]|0;
 HEAP32[$e>>2] = $$fca$0$load;
 $10 = (__ZN4core3str9Utf8Error11valid_up_to17h2f5b6e6067b7ec21E($e)|0);
 $11 = ($2|0)<(0);
 if ($11) {
  __ZN4core9panicking5panic17hf2309629b2721756E(2676);
  // unreachable;
 }
 $12 = ($2|0)==(0);
 if ($12) {
  $ptr$0$i$i$i = (1);
 } else {
  $13 = (___rust_allocate($2,1)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZN5alloc3oom3oom17ha2998ef21a53f982E();
   // unreachable;
  } else {
   $ptr$0$i$i$i = $13;
  }
 }
 $15 = $ptr$0$i$i$i;
 HEAP32[$res>>2] = $15;
 $tmp0$sroa$4$0$$sroa_idx2$i = ((($res)) + 4|0);
 HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i>>2] = $2;
 $tmp0$sroa$5$0$$sroa_idx4$i = ((($res)) + 8|0);
 HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = 0;
 $16 = ($10|0)==(0);
 do {
  if ($16) {
   $subseqidx$0$ph = 0;
   label = 16;
  } else {
   $17 = ($10>>>0)>($2>>>0);
   if ($17) {
    __THREW__ = 0;
    invoke_vii(139,($10|0),($2|0));
    $18 = __THREW__; __THREW__ = 0;
    label = 125;
    break;
   }
   __THREW__ = 0;
   invoke_vii(140,($res|0),($10|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 125;
   } else {
    $$pre$i = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
    $24 = $$pre$i;$iter$sroa$0$016$i = 0;
    while(1) {
     $21 = (($iter$sroa$0$016$i) + 1)|0;
     $22 = HEAP32[$res>>2]|0;
     $23 = (($22) + ($24)|0);
     $25 = (($1) + ($iter$sroa$0$016$i)|0);
     $26 = HEAP8[$25>>0]|0;
     HEAP8[$23>>0] = $26;
     $27 = (($24) + 1)|0;
     HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $27;
     $exitcond$i = ($21|0)==($10|0);
     if ($exitcond$i) {
      $subseqidx$0$ph = $10;
      label = 16;
      break;
     } else {
      $24 = $27;$iter$sroa$0$016$i = $21;
     }
    }
   }
  }
 } while(0);
 L20: do {
  if ((label|0) == 16) {
   $28 = ($subseqidx$0$ph>>>0)<($2>>>0);
   L22: do {
    if ($28) {
     $i$0366 = $subseqidx$0$ph;$subseqidx$0365 = $subseqidx$0$ph;
     L24: while(1) {
      $30 = (($1) + ($i$0366)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = (($i$0366) + 1)|0;
      $33 = ($31<<24>>24)>(-1);
      L26: do {
       if ($33) {
        $i$0$be = $32;$subseqidx$0$be = $subseqidx$0365;
       } else {
        $35 = $31&255;
        $36 = (7665 + ($35)|0);
        $37 = HEAP8[$36>>0]|0;
        switch ($37<<24>>24) {
        case 2:  {
         $38 = ($32>>>0)<($2>>>0);
         if ($38) {
          $42 = (($1) + ($32)|0);
          $43 = HEAP8[$42>>0]|0;
          $44 = $43 & -64;
          $45 = ($44<<24>>24)==(-128);
          if ($45) {
           $47 = (($i$0366) + 2)|0;
           $i$0$be = $47;$subseqidx$0$be = $subseqidx$0365;
           break L26;
          }
         }
         $46 = ($i$0366|0)==($subseqidx$0365|0);
         if (!($46)) {
          $48 = ($i$0366>>>0)<($subseqidx$0365>>>0);
          if ($48) {
           label = 30;
           break L24;
          }
          $50 = ($i$0366>>>0)>($2>>>0);
          if ($50) {
           label = 32;
           break L24;
          }
          $52 = (($1) + ($subseqidx$0365)|0);
          $53 = (($i$0366) - ($subseqidx$0365))|0;
          __THREW__ = 0;
          invoke_vii(140,($res|0),($53|0));
          $54 = __THREW__; __THREW__ = 0;
          $55 = $54&1;
          if ($55) {
           label = 124;
           break L24;
          }
          $56 = ($53|0)==(0);
          if (!($56)) {
           $$pre$i165 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
           $60 = $$pre$i165;$iter$sroa$0$016$i167 = 0;
           while(1) {
            $57 = (($iter$sroa$0$016$i167) + 1)|0;
            $58 = HEAP32[$res>>2]|0;
            $59 = (($58) + ($60)|0);
            $61 = (($52) + ($iter$sroa$0$016$i167)|0);
            $62 = HEAP8[$61>>0]|0;
            HEAP8[$59>>0] = $62;
            $63 = (($60) + 1)|0;
            HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $63;
            $exitcond$i168 = ($57|0)==($53|0);
            if ($exitcond$i168) {
             break;
            } else {
             $60 = $63;$iter$sroa$0$016$i167 = $57;
            }
           }
          }
         }
         __THREW__ = 0;
         invoke_vii(140,($res|0),3);
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         if ($65) {
          label = 124;
          break L24;
         }
         $$pre$i172 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
         $66 = HEAP32[$res>>2]|0;
         $67 = (($66) + ($$pre$i172)|0);
         HEAP8[$67>>0] = -17;
         $68 = (($$pre$i172) + 1)|0;
         $69 = HEAP32[$res>>2]|0;
         $70 = (($69) + ($68)|0);
         HEAP8[$70>>0] = -65;
         $71 = (($$pre$i172) + 2)|0;
         $72 = HEAP32[$res>>2]|0;
         $73 = (($72) + ($71)|0);
         HEAP8[$73>>0] = -67;
         $74 = (($$pre$i172) + 3)|0;
         HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $74;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L26;
         break;
        }
        case 3:  {
         $39 = ($32>>>0)<($2>>>0);
         do {
          if ($39) {
           $75 = (($1) + ($32)|0);
           $76 = HEAP8[$75>>0]|0;
           $cond10 = ($31<<24>>24)==(-32);
           $77 = ($76&255)<(192);
           $78 = $76 & -32;
           $79 = ($78<<24>>24)==(-96);
           $80 = $cond10 & $79;
           if (!($80)) {
            $$off327 = (($31) + 31)<<24>>24;
            $82 = ($$off327&255)<(12);
            $83 = ($76<<24>>24)<(0);
            $or$cond110 = $82 & $83;
            $or$cond111 = $77 & $or$cond110;
            if (!($or$cond111)) {
             $cond11 = ($31<<24>>24)==(-19);
             $or$cond112 = $cond11 & $83;
             $84 = ($76&255)<(160);
             $or$cond113 = $84 & $or$cond112;
             if (!($or$cond113)) {
              $85 = $31 & -2;
              $86 = ($85<<24>>24)==(-18);
              $or$cond115 = $86 & $83;
              $or$cond116 = $77 & $or$cond115;
              if (!($or$cond116)) {
               break;
              }
             }
            }
           }
           $87 = (($i$0366) + 2)|0;
           $88 = ($87>>>0)<($2>>>0);
           if ($88) {
            $116 = (($1) + ($87)|0);
            $117 = HEAP8[$116>>0]|0;
            $118 = $117 & -64;
            $119 = ($118<<24>>24)==(-128);
            if ($119) {
             $121 = (($i$0366) + 3)|0;
             $i$0$be = $121;$subseqidx$0$be = $subseqidx$0365;
             break L26;
            }
           }
           $120 = ($i$0366|0)==($subseqidx$0365|0);
           do {
            if (!($120)) {
             $122 = ($i$0366>>>0)<($subseqidx$0365>>>0);
             if ($122) {
              label = 59;
              break L24;
             }
             $124 = ($i$0366>>>0)>($2>>>0);
             if ($124) {
              label = 61;
              break L24;
             }
             $126 = (($1) + ($subseqidx$0365)|0);
             $127 = (($i$0366) - ($subseqidx$0365))|0;
             __THREW__ = 0;
             invoke_vii(140,($res|0),($127|0));
             $128 = __THREW__; __THREW__ = 0;
             $129 = $128&1;
             if ($129) {
              label = 124;
              break L24;
             }
             $130 = ($127|0)==(0);
             if ($130) {
              break;
             }
             $$pre$i222 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
             $134 = $$pre$i222;$iter$sroa$0$016$i224 = 0;
             while(1) {
              $131 = (($iter$sroa$0$016$i224) + 1)|0;
              $132 = HEAP32[$res>>2]|0;
              $133 = (($132) + ($134)|0);
              $135 = (($126) + ($iter$sroa$0$016$i224)|0);
              $136 = HEAP8[$135>>0]|0;
              HEAP8[$133>>0] = $136;
              $137 = (($134) + 1)|0;
              HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $137;
              $exitcond$i225 = ($131|0)==($127|0);
              if ($exitcond$i225) {
               break;
              } else {
               $134 = $137;$iter$sroa$0$016$i224 = $131;
              }
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vii(140,($res|0),3);
           $138 = __THREW__; __THREW__ = 0;
           $139 = $138&1;
           if ($139) {
            label = 124;
            break L24;
           }
           $$pre$i229 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
           $140 = HEAP32[$res>>2]|0;
           $141 = (($140) + ($$pre$i229)|0);
           HEAP8[$141>>0] = -17;
           $142 = (($$pre$i229) + 1)|0;
           $143 = HEAP32[$res>>2]|0;
           $144 = (($143) + ($142)|0);
           HEAP8[$144>>0] = -65;
           $145 = (($$pre$i229) + 2)|0;
           $146 = HEAP32[$res>>2]|0;
           $147 = (($146) + ($145)|0);
           HEAP8[$147>>0] = -67;
           $148 = (($$pre$i229) + 3)|0;
           HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $148;
           $i$0$be = $87;$subseqidx$0$be = $87;
           break L26;
          }
         } while(0);
         $81 = ($i$0366|0)==($subseqidx$0365|0);
         if (!($81)) {
          $89 = ($i$0366>>>0)<($subseqidx$0365>>>0);
          if ($89) {
           label = 46;
           break L24;
          }
          $91 = ($i$0366>>>0)>($2>>>0);
          if ($91) {
           label = 48;
           break L24;
          }
          $93 = (($1) + ($subseqidx$0365)|0);
          $94 = (($i$0366) - ($subseqidx$0365))|0;
          __THREW__ = 0;
          invoke_vii(140,($res|0),($94|0));
          $95 = __THREW__; __THREW__ = 0;
          $96 = $95&1;
          if ($96) {
           label = 124;
           break L24;
          }
          $97 = ($94|0)==(0);
          if (!($97)) {
           $$pre$i195 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
           $101 = $$pre$i195;$iter$sroa$0$016$i197 = 0;
           while(1) {
            $98 = (($iter$sroa$0$016$i197) + 1)|0;
            $99 = HEAP32[$res>>2]|0;
            $100 = (($99) + ($101)|0);
            $102 = (($93) + ($iter$sroa$0$016$i197)|0);
            $103 = HEAP8[$102>>0]|0;
            HEAP8[$100>>0] = $103;
            $104 = (($101) + 1)|0;
            HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $104;
            $exitcond$i198 = ($98|0)==($94|0);
            if ($exitcond$i198) {
             break;
            } else {
             $101 = $104;$iter$sroa$0$016$i197 = $98;
            }
           }
          }
         }
         __THREW__ = 0;
         invoke_vii(140,($res|0),3);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 124;
          break L24;
         }
         $$pre$i202 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
         $107 = HEAP32[$res>>2]|0;
         $108 = (($107) + ($$pre$i202)|0);
         HEAP8[$108>>0] = -17;
         $109 = (($$pre$i202) + 1)|0;
         $110 = HEAP32[$res>>2]|0;
         $111 = (($110) + ($109)|0);
         HEAP8[$111>>0] = -65;
         $112 = (($$pre$i202) + 2)|0;
         $113 = HEAP32[$res>>2]|0;
         $114 = (($113) + ($112)|0);
         HEAP8[$114>>0] = -67;
         $115 = (($$pre$i202) + 3)|0;
         HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $115;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L26;
         break;
        }
        case 4:  {
         $40 = ($32>>>0)<($2>>>0);
         do {
          if ($40) {
           $149 = (($1) + ($32)|0);
           $150 = HEAP8[$149>>0]|0;
           $cond = ($31<<24>>24)==(-16);
           $$off = (($150) + 112)<<24>>24;
           $151 = ($$off&255)<(48);
           $152 = $cond & $151;
           if (!($152)) {
            $154 = ($150&255)<(192);
            $$off325 = (($31) + 15)<<24>>24;
            $155 = ($$off325&255)<(3);
            $156 = ($150<<24>>24)<(0);
            $or$cond120 = $155 & $156;
            $or$cond121 = $154 & $or$cond120;
            if (!($or$cond121)) {
             $cond9 = ($31<<24>>24)==(-12);
             $or$cond122 = $cond9 & $156;
             $157 = ($150&255)<(144);
             $or$cond123 = $157 & $or$cond122;
             if (!($or$cond123)) {
              break;
             }
            }
           }
           $158 = (($i$0366) + 2)|0;
           $159 = ($158>>>0)<($2>>>0);
           if ($159) {
            $187 = (($1) + ($158)|0);
            $188 = HEAP8[$187>>0]|0;
            $189 = $188 & -64;
            $190 = ($189<<24>>24)==(-128);
            if ($190) {
             $192 = (($i$0366) + 3)|0;
             $193 = ($192>>>0)<($2>>>0);
             if ($193) {
              $221 = (($1) + ($192)|0);
              $222 = HEAP8[$221>>0]|0;
              $223 = $222 & -64;
              $224 = ($223<<24>>24)==(-128);
              if ($224) {
               $226 = (($i$0366) + 4)|0;
               $i$0$be = $226;$subseqidx$0$be = $subseqidx$0365;
               break L26;
              }
             }
             $225 = ($i$0366|0)==($subseqidx$0365|0);
             do {
              if (!($225)) {
               $227 = ($i$0366>>>0)<($subseqidx$0365>>>0);
               if ($227) {
                label = 100;
                break L24;
               }
               $229 = ($i$0366>>>0)>($2>>>0);
               if ($229) {
                label = 102;
                break L24;
               }
               $231 = (($1) + ($subseqidx$0365)|0);
               $232 = (($i$0366) - ($subseqidx$0365))|0;
               __THREW__ = 0;
               invoke_vii(140,($res|0),($232|0));
               $233 = __THREW__; __THREW__ = 0;
               $234 = $233&1;
               if ($234) {
                label = 124;
                break L24;
               }
               $235 = ($232|0)==(0);
               if ($235) {
                break;
               }
               $$pre$i240 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
               $239 = $$pre$i240;$iter$sroa$0$016$i242 = 0;
               while(1) {
                $236 = (($iter$sroa$0$016$i242) + 1)|0;
                $237 = HEAP32[$res>>2]|0;
                $238 = (($237) + ($239)|0);
                $240 = (($231) + ($iter$sroa$0$016$i242)|0);
                $241 = HEAP8[$240>>0]|0;
                HEAP8[$238>>0] = $241;
                $242 = (($239) + 1)|0;
                HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $242;
                $exitcond$i243 = ($236|0)==($232|0);
                if ($exitcond$i243) {
                 break;
                } else {
                 $239 = $242;$iter$sroa$0$016$i242 = $236;
                }
               }
              }
             } while(0);
             __THREW__ = 0;
             invoke_vii(140,($res|0),3);
             $243 = __THREW__; __THREW__ = 0;
             $244 = $243&1;
             if ($244) {
              label = 124;
              break L24;
             }
             $$pre$i209 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
             $245 = HEAP32[$res>>2]|0;
             $246 = (($245) + ($$pre$i209)|0);
             HEAP8[$246>>0] = -17;
             $247 = (($$pre$i209) + 1)|0;
             $248 = HEAP32[$res>>2]|0;
             $249 = (($248) + ($247)|0);
             HEAP8[$249>>0] = -65;
             $250 = (($$pre$i209) + 2)|0;
             $251 = HEAP32[$res>>2]|0;
             $252 = (($251) + ($250)|0);
             HEAP8[$252>>0] = -67;
             $253 = (($$pre$i209) + 3)|0;
             HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $253;
             $i$0$be = $192;$subseqidx$0$be = $192;
             break L26;
            }
           }
           $191 = ($i$0366|0)==($subseqidx$0365|0);
           do {
            if (!($191)) {
             $194 = ($i$0366>>>0)<($subseqidx$0365>>>0);
             if ($194) {
              label = 87;
              break L24;
             }
             $196 = ($i$0366>>>0)>($2>>>0);
             if ($196) {
              label = 89;
              break L24;
             }
             $198 = (($1) + ($subseqidx$0365)|0);
             $199 = (($i$0366) - ($subseqidx$0365))|0;
             __THREW__ = 0;
             invoke_vii(140,($res|0),($199|0));
             $200 = __THREW__; __THREW__ = 0;
             $201 = $200&1;
             if ($201) {
              label = 124;
              break L24;
             }
             $202 = ($199|0)==(0);
             if ($202) {
              break;
             }
             $$pre$i290 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
             $206 = $$pre$i290;$iter$sroa$0$016$i292 = 0;
             while(1) {
              $203 = (($iter$sroa$0$016$i292) + 1)|0;
              $204 = HEAP32[$res>>2]|0;
              $205 = (($204) + ($206)|0);
              $207 = (($198) + ($iter$sroa$0$016$i292)|0);
              $208 = HEAP8[$207>>0]|0;
              HEAP8[$205>>0] = $208;
              $209 = (($206) + 1)|0;
              HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $209;
              $exitcond$i293 = ($203|0)==($199|0);
              if ($exitcond$i293) {
               break;
              } else {
               $206 = $209;$iter$sroa$0$016$i292 = $203;
              }
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vii(140,($res|0),3);
           $210 = __THREW__; __THREW__ = 0;
           $211 = $210&1;
           if ($211) {
            label = 124;
            break L24;
           }
           $$pre$i277 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
           $212 = HEAP32[$res>>2]|0;
           $213 = (($212) + ($$pre$i277)|0);
           HEAP8[$213>>0] = -17;
           $214 = (($$pre$i277) + 1)|0;
           $215 = HEAP32[$res>>2]|0;
           $216 = (($215) + ($214)|0);
           HEAP8[$216>>0] = -65;
           $217 = (($$pre$i277) + 2)|0;
           $218 = HEAP32[$res>>2]|0;
           $219 = (($218) + ($217)|0);
           HEAP8[$219>>0] = -67;
           $220 = (($$pre$i277) + 3)|0;
           HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $220;
           $i$0$be = $158;$subseqidx$0$be = $158;
           break L26;
          }
         } while(0);
         $153 = ($i$0366|0)==($subseqidx$0365|0);
         if (!($153)) {
          $160 = ($i$0366>>>0)<($subseqidx$0365>>>0);
          if ($160) {
           label = 74;
           break L24;
          }
          $162 = ($i$0366>>>0)>($2>>>0);
          if ($162) {
           label = 76;
           break L24;
          }
          $164 = (($1) + ($subseqidx$0365)|0);
          $165 = (($i$0366) - ($subseqidx$0365))|0;
          __THREW__ = 0;
          invoke_vii(140,($res|0),($165|0));
          $166 = __THREW__; __THREW__ = 0;
          $167 = $166&1;
          if ($167) {
           label = 124;
           break L24;
          }
          $168 = ($165|0)==(0);
          if (!($168)) {
           $$pre$i259 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
           $172 = $$pre$i259;$iter$sroa$0$016$i261 = 0;
           while(1) {
            $169 = (($iter$sroa$0$016$i261) + 1)|0;
            $170 = HEAP32[$res>>2]|0;
            $171 = (($170) + ($172)|0);
            $173 = (($164) + ($iter$sroa$0$016$i261)|0);
            $174 = HEAP8[$173>>0]|0;
            HEAP8[$171>>0] = $174;
            $175 = (($172) + 1)|0;
            HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $175;
            $exitcond$i262 = ($169|0)==($165|0);
            if ($exitcond$i262) {
             break;
            } else {
             $172 = $175;$iter$sroa$0$016$i261 = $169;
            }
           }
          }
         }
         __THREW__ = 0;
         invoke_vii(140,($res|0),3);
         $176 = __THREW__; __THREW__ = 0;
         $177 = $176&1;
         if ($177) {
          label = 124;
          break L24;
         }
         $$pre$i266 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
         $178 = HEAP32[$res>>2]|0;
         $179 = (($178) + ($$pre$i266)|0);
         HEAP8[$179>>0] = -17;
         $180 = (($$pre$i266) + 1)|0;
         $181 = HEAP32[$res>>2]|0;
         $182 = (($181) + ($180)|0);
         HEAP8[$182>>0] = -65;
         $183 = (($$pre$i266) + 2)|0;
         $184 = HEAP32[$res>>2]|0;
         $185 = (($184) + ($183)|0);
         HEAP8[$185>>0] = -67;
         $186 = (($$pre$i266) + 3)|0;
         HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $186;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L26;
         break;
        }
        default: {
         $41 = ($i$0366|0)==($subseqidx$0365|0);
         if (!($41)) {
          $254 = ($i$0366>>>0)<($subseqidx$0365>>>0);
          if ($254) {
           label = 110;
           break L24;
          }
          $256 = ($i$0366>>>0)>($2>>>0);
          if ($256) {
           label = 112;
           break L24;
          }
          $258 = (($1) + ($subseqidx$0365)|0);
          $259 = (($i$0366) - ($subseqidx$0365))|0;
          __THREW__ = 0;
          invoke_vii(140,($res|0),($259|0));
          $260 = __THREW__; __THREW__ = 0;
          $261 = $260&1;
          if ($261) {
           label = 124;
           break L24;
          }
          $262 = ($259|0)==(0);
          if (!($262)) {
           $$pre$i152 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
           $266 = $$pre$i152;$iter$sroa$0$016$i154 = 0;
           while(1) {
            $263 = (($iter$sroa$0$016$i154) + 1)|0;
            $264 = HEAP32[$res>>2]|0;
            $265 = (($264) + ($266)|0);
            $267 = (($258) + ($iter$sroa$0$016$i154)|0);
            $268 = HEAP8[$267>>0]|0;
            HEAP8[$265>>0] = $268;
            $269 = (($266) + 1)|0;
            HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $269;
            $exitcond$i155 = ($263|0)==($259|0);
            if ($exitcond$i155) {
             break;
            } else {
             $266 = $269;$iter$sroa$0$016$i154 = $263;
            }
           }
          }
         }
         __THREW__ = 0;
         invoke_vii(140,($res|0),3);
         $270 = __THREW__; __THREW__ = 0;
         $271 = $270&1;
         if ($271) {
          label = 124;
          break L24;
         }
         $$pre$i145 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
         $272 = HEAP32[$res>>2]|0;
         $273 = (($272) + ($$pre$i145)|0);
         HEAP8[$273>>0] = -17;
         $274 = (($$pre$i145) + 1)|0;
         $275 = HEAP32[$res>>2]|0;
         $276 = (($275) + ($274)|0);
         HEAP8[$276>>0] = -65;
         $277 = (($$pre$i145) + 2)|0;
         $278 = HEAP32[$res>>2]|0;
         $279 = (($278) + ($277)|0);
         HEAP8[$279>>0] = -67;
         $280 = (($$pre$i145) + 3)|0;
         HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $280;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L26;
        }
        }
       }
      } while(0);
      $34 = ($i$0$be>>>0)<($2>>>0);
      if ($34) {
       $i$0366 = $i$0$be;$subseqidx$0365 = $subseqidx$0$be;
      } else {
       $subseqidx$0$lcssa = $subseqidx$0$be;
       break L22;
      }
     }
     switch (label|0) {
      case 30: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $49 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 32: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $51 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 46: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $90 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 48: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $92 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 59: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $123 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 61: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $125 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 74: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $161 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 76: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $163 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 87: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $195 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 89: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $197 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 100: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $228 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 102: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $230 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 110: {
       __THREW__ = 0;
       invoke_vii(95,($subseqidx$0365|0),($i$0366|0));
       $255 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 112: {
       __THREW__ = 0;
       invoke_vii(139,($i$0366|0),($2|0));
       $257 = __THREW__; __THREW__ = 0;
       label = 125;
       break L20;
       break;
      }
      case 124: {
       $293 = ___cxa_find_matching_catch_2()|0;
       $294 = tempRet0;
       $lpad$phi$index = $293;$lpad$phi$index2 = $294;
       break L20;
       break;
      }
     }
    } else {
     $subseqidx$0$lcssa = $subseqidx$0$ph;
    }
   } while(0);
   $29 = ($subseqidx$0$lcssa>>>0)<($2>>>0);
   if ($29) {
    $281 = (($1) + ($subseqidx$0$lcssa)|0);
    $282 = (($2) - ($subseqidx$0$lcssa))|0;
    __THREW__ = 0;
    invoke_vii(140,($res|0),($282|0));
    $283 = __THREW__; __THREW__ = 0;
    $284 = $283&1;
    if ($284) {
     label = 125;
     break;
    }
    $285 = ($282|0)==(0);
    if (!($285)) {
     $$pre$i127 = HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2]|0;
     $289 = $$pre$i127;$iter$sroa$0$016$i129 = 0;
     while(1) {
      $286 = (($iter$sroa$0$016$i129) + 1)|0;
      $287 = HEAP32[$res>>2]|0;
      $288 = (($287) + ($289)|0);
      $290 = (($281) + ($iter$sroa$0$016$i129)|0);
      $291 = HEAP8[$290>>0]|0;
      HEAP8[$288>>0] = $291;
      $292 = (($289) + 1)|0;
      HEAP32[$tmp0$sroa$5$0$$sroa_idx4$i>>2] = $292;
      $exitcond$i130 = ($286|0)==($282|0);
      if ($exitcond$i130) {
       break;
      } else {
       $289 = $292;$iter$sroa$0$016$i129 = $286;
      }
     }
    }
   }
   HEAP32[$0>>2] = 1;
   $tmp303$sroa$0$0$$sroa_idx18 = ((($0)) + 4|0);
   ;HEAP32[$tmp303$sroa$0$0$$sroa_idx18>>2]=HEAP32[$res>>2]|0;HEAP32[$tmp303$sroa$0$0$$sroa_idx18+4>>2]=HEAP32[$res+4>>2]|0;HEAP32[$tmp303$sroa$0$0$$sroa_idx18+8>>2]=HEAP32[$res+8>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 125) {
  $295 = ___cxa_find_matching_catch_2()|0;
  $296 = tempRet0;
  $lpad$phi$index = $295;$lpad$phi$index2 = $296;
 }
 $297 = HEAP32[$tmp0$sroa$4$0$$sroa_idx2$i>>2]|0;
 $not$$i$i$i$i$i = ($297|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $298 = HEAP32[$res>>2]|0;
 ___rust_deallocate($298,$297,1);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h58182ad79fce4c6dE_717($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$i = 0, $return$0$sroa$speculated$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(6588,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $return$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($return$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17hf2309629b2721756E(2676);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($return$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$return$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $return$0$sroa$speculated$i$i$i;
 return;
}
function __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h9f84ac3c09815c3eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h71b09002dec7385eE($0,$1,$2);
 return;
}
function __ZN106__LT_collections__string__String_u20_as_u20_core__convert__Into_LT_collections__vec__Vec_LT_u8_GT__GT__GT_4into17h685d95728ce4f82cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 return;
}
function __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h71b09002dec7385eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i = 0, $scevgep$i$i$i = 0, $tmp0 = 0;
 var $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vector$i$i$i = sp + 16|0;
 $tmp0 = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17hf2309629b2721756E(2676);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17ha2998ef21a53f982E();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $8;
 $9 = ((($vector$i$i$i)) + 4|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$10>>2] = 0;
 __THREW__ = 0;
 invoke_vii(141,($vector$i$i$i|0),($2|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  if (!($5)) {
   $$pre$i$i$i$i = HEAP32[$10>>2]|0;
   $13 = HEAP32[$vector$i$i$i>>2]|0;
   $scevgep$i$i$i = (($13) + ($$pre$i$i$i$i)|0);
   _memcpy(($scevgep$i$i$i|0),($1|0),($2|0))|0;
   $14 = (($$pre$i$i$i$i) + ($2))|0;
   HEAP32[$10>>2] = $14;
  }
  ;HEAP32[$tmp0>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$tmp0+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$tmp0+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$tmp0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$tmp0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$tmp0+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $16 = HEAP32[$9>>2]|0;
 $not$$i$i$i$i$i$i$i = ($16|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  ___resumeException($4|0);
  // unreachable;
 }
 $17 = HEAP32[$vector$i$i$i>>2]|0;
 ___rust_deallocate($17,$16,1);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h58182ad79fce4c6dE_733($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$i = 0, $return$0$sroa$speculated$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E(6605,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $return$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($return$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17hf2309629b2721756E(2676);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($return$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$return$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17ha2998ef21a53f982E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $return$0$sroa$speculated$i$i$i;
 return;
}
function __ZN13rustc_unicode6tables16general_category1N17hf27987311eaaad53E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN13rustc_unicode6tables23trie_lookup_range_table17h399f059a23d0a4a0E($0,344)|0);
 return ($1|0);
}
function __ZN13rustc_unicode6tables23trie_lookup_range_table17h399f059a23d0a4a0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(2048);
 if ($2) {
  $3 = $0 >>> 6;
  $4 = (($1) + ($3<<3)|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = $0 & 63;
  $12 = (_bitshift64Shl(1,0,($11|0))|0);
  $13 = tempRet0;
  $14 = $7 & $12;
  $15 = $10 & $13;
  $75 = $14;$77 = $15;
  $76 = ($75|0)!=(0);
  $78 = ($77|0)!=(0);
  $79 = $76 | $78;
  return ($79|0);
 }
 $16 = ($0>>>0)<(65536);
 if ($16) {
  $17 = $0 >>> 6;
  $18 = (($17) + -32)|0;
  $19 = ($18>>>0)<(992);
  if (!($19)) {
   __ZN4core9panicking5panic17hf2309629b2721756E(3008);
   // unreachable;
  }
  $20 = (((($1)) + 256|0) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ((($1)) + 1252|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  if (!($25)) {
   __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2644,$22,$24);
   // unreachable;
  }
  $47 = ((($1)) + 1248|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($22<<3)|0);
  $50 = $49;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = $0 & 63;
  $57 = (_bitshift64Shl(1,0,($56|0))|0);
  $58 = tempRet0;
  $59 = $52 & $57;
  $60 = $55 & $58;
  $75 = $59;$77 = $60;
  $76 = ($75|0)!=(0);
  $78 = ($77|0)!=(0);
  $79 = $76 | $78;
  return ($79|0);
 }
 $26 = $0 >>> 12;
 $27 = (($26) + -16)|0;
 $28 = ($27>>>0)<(256);
 if (!($28)) {
  __ZN4core9panicking5panic17hf2309629b2721756E(3008);
  // unreachable;
 }
 $29 = (((($1)) + 1256|0) + ($27)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ((($1)) + 1516|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $30&255;
 $34 = $33 << 6;
 $35 = $0 >>> 6;
 $36 = $35 & 63;
 $37 = $34 | $36;
 $38 = ($32>>>0)>($37>>>0);
 if (!($38)) {
  __ZN4core9panicking5panic17hf2309629b2721756E(3008);
  // unreachable;
 }
 $39 = ((($1)) + 1512|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($37)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((($1)) + 1524|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($43>>>0)<($45>>>0);
 if (!($46)) {
  __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2632,$43,$45);
  // unreachable;
 }
 $61 = ((($1)) + 1520|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($43<<3)|0);
 $64 = $63;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $0 & 63;
 $71 = (_bitshift64Shl(1,0,($70|0))|0);
 $72 = tempRet0;
 $73 = $66 & $71;
 $74 = $69 & $72;
 $75 = $73;$77 = $74;
 $76 = ($75|0)!=(0);
 $78 = ($77|0)!=(0);
 $79 = $76 | $78;
 return ($79|0);
}
function __ZN5alloc3oom3oom17ha2998ef21a53f982E() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[674]|0;
 $1 = $0;
 FUNCTION_TABLE_v[$1 & 127]();
 // unreachable;
}
function __ZN5alloc3oom19default_oom_handler17ha6b91689c2e4b286E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _llvm_trap();
 // unreachable;
}
function ___rust_allocate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN12alloc_system3imp8allocate17hda64a4aaa6e1c210E($0,$1)|0);
 return ($2|0);
}
function ___rust_deallocate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12alloc_system3imp10deallocate17ha73d0a1042e9719aE($0,$1,$2);
 return;
}
function ___rust_reallocate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN12alloc_system3imp10reallocate17h7d147d5219fdae7bE($0,$1,$2,$3)|0);
 return ($4|0);
}
function __ZN12alloc_system3imp8allocate17hda64a4aaa6e1c210E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $out$i = 0, $return$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i = sp;
 $2 = ($1>>>0)<(9);
 if ($2) {
  $3 = (_malloc($0)|0);
  $return$0 = $3;
  STACKTOP = sp;return ($return$0|0);
 } else {
  HEAP32[$out$i>>2] = 0;
  $4 = (_posix_memalign($out$i,$1,$0)|0);
  $5 = ($4|0)==(0);
  $6 = HEAP32[$out$i>>2]|0;
  $$$i = $5 ? $6 : 0;
  $return$0 = $$$i;
  STACKTOP = sp;return ($return$0|0);
 }
 return (0)|0;
}
function __ZN12alloc_system3imp10reallocate17h7d147d5219fdae7bE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $out$i$i = 0, $return$0 = 0, $return$0$sroa$speculated$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i = sp;
 $4 = ($3>>>0)<(9);
 if ($4) {
  $5 = (_realloc($0,$2)|0);
  $return$0 = $5;
  STACKTOP = sp;return ($return$0|0);
 }
 HEAP32[$out$i$i>>2] = 0;
 $6 = (_posix_memalign($out$i$i,$3,$2)|0);
 $7 = HEAP32[$out$i$i>>2]|0;
 $8 = ($7|0)==(0|0);
 $not$ = ($6|0)!=(0);
 $9 = $not$ | $8;
 if ($9) {
  $return$0 = 0;
  STACKTOP = sp;return ($return$0|0);
 }
 $10 = ($2>>>0)<=($1>>>0);
 $return$0$sroa$speculated$i = $10 ? $2 : $1;
 _memmove(($7|0),($0|0),($return$0$sroa$speculated$i|0))|0;
 _free($0);
 $return$0 = $7;
 STACKTOP = sp;return ($return$0|0);
}
function __ZN12alloc_system3imp10deallocate17ha73d0a1042e9719aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN4core3num14from_str_radix17h5ed4a0755227895eE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith2 = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$off = 0, $$off$i47 = 0, $$off6$i52 = 0, $$off7$i54 = 0, $$overflow = 0, $$overflow3 = 0, $$same = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cond = 0, $iter$sroa$0$0$in136 = 0, $not$ = 0, $radix = 0, $result$0137 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp13 = 0, $tmp34$sroa$10$0119 = 0, $tmp34$sroa$632$0118 = 0, $tmp8 = 0, $val$0$i56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $radix = sp + 32|0;
 $tmp8 = sp + 8|0;
 $tmp13 = sp;
 HEAP32[$radix>>2] = $3;
 $$off = (($3) + -2)|0;
 $not$ = ($$off>>>0)>(34);
 if ($not$) {
  $4 = $radix;
  HEAP32[$tmp13>>2] = $4;
  $5 = ((($tmp13)) + 4|0);
  HEAP32[$5>>2] = (91);
  HEAP32[$tmp8>>2] = 2700;
  $6 = ((($tmp8)) + 4|0);
  HEAP32[$6>>2] = 1;
  $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp8)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
  $7 = ((($tmp8)) + 16|0);
  HEAP32[$7>>2] = $tmp13;
  $8 = ((($tmp8)) + 20|0);
  HEAP32[$8>>2] = 1;
  __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp8,2708);
  // unreachable;
 }
 $9 = ($2|0)==(0);
 do {
  if ($9) {
   HEAP8[$0>>0] = 1;
   $10 = ((($0)) + 1|0);
   HEAP8[$10>>0] = 0;
  } else {
   $11 = HEAP8[$1>>0]|0;
   $cond = ($11<<24>>24)==(43);
   if ($cond) {
    $12 = ((($1)) + 1|0);
    $13 = (($2) + -1)|0;
    $14 = ($13|0)==(0);
    if ($14) {
     HEAP8[$0>>0] = 1;
     $15 = ((($0)) + 1|0);
     HEAP8[$15>>0] = 0;
     break;
    } else {
     $tmp34$sroa$10$0119 = $13;$tmp34$sroa$632$0118 = $12;
    }
   } else {
    $tmp34$sroa$10$0119 = $2;$tmp34$sroa$632$0118 = $1;
   }
   $16 = (($tmp34$sroa$632$0118) + ($tmp34$sroa$10$0119)|0);
   $17 = ($3>>>0)>(36);
   if ($17) {
    __ZN4core9panicking5panic17hf2309629b2721756E(2892);
    // unreachable;
   } else {
    $iter$sroa$0$0$in136 = $tmp34$sroa$632$0118;$result$0137 = 0;
   }
   L13: while(1) {
    $18 = ((($iter$sroa$0$0$in136)) + 1|0);
    $19 = HEAP8[$iter$sroa$0$0$in136>>0]|0;
    $20 = $19&255;
    $$off$i47 = (($20) + -48)|0;
    $21 = ($$off$i47>>>0)<(10);
    do {
     if ($21) {
      $val$0$i56 = $$off$i47;
     } else {
      $$off6$i52 = (($20) + -97)|0;
      $24 = ($$off6$i52>>>0)<(26);
      if ($24) {
       $22 = (($20) + -87)|0;
       $val$0$i56 = $22;
       break;
      }
      $$off7$i54 = (($20) + -65)|0;
      $25 = ($$off7$i54>>>0)<(26);
      if (!($25)) {
       label = 18;
       break L13;
      }
      $23 = (($20) + -55)|0;
      $val$0$i56 = $23;
     }
    } while(0);
    $26 = ($val$0$i56>>>0)<($3>>>0);
    if (!($26)) {
     label = 18;
     break;
    }
    $$arith2 = Math_imul($result$0137, $3)|0;
    $$iszero = ($3|0)==(0);
    $$denom = $$iszero ? 1 : $3;
    $$div = (($$arith2>>>0) / ($$denom>>>0))&-1;
    $$same = ($$div|0)!=($result$0137|0);
    $$overflow3 = $$iszero ? 0 : $$same;
    if ($$overflow3) {
     label = 20;
     break;
    }
    $$arith = (($$arith2) + ($val$0$i56))|0;
    $$overflow = ($$arith>>>0)<($$arith2>>>0);
    if ($$overflow) {
     label = 22;
     break;
    }
    $30 = ($18|0)==($16|0);
    if ($30) {
     label = 24;
     break;
    } else {
     $iter$sroa$0$0$in136 = $18;$result$0137 = $$arith;
    }
   }
   if ((label|0) == 18) {
    HEAP8[$0>>0] = 1;
    $27 = ((($0)) + 1|0);
    HEAP8[$27>>0] = 1;
    break;
   }
   else if ((label|0) == 20) {
    HEAP8[$0>>0] = 1;
    $28 = ((($0)) + 1|0);
    HEAP8[$28>>0] = 2;
    break;
   }
   else if ((label|0) == 22) {
    HEAP8[$0>>0] = 1;
    $29 = ((($0)) + 1|0);
    HEAP8[$29>>0] = 2;
    break;
   }
   else if ((label|0) == 24) {
    HEAP8[$0>>0] = 0;
    $31 = ((($0)) + 4|0);
    HEAP32[$31>>2] = $$arith;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h065946980d4d2521E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3num14from_str_radix17h5ed4a0755227895eE($0,$1,$2,10);
 return;
}
function __ZN4drop17h1ee1e45039a9c687E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17he2dd668edb6c58b5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $builder = 0, $tmp10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $builder = sp;
 $tmp10 = sp + 8|0;
 __ZN4core3fmt8builders16debug_struct_new17hf20bda3204a7fc46E($builder,$1,7258,13);
 HEAP32[$tmp10>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17h13107e30f3c91f4cE($builder,7271,4,$tmp10,2080)|0);
 $2 = (__ZN4core3fmt8builders11DebugStruct6finish17h0059fdfd5fa3db64E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h8f389b3fcbf5a1f8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN60__LT_core__num__IntErrorKind_u20_as_u20_core__fmt__Debug_GT_3fmt17hda8eea6e2e499ab6E($2,$1)|0);
 return ($3|0);
}
function __ZN60__LT_core__num__IntErrorKind_u20_as_u20_core__fmt__Debug_GT_3fmt17hda8eea6e2e499ab6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $builder = 0, $builder1 = 0, $builder2 = 0, $builder3 = 0, $return$sroa$0$0 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $builder = sp + 48|0;
 $builder1 = sp + 32|0;
 $builder2 = sp + 16|0;
 $builder3 = sp;
 $trunc = HEAP8[$0>>0]|0;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder,$1,7275,5);
  $2 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder)|0);
  $return$sroa$0$0 = $2;
  STACKTOP = sp;return ($return$sroa$0$0|0);
  break;
 }
 case 1:  {
  __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder1,$1,7280,12);
  $3 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder1)|0);
  $return$sroa$0$0 = $3;
  STACKTOP = sp;return ($return$sroa$0$0|0);
  break;
 }
 case 2:  {
  __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder2,$1,7292,8);
  $4 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder2)|0);
  $return$sroa$0$0 = $4;
  STACKTOP = sp;return ($return$sroa$0$0|0);
  break;
 }
 case 3:  {
  __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder3,$1,7300,9);
  $5 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder3)|0);
  $return$sroa$0$0 = $5;
  STACKTOP = sp;return ($return$sroa$0$0|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN4core9panicking5panic17hf2309629b2721756E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp1 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp13 = 0, $tmp5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp1 = sp + 24|0;
 $tmp5 = sp + 16|0;
 $tmp13 = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$tmp5>>2] = $2;
 $10 = ((($tmp5)) + 4|0);
 HEAP32[$10>>2] = $3;
 HEAP32[$tmp1>>2] = $tmp5;
 $11 = ((($tmp1)) + 4|0);
 HEAP32[$11>>2] = 1;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp1)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $12 = ((($tmp1)) + 16|0);
 HEAP32[$12>>2] = 10460;
 $13 = ((($tmp1)) + 20|0);
 HEAP32[$13>>2] = 0;
 HEAP32[$tmp13>>2] = $6;
 $14 = ((($tmp13)) + 4|0);
 HEAP32[$14>>2] = $7;
 $15 = ((($tmp13)) + 8|0);
 HEAP32[$15>>2] = $9;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp1,$tmp13);
 // unreachable;
}
function __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $len = 0, $tmp1 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $index = sp + 44|0;
 $len = sp + 40|0;
 $tmp1 = sp + 16|0;
 $tmp6 = sp;
 HEAP32[$index>>2] = $1;
 HEAP32[$len>>2] = $2;
 $3 = $len;
 $4 = $index;
 HEAP32[$tmp6>>2] = $3;
 $5 = ((($tmp6)) + 4|0);
 HEAP32[$5>>2] = (142);
 $6 = ((($tmp6)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($tmp6)) + 12|0);
 HEAP32[$7>>2] = (142);
 HEAP32[$tmp1>>2] = 2740;
 $8 = ((($tmp1)) + 4|0);
 HEAP32[$8>>2] = 2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp1)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($tmp1)) + 16|0);
 HEAP32[$9>>2] = $tmp6;
 $10 = ((($tmp1)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp1,$0);
 // unreachable;
}
function __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tmp1 = 0, $tmp1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp1$byval_copy = sp + 24|0;
 $tmp1 = sp;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$tmp1>>2]=HEAP32[$0>>2]|0;HEAP32[$tmp1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$tmp1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$tmp1+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$tmp1+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$tmp1+20>>2]=HEAP32[$0+20>>2]|0;
 ;HEAP32[$tmp1$byval_copy>>2]=HEAP32[$tmp1>>2]|0;HEAP32[$tmp1$byval_copy+4>>2]=HEAP32[$tmp1+4>>2]|0;HEAP32[$tmp1$byval_copy+8>>2]=HEAP32[$tmp1+8>>2]|0;HEAP32[$tmp1$byval_copy+12>>2]=HEAP32[$tmp1+12>>2]|0;HEAP32[$tmp1$byval_copy+16>>2]=HEAP32[$tmp1+16>>2]|0;HEAP32[$tmp1$byval_copy+20>>2]=HEAP32[$tmp1+20>>2]|0;
 _rust_begin_unwind($tmp1$byval_copy,$3,$4,$6);
 // unreachable;
}
function __ZN4drop17h1ee1e45039a9c687E_837($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3fmt9Formatter3pad17he78eabd2d8715314E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast$i$i$i$i = 0, $$cast$i$i21$i$i = 0, $$fca$0$load$i$i = 0, $$fca$1$load$i$i = 0, $$fca$2$gep$phi$trans$insert$i$i = 0, $$fca$2$load$i$i = 0, $$fca$2$load$pre$i$i = 0, $$fca$3$load$i$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$repack10$i$i = 0, $$repack12$i$i = 0, $$repack14$i$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $accum$0$lcssa$i$i = 0, $accum$0$lcssa$i$i45 = 0;
 var $accum$019$i$i = 0, $accum$019$i$i35 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $buf$i$i = 0, $buf21$i$i = 0, $cond$i = 0, $extract$t$i = 0, $fill$i = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$1$i$i = 0, $iter$sroa$0$1$i$i37 = 0, $iter$sroa$0$2$i$i = 0, $iter$sroa$0$2$i$i39 = 0, $iter$sroa$0$3$i$i = 0, $iter$sroa$0$3$i$i41 = 0, $iter$sroa$0$5$ph$i$i = 0, $iter$sroa$0$5$ph$i$i43 = 0, $iter2$sroa$0$0$i = 0, $n$020$i$i = 0;
 var $not$$i$i = 0, $not$switch4$i$i = 0, $not$switch4$i3$i = 0, $not$switch4$i5$i = 0, $or$cond = 0, $or$cond$i$i = 0, $pos$0$i$i = 0, $return$sroa$0$0 = 0, $s1$sroa$10$0 = 0, $s1$sroa$10$0105 = 0, $scevgep$i$i = 0, $scevgep17$i$i = 0, $scevgep18$i$i = 0, $scevgep1819$i$i = 0, $scevgep22$i$i = 0, $scevgep2223$i$i = 0, $switch = 0, $tmp13$sroa$0$0 = 0, $tmp3$sroa$0$0$i = 0, $tmp3$sroa$6$0$i = 0;
 var $umax$i$i = 0, $umax20$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $buf$i$i = sp + 16|0;
 $fill$i = sp + 8|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 $$phi$trans$insert = ((($0)) + 20|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $switch = ($$pre|0)==(1);
 if ($6) {
  if ($switch) {
   label = 6;
  } else {
   $s1$sroa$10$0105 = $2;
  }
 } else {
  if ($switch) {
   label = 6;
  } else {
   $7 = ((($0)) + 28|0);
   $8 = ((($0)) + 32|0);
   $9 = HEAP32[$7>>2]|0;
   $10 = HEAP32[$8>>2]|0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_iiii[$12 & 255]($9,$1,$2)|0);
   $return$sroa$0$0 = $13;
   STACKTOP = sp;return ($return$sroa$0$0|0);
  }
 }
 if ((label|0) == 6) {
  $14 = ((($0)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($1) + ($2)|0);
  $17 = ($15|0)==(0);
  $18 = ($2|0)==(0);
  $or$cond = $17 | $18;
  L8: do {
   if ($or$cond) {
    $s1$sroa$10$0 = 0;
   } else {
    $19 = $1;
    $$cast$i$i21$i$i = $1;$21 = $19;$n$020$i$i = $15;$tmp13$sroa$0$0 = 0;
    while(1) {
     $26 = ((($$cast$i$i21$i$i)) + 1|0);
     $27 = HEAP8[$$cast$i$i21$i$i>>0]|0;
     $28 = ($27<<24>>24)>(-1);
     $29 = $26;
     if ($28) {
      $23 = $29;
     } else {
      $30 = ($26|0)==($16|0);
      $31 = ((($$cast$i$i21$i$i)) + 2|0);
      $32 = $31;
      $33 = $30 ? $29 : $32;
      $34 = $30 ? $16 : $31;
      $35 = ($27&255)>(223);
      if ($35) {
       $36 = ($34|0)==($16|0);
       $37 = ((($34)) + 1|0);
       $38 = $37;
       $39 = $36 ? $33 : $38;
       $40 = $36 ? $16 : $37;
       $41 = ($27&255)>(239);
       if ($41) {
        $42 = ($40|0)==($16|0);
        $43 = ((($40)) + 1|0);
        $44 = $43;
        $45 = $42 ? $39 : $44;
        $23 = $45;
       } else {
        $23 = $39;
       }
      } else {
       $23 = $33;
      }
     }
     $46 = ($n$020$i$i|0)==(0);
     if ($46) {
      break;
     }
     $20 = (($tmp13$sroa$0$0) - ($21))|0;
     $22 = (($20) + ($23))|0;
     $24 = (($n$020$i$i) + -1)|0;
     $$cast$i$i$i$i = $23;
     $25 = ($$cast$i$i$i$i|0)==($16|0);
     if ($25) {
      $s1$sroa$10$0 = $2;
      break L8;
     } else {
      $$cast$i$i21$i$i = $$cast$i$i$i$i;$21 = $23;$n$020$i$i = $24;$tmp13$sroa$0$0 = $22;
     }
    }
    $47 = ($tmp13$sroa$0$0|0)==(0);
    $48 = ($tmp13$sroa$0$0|0)==($2|0);
    $or$cond$i$i = $47 | $48;
    if ($or$cond$i$i) {
     $s1$sroa$10$0 = $tmp13$sroa$0$0;
    } else {
     $not$$i$i = ($tmp13$sroa$0$0>>>0)<($2>>>0);
     if (!($not$$i$i)) {
      __ZN4core3str16slice_error_fail17hec153863008515e9E($1,$2,0,$tmp13$sroa$0$0);
      // unreachable;
     }
     $49 = (($1) + ($tmp13$sroa$0$0)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ($50<<24>>24)>(-65);
     if ($51) {
      $s1$sroa$10$0 = $tmp13$sroa$0$0;
     } else {
      __ZN4core3str16slice_error_fail17hec153863008515e9E($1,$2,0,$tmp13$sroa$0$0);
      // unreachable;
     }
    }
   }
  } while(0);
  if ($6) {
   $s1$sroa$10$0105 = $s1$sroa$10$0;
  } else {
   $52 = ((($0)) + 28|0);
   $53 = ((($0)) + 32|0);
   $54 = HEAP32[$52>>2]|0;
   $55 = HEAP32[$53>>2]|0;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (FUNCTION_TABLE_iiii[$57 & 255]($54,$1,$s1$sroa$10$0)|0);
   $return$sroa$0$0 = $58;
   STACKTOP = sp;return ($return$sroa$0$0|0);
  }
 }
 $66 = ((($0)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($1) + ($s1$sroa$10$0105)|0);
 $69 = ($s1$sroa$10$0105|0)==(0);
 if ($69) {
  $accum$0$lcssa$i$i45 = 0;
 } else {
  $71 = $1;$accum$019$i$i35 = 0;
  while(1) {
   $70 = ((($71)) + 1|0);
   $72 = $70;
   $73 = HEAP8[$71>>0]|0;
   $74 = ($73<<24>>24)>(-1);
   if ($74) {
    $iter$sroa$0$5$ph$i$i43 = $72;
   } else {
    $75 = ($70|0)==($68|0);
    $76 = ((($71)) + 2|0);
    $77 = $76;
    $iter$sroa$0$1$i$i37 = $75 ? $72 : $77;
    $78 = $75 ? $68 : $76;
    $79 = ($73&255)>(223);
    if ($79) {
     $80 = ($78|0)==($68|0);
     $81 = ((($78)) + 1|0);
     $82 = $81;
     $iter$sroa$0$2$i$i39 = $80 ? $iter$sroa$0$1$i$i37 : $82;
     $83 = $80 ? $68 : $81;
     $84 = ($73&255)>(239);
     if ($84) {
      $85 = ($83|0)==($68|0);
      $86 = ((($83)) + 1|0);
      $87 = $86;
      $iter$sroa$0$3$i$i41 = $85 ? $iter$sroa$0$2$i$i39 : $87;
      $iter$sroa$0$5$ph$i$i43 = $iter$sroa$0$3$i$i41;
     } else {
      $iter$sroa$0$5$ph$i$i43 = $iter$sroa$0$2$i$i39;
     }
    } else {
     $iter$sroa$0$5$ph$i$i43 = $iter$sroa$0$1$i$i37;
    }
   }
   $88 = (($accum$019$i$i35) + 1)|0;
   $89 = $iter$sroa$0$5$ph$i$i43;
   $90 = ($89|0)==($68|0);
   if ($90) {
    $accum$0$lcssa$i$i45 = $88;
    break;
   } else {
    $71 = $89;$accum$019$i$i35 = $88;
   }
  }
 }
 $91 = ($accum$0$lcssa$i$i45>>>0)<($67>>>0);
 if (!($91)) {
  $59 = ((($0)) + 28|0);
  $60 = ((($0)) + 32|0);
  $61 = HEAP32[$59>>2]|0;
  $62 = HEAP32[$60>>2]|0;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_iiii[$64 & 255]($61,$1,$s1$sroa$10$0105)|0);
  $return$sroa$0$0 = $65;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 if ($69) {
  $accum$0$lcssa$i$i = 0;
 } else {
  $93 = $1;$accum$019$i$i = 0;
  while(1) {
   $92 = ((($93)) + 1|0);
   $94 = $92;
   $95 = HEAP8[$93>>0]|0;
   $96 = ($95<<24>>24)>(-1);
   if ($96) {
    $iter$sroa$0$5$ph$i$i = $94;
   } else {
    $97 = ($92|0)==($68|0);
    $98 = ((($93)) + 2|0);
    $99 = $98;
    $iter$sroa$0$1$i$i = $97 ? $94 : $99;
    $100 = $97 ? $68 : $98;
    $101 = ($95&255)>(223);
    if ($101) {
     $102 = ($100|0)==($68|0);
     $103 = ((($100)) + 1|0);
     $104 = $103;
     $iter$sroa$0$2$i$i = $102 ? $iter$sroa$0$1$i$i : $104;
     $105 = $102 ? $68 : $103;
     $106 = ($95&255)>(239);
     if ($106) {
      $107 = ($105|0)==($68|0);
      $108 = ((($105)) + 1|0);
      $109 = $108;
      $iter$sroa$0$3$i$i = $107 ? $iter$sroa$0$2$i$i : $109;
      $iter$sroa$0$5$ph$i$i = $iter$sroa$0$3$i$i;
     } else {
      $iter$sroa$0$5$ph$i$i = $iter$sroa$0$2$i$i;
     }
    } else {
     $iter$sroa$0$5$ph$i$i = $iter$sroa$0$1$i$i;
    }
   }
   $110 = (($accum$019$i$i) + 1)|0;
   $111 = $iter$sroa$0$5$ph$i$i;
   $112 = ($111|0)==($68|0);
   if ($112) {
    $accum$0$lcssa$i$i = $110;
    break;
   } else {
    $93 = $111;$accum$019$i$i = $110;
   }
  }
 }
 $113 = (($67) - ($accum$0$lcssa$i$i))|0;
 $114 = ((($0)) + 8|0);
 $extract$t$i = HEAP8[$114>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 0 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $tmp3$sroa$0$0$i = 0;$tmp3$sroa$6$0$i = $113;
  break;
 }
 case 3: case 1:  {
  $tmp3$sroa$0$0$i = $113;$tmp3$sroa$6$0$i = 0;
  break;
 }
 case 2:  {
  $165 = $113 >>> 1;
  $166 = (($113) + 1)|0;
  $167 = $166 >>> 1;
  $tmp3$sroa$0$0$i = $165;$tmp3$sroa$6$0$i = $167;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $115 = ((($0)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $buf21$i$i = $buf$i$i;
 $scevgep$i$i = ((($buf$i$i)) + 4|0);
 $scevgep17$i$i = $scevgep$i$i;
 $scevgep18$i$i = ((($buf$i$i)) + 1|0);
 $scevgep1819$i$i = $scevgep18$i$i;
 $117 = ($scevgep17$i$i>>>0)>($scevgep1819$i$i>>>0);
 $umax$i$i = $117 ? $scevgep17$i$i : $scevgep1819$i$i;
 $umax20$i$i = $umax$i$i;
 $118 = (0 - ($buf21$i$i))|0;
 $scevgep22$i$i = (($umax20$i$i) + ($118)|0);
 $scevgep2223$i$i = $scevgep22$i$i;
 _memset(($buf$i$i|0),0,($scevgep2223$i$i|0))|0;
 $119 = ($116>>>0)<(128);
 do {
  if ($119) {
   $121 = ((($buf$i$i)) + 3|0);
   $122 = $116&255;
   HEAP8[$121>>0] = $122;
   $$fca$2$gep$phi$trans$insert$i$i = ((($buf$i$i)) + 2|0);
   $$fca$2$load$pre$i$i = HEAP8[$$fca$2$gep$phi$trans$insert$i$i>>0]|0;
   $$fca$2$load$i$i = $$fca$2$load$pre$i$i;$$fca$3$load$i$i = $122;$pos$0$i$i = 3;
  } else {
   $120 = ($116>>>0)<(2048);
   if ($120) {
    $123 = $116 >>> 6;
    $124 = $123 & 31;
    $125 = $124&255;
    $126 = ((($buf$i$i)) + 2|0);
    $127 = $125 | -64;
    HEAP8[$126>>0] = $127;
    $128 = $116 & 63;
    $129 = $128&255;
    $130 = ((($buf$i$i)) + 3|0);
    $131 = $129 | -128;
    HEAP8[$130>>0] = $131;
    $$fca$2$load$i$i = $127;$$fca$3$load$i$i = $131;$pos$0$i$i = 2;
    break;
   }
   $132 = ($116>>>0)<(65536);
   if ($132) {
    $133 = $116 >>> 12;
    $134 = $133 & 15;
    $135 = $134&255;
    $136 = $135 | -32;
    HEAP8[$scevgep18$i$i>>0] = $136;
    $137 = $116 >>> 6;
    $138 = $137 & 63;
    $139 = $138&255;
    $140 = ((($buf$i$i)) + 2|0);
    $141 = $139 | -128;
    HEAP8[$140>>0] = $141;
    $142 = $116 & 63;
    $143 = $142&255;
    $144 = ((($buf$i$i)) + 3|0);
    $145 = $143 | -128;
    HEAP8[$144>>0] = $145;
    $$fca$2$load$i$i = $141;$$fca$3$load$i$i = $145;$pos$0$i$i = 1;
    break;
   } else {
    $146 = $116 >>> 18;
    $147 = $146&255;
    $148 = $147 | -16;
    HEAP8[$buf$i$i>>0] = $148;
    $149 = $116 >>> 12;
    $150 = $149 & 63;
    $151 = $150&255;
    $152 = $151 | -128;
    HEAP8[$scevgep18$i$i>>0] = $152;
    $153 = $116 >>> 6;
    $154 = $153 & 63;
    $155 = $154&255;
    $156 = ((($buf$i$i)) + 2|0);
    $157 = $155 | -128;
    HEAP8[$156>>0] = $157;
    $158 = $116 & 63;
    $159 = $158&255;
    $160 = ((($buf$i$i)) + 3|0);
    $161 = $159 | -128;
    HEAP8[$160>>0] = $161;
    $$fca$2$load$i$i = $157;$$fca$3$load$i$i = $161;$pos$0$i$i = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load$i$i = HEAP8[$buf$i$i>>0]|0;
 $$fca$1$load$i$i = HEAP8[$scevgep18$i$i>>0]|0;
 HEAP8[$fill$i>>0] = $$fca$0$load$i$i;
 $$repack10$i$i = ((($fill$i)) + 1|0);
 HEAP8[$$repack10$i$i>>0] = $$fca$1$load$i$i;
 $$repack12$i$i = ((($fill$i)) + 2|0);
 HEAP8[$$repack12$i$i>>0] = $$fca$2$load$i$i;
 $$repack14$i$i = ((($fill$i)) + 3|0);
 HEAP8[$$repack14$i$i>>0] = $$fca$3$load$i$i;
 $162 = ((($fill$i)) + 4|0);
 HEAP32[$162>>2] = $pos$0$i$i;
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($3,$fill$i);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $163 = ((($0)) + 28|0);
 $164 = ((($0)) + 32|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $168 = ($iter$sroa$0$0$i>>>0)<($tmp3$sroa$0$0$i>>>0);
  $169 = HEAP32[$163>>2]|0;
  $170 = HEAP32[$164>>2]|0;
  if (!($168)) {
   break;
  }
  $171 = (($iter$sroa$0$0$i) + 1)|0;
  $172 = ((($170)) + 12|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (FUNCTION_TABLE_iiii[$173 & 255]($169,$$sreg$field,$$sreg$field2)|0);
  $not$switch4$i5$i = ($174<<24>>24)==(0);
  if ($not$switch4$i5$i) {
   $iter$sroa$0$0$i = $171;
  } else {
   label = 48;
   break;
  }
 }
 if ((label|0) == 48) {
  $return$sroa$0$0 = 1;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 $175 = ((($170)) + 12|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (FUNCTION_TABLE_iiii[$176 & 255]($169,$1,$s1$sroa$10$0105)|0);
 $not$switch4$i3$i = ($177<<24>>24)==(0);
 if ($not$switch4$i3$i) {
  $iter2$sroa$0$0$i = 0;
 } else {
  $return$sroa$0$0 = 1;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 while(1) {
  $178 = ($iter2$sroa$0$0$i>>>0)<($tmp3$sroa$6$0$i>>>0);
  if (!($178)) {
   label = 52;
   break;
  }
  $179 = (($iter2$sroa$0$0$i) + 1)|0;
  $180 = HEAP32[$163>>2]|0;
  $181 = HEAP32[$164>>2]|0;
  $182 = ((($181)) + 12|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (FUNCTION_TABLE_iiii[$183 & 255]($180,$$sreg$field,$$sreg$field2)|0);
  $not$switch4$i$i = ($184<<24>>24)==(0);
  if ($not$switch4$i$i) {
   $iter2$sroa$0$0$i = $179;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 52) {
  $return$sroa$0$0 = 0;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 else if ((label|0) == 53) {
  $return$sroa$0$0 = 1;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3fmt5write17h02db2923adb244ceE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx = 0, $$sroa_idx163 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args$sroa$0$0$copyload = 0, $args$sroa$12$0$$sroa_idx79 = 0, $args$sroa$12$0$copyload = 0;
 var $args$sroa$5$0$$sroa_idx64 = 0, $args$sroa$5$0$copyload = 0, $args$sroa$6$0$$sroa_idx67 = 0, $args$sroa$6$0$copyload = 0, $args$sroa$8$0$$sroa_idx71 = 0, $args$sroa$8$0$copyload = 0, $args$sroa$9$0$$sroa_idx74 = 0, $args$sroa$9$0$copyload = 0, $formatter = 0, $iter$sroa$0$0 = 0, $iter2$sroa$0$0$in = 0, $not$switch4$i = 0, $not$switch4$i84 = 0, $not$switch4$i90 = 0, $not$switch4$i92 = 0, $not$switch4$i94 = 0, $or$cond = 0, $pieces$sroa$0$0 = 0, $pieces$sroa$0$1 = 0, $pieces$sroa$0$4 = 0;
 var $return$sroa$0$0 = 0, $switch$i = 0, $switch28tmp = 0, $switch29tmp = 0, $switchtmp = 0, $tmp0$sroa$0$0$$sroa_idx = 0, $tmp1$sroa$0$0$$sroa_idx = 0, $tmp3$sroa$8$2$i = 0, $tmp7$sroa$8$2$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i5$i = 0, $trunc$i5$i$clear = 0, $value$sroa$0$0$i = 0, $value$sroa$0$0$in$i = 0, $value$sroa$5$0$i = 0, $value$sroa$5$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $formatter = sp;
 $args$sroa$0$0$copyload = HEAP32[$2>>2]|0;
 $args$sroa$5$0$$sroa_idx64 = ((($2)) + 4|0);
 $args$sroa$5$0$copyload = HEAP32[$args$sroa$5$0$$sroa_idx64>>2]|0;
 $args$sroa$6$0$$sroa_idx67 = ((($2)) + 8|0);
 $args$sroa$6$0$copyload = HEAP32[$args$sroa$6$0$$sroa_idx67>>2]|0;
 $args$sroa$8$0$$sroa_idx71 = ((($2)) + 12|0);
 $args$sroa$8$0$copyload = HEAP32[$args$sroa$8$0$$sroa_idx71>>2]|0;
 $args$sroa$9$0$$sroa_idx74 = ((($2)) + 16|0);
 $args$sroa$9$0$copyload = HEAP32[$args$sroa$9$0$$sroa_idx74>>2]|0;
 $args$sroa$12$0$$sroa_idx79 = ((($2)) + 20|0);
 $args$sroa$12$0$copyload = HEAP32[$args$sroa$12$0$$sroa_idx79>>2]|0;
 $3 = (($args$sroa$9$0$copyload) + ($args$sroa$12$0$copyload<<3)|0);
 $4 = $args$sroa$9$0$copyload;
 $5 = $3;
 HEAP32[$formatter>>2] = 0;
 $6 = ((($formatter)) + 4|0);
 HEAP32[$6>>2] = 32;
 $7 = ((($formatter)) + 8|0);
 HEAP8[$7>>0] = 3;
 $tmp0$sroa$0$0$$sroa_idx = ((($formatter)) + 12|0);
 HEAP32[$tmp0$sroa$0$0$$sroa_idx>>2] = 0;
 $tmp1$sroa$0$0$$sroa_idx = ((($formatter)) + 20|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx>>2] = 0;
 $8 = ((($formatter)) + 28|0);
 HEAP32[$8>>2] = $0;
 $9 = ((($formatter)) + 32|0);
 HEAP32[$9>>2] = $1;
 $$sroa_idx = ((($formatter)) + 36|0);
 HEAP32[$$sroa_idx>>2] = $4;
 $$sroa_idx163 = ((($formatter)) + 40|0);
 HEAP32[$$sroa_idx163>>2] = $5;
 $10 = ((($formatter)) + 44|0);
 HEAP32[$10>>2] = $args$sroa$9$0$copyload;
 $11 = ((($formatter)) + 48|0);
 HEAP32[$11>>2] = $args$sroa$12$0$copyload;
 $12 = (($args$sroa$0$0$copyload) + ($args$sroa$5$0$copyload<<3)|0);
 $switch28tmp = ($args$sroa$6$0$copyload|0)==(0|0);
 L1: do {
  if ($switch28tmp) {
   $iter$sroa$0$0 = $4;$pieces$sroa$0$1 = $args$sroa$0$0$copyload;
   while(1) {
    $14 = $iter$sroa$0$0;
    $15 = ($14|0)==($3|0);
    if ($15) {
     $pieces$sroa$0$0 = $pieces$sroa$0$1;
     label = 2;
     break L1;
    }
    $16 = ((($14)) + 8|0);
    $17 = $16;
    $18 = ($pieces$sroa$0$1|0)==($12|0);
    if ($18) {
     label = 43;
     break L1;
    }
    $19 = ((($pieces$sroa$0$1)) + 8|0);
    $switchtmp = ($iter$sroa$0$0|0)==(0);
    if ($switchtmp) {
     $pieces$sroa$0$0 = $19;
     label = 2;
     break L1;
    }
    $20 = HEAP32[$8>>2]|0;
    $21 = HEAP32[$9>>2]|0;
    $22 = ((($pieces$sroa$0$1)) + 4|0);
    $23 = HEAP32[$pieces$sroa$0$1>>2]|0;
    $24 = HEAP32[$22>>2]|0;
    $25 = ((($21)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 255]($20,$23,$24)|0);
    $not$switch4$i94 = ($27<<24>>24)==(0);
    if (!($not$switch4$i94)) {
     label = 9;
     break L1;
    }
    $28 = ((($14)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$14>>2]|0;
    $31 = (FUNCTION_TABLE_iii[$29 & 255]($30,$formatter)|0);
    $not$switch4$i92 = ($31<<24>>24)==(0);
    if ($not$switch4$i92) {
     $iter$sroa$0$0 = $17;$pieces$sroa$0$1 = $19;
    } else {
     label = 9;
     break;
    }
   }
  } else {
   $32 = (($args$sroa$6$0$copyload) + (($args$sroa$8$0$copyload*36)|0)|0);
   $33 = ((($formatter)) + 12|0);
   $34 = ((($formatter)) + 20|0);
   $35 = ((($formatter)) + 36|0);
   $iter2$sroa$0$0$in = $args$sroa$6$0$copyload;$pieces$sroa$0$4 = $args$sroa$0$0$copyload;
   L9: while(1) {
    $36 = ($iter2$sroa$0$0$in|0)==($32|0);
    if ($36) {
     $pieces$sroa$0$0 = $pieces$sroa$0$4;
     label = 2;
     break L1;
    }
    $37 = ((($iter2$sroa$0$0$in)) + 36|0);
    $38 = ($pieces$sroa$0$4|0)==($12|0);
    if ($38) {
     label = 43;
     break L1;
    }
    $39 = ((($pieces$sroa$0$4)) + 8|0);
    $40 = HEAP32[$8>>2]|0;
    $41 = HEAP32[$9>>2]|0;
    $42 = ((($pieces$sroa$0$4)) + 4|0);
    $43 = HEAP32[$pieces$sroa$0$4>>2]|0;
    $44 = HEAP32[$42>>2]|0;
    $45 = ((($41)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_iiii[$46 & 255]($40,$43,$44)|0);
    $not$switch4$i90 = ($47<<24>>24)==(0);
    if (!($not$switch4$i90)) {
     label = 9;
     break L1;
    }
    $48 = ((($iter2$sroa$0$0$in)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$6>>2] = $49;
    $50 = ((($iter2$sroa$0$0$in)) + 12|0);
    $51 = HEAP8[$50>>0]|0;
    HEAP8[$7>>0] = $51;
    $52 = ((($iter2$sroa$0$0$in)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$formatter>>2] = $53;
    $54 = ((($iter2$sroa$0$0$in)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $trunc$i$i = $55&255;
    $trunc$i$i$clear = $trunc$i$i & 3;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     $56 = ((($iter2$sroa$0$0$in)) + 32|0);
     $57 = HEAP32[$56>>2]|0;
     $79 = 0;$82 = 1;$tmp3$sroa$8$2$i = $57;
     break;
    }
    case 1:  {
     $58 = ((($iter2$sroa$0$0$in)) + 32|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$11>>2]|0;
     $61 = ($59>>>0)<($60>>>0);
     if (!($61)) {
      label = 23;
      break L9;
     }
     $71 = HEAP32[$10>>2]|0;
     $72 = (((($71) + ($59<<3)|0)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==((143)|0);
     if ($74) {
      $75 = (($71) + ($59<<3)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = HEAP32[$76>>2]|0;
      $79 = 0;$82 = 1;$tmp3$sroa$8$2$i = $77;
     } else {
      $79 = 0;$82 = 0;$tmp3$sroa$8$2$i = 0;
     }
     break;
    }
    case 2:  {
     $62 = HEAP32[$35>>2]|0;
     $63 = HEAP32[$$sroa_idx163>>2]|0;
     $64 = ($62|0)==($63|0);
     if ($64) {
      $79 = 0;$82 = 0;$tmp3$sroa$8$2$i = 0;
     } else {
      $65 = ((($62)) + 8|0);
      HEAP32[$35>>2] = $65;
      $66 = ((($62)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==((143)|0);
      if ($68) {
       $69 = HEAP32[$62>>2]|0;
       $70 = HEAP32[$69>>2]|0;
       $79 = 0;$82 = 1;$tmp3$sroa$8$2$i = $70;
      } else {
       $79 = 0;$82 = 0;$tmp3$sroa$8$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $79 = 0;$82 = 0;$tmp3$sroa$8$2$i = 0;
     break;
    }
    default: {
     label = 22;
     break L9;
    }
    }
    $78 = $tmp3$sroa$8$2$i | $79;
    $80 = $33;
    $81 = $80;
    HEAP32[$81>>2] = $82;
    $83 = (($80) + 4)|0;
    $84 = $83;
    HEAP32[$84>>2] = $78;
    $85 = ((($iter2$sroa$0$0$in)) + 20|0);
    $86 = HEAP32[$85>>2]|0;
    $trunc$i5$i = $86&255;
    $trunc$i5$i$clear = $trunc$i5$i & 3;
    switch ($trunc$i5$i$clear<<24>>24) {
    case 0:  {
     $87 = ((($iter2$sroa$0$0$in)) + 24|0);
     $88 = HEAP32[$87>>2]|0;
     $110 = 0;$113 = 1;$tmp7$sroa$8$2$i = $88;
     break;
    }
    case 1:  {
     $89 = ((($iter2$sroa$0$0$in)) + 24|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = HEAP32[$11>>2]|0;
     $92 = ($90>>>0)<($91>>>0);
     if (!($92)) {
      label = 33;
      break L9;
     }
     $102 = HEAP32[$10>>2]|0;
     $103 = (((($102) + ($90<<3)|0)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==((143)|0);
     if ($105) {
      $106 = (($102) + ($90<<3)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[$107>>2]|0;
      $110 = 0;$113 = 1;$tmp7$sroa$8$2$i = $108;
     } else {
      $110 = 0;$113 = 0;$tmp7$sroa$8$2$i = 0;
     }
     break;
    }
    case 2:  {
     $93 = HEAP32[$35>>2]|0;
     $94 = HEAP32[$$sroa_idx163>>2]|0;
     $95 = ($93|0)==($94|0);
     if ($95) {
      $110 = 0;$113 = 0;$tmp7$sroa$8$2$i = 0;
     } else {
      $96 = ((($93)) + 8|0);
      HEAP32[$35>>2] = $96;
      $97 = ((($93)) + 4|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==((143)|0);
      if ($99) {
       $100 = HEAP32[$93>>2]|0;
       $101 = HEAP32[$100>>2]|0;
       $110 = 0;$113 = 1;$tmp7$sroa$8$2$i = $101;
      } else {
       $110 = 0;$113 = 0;$tmp7$sroa$8$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $110 = 0;$113 = 0;$tmp7$sroa$8$2$i = 0;
     break;
    }
    default: {
     label = 32;
     break L9;
    }
    }
    $109 = $tmp7$sroa$8$2$i | $110;
    $111 = $34;
    $112 = $111;
    HEAP32[$112>>2] = $113;
    $114 = (($111) + 4)|0;
    $115 = $114;
    HEAP32[$115>>2] = $109;
    $116 = HEAP32[$iter2$sroa$0$0$in>>2]|0;
    $switch$i = ($116|0)==(1);
    if ($switch$i) {
     $122 = ((($iter2$sroa$0$0$in)) + 4|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP32[$11>>2]|0;
     $125 = ($123>>>0)<($124>>>0);
     if (!($125)) {
      label = 41;
      break;
     }
     $127 = HEAP32[$10>>2]|0;
     $128 = (($127) + ($123<<3)|0);
     $129 = (((($127) + ($123<<3)|0)) + 4|0);
     $value$sroa$0$0$in$i = $128;$value$sroa$5$0$in$i = $129;
    } else {
     $117 = HEAP32[$35>>2]|0;
     $118 = HEAP32[$$sroa_idx163>>2]|0;
     $119 = ($117|0)==($118|0);
     if ($119) {
      label = 37;
      break;
     }
     $120 = ((($117)) + 8|0);
     HEAP32[$35>>2] = $120;
     $121 = ((($117)) + 4|0);
     $value$sroa$0$0$in$i = $117;$value$sroa$5$0$in$i = $121;
    }
    $value$sroa$5$0$i = HEAP32[$value$sroa$5$0$in$i>>2]|0;
    $value$sroa$0$0$i = HEAP32[$value$sroa$0$0$in$i>>2]|0;
    $126 = (FUNCTION_TABLE_iii[$value$sroa$5$0$i & 255]($value$sroa$0$0$i,$formatter)|0);
    $not$switch4$i84 = ($126<<24>>24)==(0);
    if ($not$switch4$i84) {
     $iter2$sroa$0$0$in = $37;$pieces$sroa$0$4 = $39;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label|0) == 22) {
    // unreachable;
   }
   else if ((label|0) == 23) {
    __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2764,$59,$60);
    // unreachable;
   }
   else if ((label|0) == 32) {
    // unreachable;
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2764,$90,$91);
    // unreachable;
   }
   else if ((label|0) == 37) {
    __ZN4core9panicking5panic17hf2309629b2721756E(2720);
    // unreachable;
   }
   else if ((label|0) == 41) {
    __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2776,$123,$124);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 2) {
  $13 = ($pieces$sroa$0$0|0)==($12|0);
  $switch29tmp = ($pieces$sroa$0$0|0)==(0|0);
  $or$cond = $13 | $switch29tmp;
  if ($or$cond) {
   label = 43;
  } else {
   $130 = HEAP32[$8>>2]|0;
   $131 = HEAP32[$9>>2]|0;
   $132 = ((($pieces$sroa$0$0)) + 4|0);
   $133 = HEAP32[$pieces$sroa$0$0>>2]|0;
   $134 = HEAP32[$132>>2]|0;
   $135 = ((($131)) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (FUNCTION_TABLE_iiii[$136 & 255]($130,$133,$134)|0);
   $not$switch4$i = ($137<<24>>24)==(0);
   if ($not$switch4$i) {
    label = 43;
   } else {
    label = 9;
   }
  }
 }
 if ((label|0) == 9) {
  $return$sroa$0$0 = 1;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 else if ((label|0) == 43) {
  $return$sroa$0$0 = 0;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV110show_usize17h9d1afd9306f3a633E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb0bd39a04aff181E($0,$1)|0);
 return ($2|0);
}
function __ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $msg = 0, $tmp1 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $msg = sp + 32|0;
 $tmp1 = sp + 8|0;
 $tmp6 = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = $msg;
 HEAP32[$tmp6>>2] = $3;
 $4 = ((($tmp6)) + 4|0);
 HEAP32[$4>>2] = (144);
 HEAP32[$tmp1>>2] = 2756;
 $5 = ((($tmp1)) + 4|0);
 HEAP32[$5>>2] = 1;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp1)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $6 = ((($tmp1)) + 16|0);
 HEAP32[$6>>2] = $tmp6;
 $7 = ((($tmp1)) + 20|0);
 HEAP32[$7>>2] = 1;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp1,2788);
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_844($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN4core3fmt9Formatter3pad17he78eabd2d8715314E($1,$3,$4)|0);
 return ($5|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h689f6b1d580204e7E_845($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17h21e5616eda417818E($2,$1)|0);
 return ($3|0);
}
function __ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17he908de228f92c287E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i44 = 0, $$cast$i = 0, $$cast$i138 = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $esc = 0, $from$0$lcssa149 = 0;
 var $from$0$lcssa150 = 0, $from$0137 = 0, $from$1 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0135 = 0, $iter$sroa$6$0136 = 0, $iter$sroa$6$1 = 0, $iter$sroa$6$2 = 0, $iter$sroa$6$3 = 0, $iter$sroa$6$4 = 0, $iter2 = 0, $left_val$i = 0, $not$$i$i = 0, $not$$i$i53 = 0, $not$$i2$i = 0, $not$switch4$i = 0, $not$switch4$i42 = 0, $not$switch4$i45 = 0, $not$switch4$i58 = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i52 = 0, $or$cond$i1$i = 0, $phitmp$i$i$i = 0, $phitmp32$i$i$i = 0, $phitmp33$i$i$i = 0, $return$0$i = 0, $return$0$i10$i$i$i = 0, $return$0$i16$i$i$i = 0, $return$0$i23$i$i$i = 0, $return$sroa$0$0 = 0, $right_val$i = 0, $switch23 = 0, $tmp0$i = 0, $tmp1$sroa$0$0$$sroa_idx$i$i = 0, $tmp1$sroa$4$0$ph$i = 0, $tmp13$i = 0, $tmp18$i = 0, $tmp42 = 0;
 var $tmp6$i = 0, $tmp6$sroa$0$sroa$4$0$tmp6$sroa$0$0$$sroa_cast3$sroa_idx26$i = 0, $tmp6$sroa$0$sroa$5$0$tmp6$sroa$0$0$$sroa_cast3$sroa_idx$i = 0, $upper$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $upper$i = sp + 104|0;
 $left_val$i = sp + 116|0;
 $right_val$i = sp + 112|0;
 $tmp0$i = sp + 88|0;
 $tmp6$i = sp + 80|0;
 $tmp13$i = sp + 56|0;
 $tmp18$i = sp + 40|0;
 $esc = sp + 24|0;
 $iter2 = sp + 8|0;
 $tmp42 = sp;
 $3 = ((($2)) + 28|0);
 $4 = ((($2)) + 32|0);
 $5 = HEAP32[$3>>2]|0;
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 255]($5,34)|0);
 $not$switch4$i = ($9<<24>>24)==(0);
 if (!($not$switch4$i)) {
  $return$sroa$0$0 = 1;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 $10 = (($0) + ($1)|0);
 $11 = ($1|0)==(0);
 do {
  if ($11) {
   $from$0$lcssa149 = 0;
   label = 17;
  } else {
   $12 = $0;
   $tmp6$sroa$0$sroa$4$0$tmp6$sroa$0$0$$sroa_cast3$sroa_idx26$i = ((($esc)) + 4|0);
   $tmp6$sroa$0$sroa$5$0$tmp6$sroa$0$0$$sroa_cast3$sroa_idx$i = ((($esc)) + 8|0);
   $13 = ((($tmp0$i)) + 4|0);
   $14 = ((($tmp6$i)) + 4|0);
   $15 = ((($tmp42)) + 4|0);
   $$cast$i138 = $0;$from$0137 = 0;$iter$sroa$0$0135 = 0;$iter$sroa$6$0136 = $12;
   L6: while(1) {
    $18 = ((($$cast$i138)) + 1|0);
    $19 = $18;
    $17 = HEAP8[$$cast$i138>>0]|0;
    $20 = ($17<<24>>24)>(-1);
    if ($20) {
     $16 = $17&255;
     $iter$sroa$6$4 = $19;$tmp1$sroa$4$0$ph$i = $16;
    } else {
     $21 = $17 & 31;
     $22 = $21&255;
     $23 = ($18|0)==($10|0);
     if ($23) {
      $31 = $10;$iter$sroa$6$1 = $19;$return$0$i23$i$i$i = 0;
     } else {
      $24 = ((($$cast$i138)) + 2|0);
      $25 = $24;
      $26 = HEAP8[$18>>0]|0;
      $phitmp$i$i$i = $26 & 63;
      $31 = $24;$iter$sroa$6$1 = $25;$return$0$i23$i$i$i = $phitmp$i$i$i;
     }
     $27 = $22 << 6;
     $28 = $return$0$i23$i$i$i&255;
     $29 = $28 | $27;
     $30 = ($17&255)>(223);
     if ($30) {
      $32 = ($31|0)==($10|0);
      if ($32) {
       $42 = $10;$iter$sroa$6$2 = $iter$sroa$6$1;$return$0$i16$i$i$i = 0;
      } else {
       $33 = ((($31)) + 1|0);
       $34 = $33;
       $35 = HEAP8[$31>>0]|0;
       $phitmp32$i$i$i = $35 & 63;
       $42 = $33;$iter$sroa$6$2 = $34;$return$0$i16$i$i$i = $phitmp32$i$i$i;
      }
      $36 = $28 << 6;
      $37 = $return$0$i16$i$i$i&255;
      $38 = $37 | $36;
      $39 = $22 << 12;
      $40 = $38 | $39;
      $41 = ($17&255)>(239);
      if ($41) {
       $43 = ($42|0)==($10|0);
       if ($43) {
        $iter$sroa$6$3 = $iter$sroa$6$2;$return$0$i10$i$i$i = 0;
       } else {
        $44 = ((($42)) + 1|0);
        $45 = $44;
        $46 = HEAP8[$42>>0]|0;
        $phitmp33$i$i$i = $46 & 63;
        $iter$sroa$6$3 = $45;$return$0$i10$i$i$i = $phitmp33$i$i$i;
       }
       $47 = $22 << 18;
       $48 = $47 & 1835008;
       $49 = $38 << 6;
       $50 = $return$0$i10$i$i$i&255;
       $51 = $49 | $48;
       $52 = $51 | $50;
       $iter$sroa$6$4 = $iter$sroa$6$3;$tmp1$sroa$4$0$ph$i = $52;
      } else {
       $iter$sroa$6$4 = $iter$sroa$6$2;$tmp1$sroa$4$0$ph$i = $40;
      }
     } else {
      $iter$sroa$6$4 = $iter$sroa$6$1;$tmp1$sroa$4$0$ph$i = $29;
     }
    }
    $64 = (($iter$sroa$0$0135) - ($iter$sroa$6$0136))|0;
    $65 = (($64) + ($iter$sroa$6$4))|0;
    switch ($tmp1$sroa$4$0$ph$i|0) {
    case 9:  {
     $73 = 0;$76 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
     break;
    }
    case 13:  {
     $73 = 0;$76 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
     break;
    }
    case 10:  {
     $73 = 0;$76 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
     break;
    }
    case 34: case 39: case 92:  {
     $73 = 0;$76 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $tmp1$sroa$4$0$ph$i;
     break;
    }
    default: {
     $66 = (__ZN4core12char_private12is_printable17h9c4ca9429f2bf3a7E($tmp1$sroa$4$0$ph$i)|0);
     if ($66) {
      $73 = 0;$76 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $tmp1$sroa$4$0$ph$i;
     } else {
      $67 = $tmp1$sroa$4$0$ph$i | 1;
      $68 = (Math_clz32(($67|0))|0);
      $69 = (31 - ($68))|0;
      $70 = $69 >>> 2;
      $73 = 5;$76 = $70;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $tmp1$sroa$4$0$ph$i;
     }
    }
    }
    HEAP32[$esc>>2] = $init_state$sroa$0$0$i;
    HEAP32[$tmp6$sroa$0$sroa$4$0$tmp6$sroa$0$0$$sroa_cast3$sroa_idx26$i>>2] = $init_state$sroa$9$0$i;
    $71 = $tmp6$sroa$0$sroa$5$0$tmp6$sroa$0$0$$sroa_cast3$sroa_idx$i;
    $72 = $71;
    HEAP32[$72>>2] = $73;
    $74 = (($71) + 4)|0;
    $75 = $74;
    HEAP32[$75>>2] = $76;
    __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h6d297809d8532353E($tmp0$i,$esc);
    $77 = HEAP32[$tmp0$i>>2]|0;
    $78 = $13;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = $upper$i;
    $85 = $84;
    HEAP32[$85>>2] = $80;
    $86 = (($84) + 4)|0;
    $87 = $86;
    HEAP32[$87>>2] = $83;
    HEAP32[$tmp6$i>>2] = 1;
    HEAP32[$14>>2] = $77;
    HEAP32[$left_val$i>>2] = $upper$i;
    HEAP32[$right_val$i>>2] = $tmp6$i;
    $88 = ($80|0)==(1);
    $89 = ($83|0)==($77|0);
    $or$cond$i = $88 & $89;
    if (!($or$cond$i)) {
     label = 29;
     break;
    }
    $100 = ($77|0)==(1);
    if ($100) {
     $from$1 = $from$0137;
    } else {
     $101 = ($iter$sroa$0$0135>>>0)<($from$0137>>>0);
     if ($101) {
      label = 32;
      break;
     }
     $107 = ($from$0137|0)==(0);
     $108 = ($from$0137|0)==($1|0);
     $or$cond$i1$i = $107 | $108;
     if (!($or$cond$i1$i)) {
      $not$$i2$i = ($from$0137>>>0)<($1>>>0);
      if (!($not$$i2$i)) {
       label = 32;
       break;
      }
      $109 = (($0) + ($from$0137)|0);
      $110 = HEAP8[$109>>0]|0;
      $111 = ($110<<24>>24)>(-65);
      if (!($111)) {
       label = 32;
       break;
      }
     }
     $102 = ($iter$sroa$0$0135|0)==(0);
     $103 = ($iter$sroa$0$0135|0)==($1|0);
     $or$cond$i$i = $102 | $103;
     if (!($or$cond$i$i)) {
      $not$$i$i = ($iter$sroa$0$0135>>>0)<($1>>>0);
      if (!($not$$i$i)) {
       label = 32;
       break;
      }
      $104 = (($0) + ($iter$sroa$0$0135)|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = ($105<<24>>24)>(-65);
      if (!($106)) {
       label = 32;
       break;
      }
     }
     $112 = (($0) + ($from$0137)|0);
     $113 = (($iter$sroa$0$0135) - ($from$0137))|0;
     $114 = HEAP32[$3>>2]|0;
     $115 = HEAP32[$4>>2]|0;
     $116 = ((($115)) + 12|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (FUNCTION_TABLE_iiii[$117 & 255]($114,$112,$113)|0);
     $not$switch4$i45 = ($118<<24>>24)==(0);
     if (!($not$switch4$i45)) {
      break;
     }
     ;HEAP32[$iter2>>2]=HEAP32[$esc>>2]|0;HEAP32[$iter2+4>>2]=HEAP32[$esc+4>>2]|0;HEAP32[$iter2+8>>2]=HEAP32[$esc+8>>2]|0;HEAP32[$iter2+12>>2]=HEAP32[$esc+12>>2]|0;
     while(1) {
      __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h30454026f31a1b13E($tmp42,$iter2);
      $119 = HEAP32[$tmp42>>2]|0;
      $switch23 = ($119|0)==(1);
      if (!($switch23)) {
       break;
      }
      $124 = HEAP32[$15>>2]|0;
      $125 = HEAP32[$3>>2]|0;
      $126 = HEAP32[$4>>2]|0;
      $127 = ((($126)) + 16|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (FUNCTION_TABLE_iii[$128 & 255]($125,$124)|0);
      $not$switch4$i42 = ($129<<24>>24)==(0);
      if (!($not$switch4$i42)) {
       label = 48;
       break L6;
      }
     }
     $120 = ($tmp1$sroa$4$0$ph$i>>>0)<(128);
     if ($120) {
      $return$0$i = 1;
     } else {
      $121 = ($tmp1$sroa$4$0$ph$i>>>0)<(2048);
      if ($121) {
       $return$0$i = 2;
      } else {
       $122 = ($tmp1$sroa$4$0$ph$i>>>0)<(65536);
       $$$i44 = $122 ? 3 : 4;
       $return$0$i = $$$i44;
      }
     }
     $123 = (($return$0$i) + ($iter$sroa$0$0135))|0;
     $from$1 = $123;
    }
    $$cast$i = $iter$sroa$6$4;
    $130 = ($$cast$i|0)==($10|0);
    if ($130) {
     label = 16;
     break;
    } else {
     $$cast$i138 = $$cast$i;$from$0137 = $from$1;$iter$sroa$0$0135 = $65;$iter$sroa$6$0136 = $iter$sroa$6$4;
    }
   }
   if ((label|0) == 16) {
    $53 = ($from$1|0)==(0);
    $54 = ($from$1|0)==($1|0);
    $or$cond$i$i52 = $53 | $54;
    if ($or$cond$i$i52) {
     $from$0$lcssa149 = $from$1;
     label = 17;
     break;
    }
    $not$$i$i53 = ($from$1>>>0)<($1>>>0);
    if (!($not$$i$i53)) {
     __ZN4core3str16slice_error_fail17hec153863008515e9E($0,$1,$from$1,$1);
     // unreachable;
    }
    $55 = (($0) + ($from$1)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = ($56<<24>>24)>(-65);
    if ($57) {
     $$pre$phi$iZ2D = $55;$from$0$lcssa150 = $from$1;
     break;
    }
    __ZN4core3str16slice_error_fail17hec153863008515e9E($0,$1,$from$1,$1);
    // unreachable;
   }
   else if ((label|0) == 29) {
    $90 = HEAP32[703]|0;
    $91 = HEAP32[(2816)>>2]|0;
    $92 = $left_val$i;
    $93 = $right_val$i;
    HEAP32[$tmp18$i>>2] = $92;
    $94 = ((($tmp18$i)) + 4|0);
    HEAP32[$94>>2] = (145);
    $95 = ((($tmp18$i)) + 8|0);
    HEAP32[$95>>2] = $93;
    $96 = ((($tmp18$i)) + 12|0);
    HEAP32[$96>>2] = (145);
    HEAP32[$tmp13$i>>2] = $90;
    $97 = ((($tmp13$i)) + 4|0);
    HEAP32[$97>>2] = $91;
    $tmp1$sroa$0$0$$sroa_idx$i$i = ((($tmp13$i)) + 8|0);
    HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i>>2] = 0;
    $98 = ((($tmp13$i)) + 16|0);
    HEAP32[$98>>2] = $tmp18$i;
    $99 = ((($tmp13$i)) + 20|0);
    HEAP32[$99>>2] = 2;
    __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp13$i,2800);
    // unreachable;
   }
   else if ((label|0) == 32) {
    __ZN4core3str16slice_error_fail17hec153863008515e9E($0,$1,$from$0137,$iter$sroa$0$0135);
    // unreachable;
   }
   else if ((label|0) == 48) {
   }
   $return$sroa$0$0 = 1;
   STACKTOP = sp;return ($return$sroa$0$0|0);
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre$i = (($0) + ($from$0$lcssa149)|0);
  $$pre$phi$iZ2D = $$pre$i;$from$0$lcssa150 = $from$0$lcssa149;
 }
 $58 = (($1) - ($from$0$lcssa150))|0;
 $59 = HEAP32[$3>>2]|0;
 $60 = HEAP32[$4>>2]|0;
 $61 = ((($60)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (FUNCTION_TABLE_iiii[$62 & 255]($59,$$pre$phi$iZ2D,$58)|0);
 $not$switch4$i58 = ($63<<24>>24)==(0);
 if (!($not$switch4$i58)) {
  $return$sroa$0$0 = 1;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 $131 = HEAP32[$3>>2]|0;
 $132 = HEAP32[$4>>2]|0;
 $133 = ((($132)) + 16|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (FUNCTION_TABLE_iii[$134 & 255]($131,34)|0);
 $return$sroa$0$0 = $135;
 STACKTOP = sp;return ($return$sroa$0$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h15eb753f4b563f12E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $builder$i = 0, $builder1$i = 0, $return$sroa$0$0$i = 0, $switch$i = 0, $tmp14$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $builder$i = sp + 16|0;
 $builder1$i = sp;
 $tmp14$i = sp + 32|0;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $switch$i = ($3|0)==(1);
 if ($switch$i) {
  $5 = ((($2)) + 4|0);
  __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder1$i,$1,7449,4);
  HEAP32[$tmp14$i>>2] = $5;
  (__ZN4core3fmt8builders10DebugTuple5field17h6e4856dbc1d95c67E($builder1$i,$tmp14$i,2096)|0);
  $6 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder1$i)|0);
  $return$sroa$0$0$i = $6;
  STACKTOP = sp;return ($return$sroa$0$0$i|0);
 } else {
  __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($builder$i,$1,7445,4);
  $4 = (__ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($builder$i)|0);
  $return$sroa$0$0$i = $4;
  STACKTOP = sp;return ($return$sroa$0$0$i|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV110from_usize17h4f3bf7c380951ebeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 143;
 return;
}
function __ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h02254c6599924e14E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp2 = sp;
 $2 = ((($1)) + 28|0);
 $3 = ((($1)) + 32|0);
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 ;HEAP32[$tmp2>>2]=HEAP32[$0>>2]|0;HEAP32[$tmp2+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$tmp2+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$tmp2+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$tmp2+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$tmp2+20>>2]=HEAP32[$0+20>>2]|0;
 $6 = (__ZN4core3fmt5write17h02db2923adb244ceE($4,$5,$tmp2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$fca$0$load$i$i = 0, $$fca$0$load$i$i77 = 0, $$fca$1$load$i$i = 0, $$fca$1$load$i$i78 = 0, $$fca$2$gep$phi$trans$insert$i$i = 0, $$fca$2$gep$phi$trans$insert$i$i67 = 0, $$fca$2$load$i$i = 0, $$fca$2$load$i$i75 = 0, $$fca$2$load$pre$i$i = 0, $$fca$2$load$pre$i$i68 = 0, $$fca$3$load$i$i = 0, $$fca$3$load$i$i74 = 0, $$pre = 0, $$repack10$i$i = 0, $$repack10$i$i79 = 0, $$repack12$i$i = 0, $$repack12$i$i80 = 0, $$repack14$i$i = 0, $$repack14$i$i81 = 0, $$sreg$field = 0;
 var $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $accum$0$lcssa$i$i = 0, $accum$019$i$i = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $align$0$off0$i51 = 0;
 var $align$0$off0$i51$clear = 0, $buf$i$i = 0, $buf21$i$i = 0, $buf21$i$i55 = 0, $cond$i = 0, $cond$i49 = 0, $extract$t$i = 0, $extract$t$i50 = 0, $fill$i = 0, $fill$i48 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$0$i84 = 0, $iter$sroa$0$1$i$i = 0, $iter$sroa$0$2$i$i = 0, $iter$sroa$0$3$i$i = 0, $iter$sroa$0$5$ph$i$i = 0, $iter2$sroa$0$0$i = 0, $iter2$sroa$0$0$i92 = 0, $not$switch4$i = 0, $not$switch4$i$i = 0;
 var $not$switch4$i$i$i = 0, $not$switch4$i$i94 = 0, $not$switch4$i3$i = 0, $not$switch4$i3$i88 = 0, $not$switch4$i45 = 0, $not$switch4$i5$i = 0, $not$switch4$i9$i = 0, $not$switch4$i99 = 0, $pos$0$i$i = 0, $pos$0$i$i76 = 0, $prefix = 0, $prefixed = 0, $return$sroa$0$0 = 0, $return$sroa$0$1 = 0, $scevgep$i$i = 0, $scevgep$i$i57 = 0, $scevgep17$i$i = 0, $scevgep17$i$i58 = 0, $scevgep18$i$i = 0, $scevgep18$i$i59 = 0;
 var $scevgep1819$i$i = 0, $scevgep1819$i$i60 = 0, $scevgep22$i$i = 0, $scevgep22$i$i63 = 0, $scevgep2223$i$i = 0, $scevgep2223$i$i64 = 0, $sign = 0, $switch = 0, $tmp3$sroa$0$0$i = 0, $tmp3$sroa$0$0$i53 = 0, $tmp3$sroa$6$0$i = 0, $tmp3$sroa$6$0$i54 = 0, $umax$i$i = 0, $umax$i$i61 = 0, $umax20$i$i = 0, $umax20$i$i62 = 0, $width$0 = 0, $width$1 = 0, $write_prefix = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 16|0;
 $7 = sp;
 $fill$i48 = sp + 64|0;
 $buf$i$i = sp + 76|0;
 $fill$i = sp + 56|0;
 $prefix = sp + 48|0;
 $sign = sp + 40|0;
 $prefixed = sp + 72|0;
 $write_prefix = sp + 24|0;
 HEAP32[$prefix>>2] = $2;
 $8 = ((($prefix)) + 4|0);
 HEAP32[$8>>2] = $3;
 HEAP32[$sign>>2] = 0;
 if ($1) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $11 & 1;
  $13 = ($12|0)==(0);
  if ($13) {
   $17 = $11;$width$0 = $5;
  } else {
   $14 = (($5) + 1)|0;
   $15 = ((($sign)) + 4|0);
   HEAP32[$sign>>2] = 1;
   HEAP32[$15>>2] = 43;
   $17 = $11;$width$0 = $14;
  }
 } else {
  HEAP32[$sign>>2] = 1;
  $9 = ((($sign)) + 4|0);
  HEAP32[$9>>2] = 45;
  $10 = (($5) + 1)|0;
  $$pre = HEAP32[$0>>2]|0;
  $17 = $$pre;$width$0 = $10;
 }
 HEAP8[$prefixed>>0] = 0;
 $16 = $17 & 4;
 $18 = ($16|0)==(0);
 if ($18) {
  $width$1 = $width$0;
 } else {
  HEAP8[$prefixed>>0] = 1;
  $19 = (($2) + ($3)|0);
  $20 = ($3|0)==(0);
  if ($20) {
   $accum$0$lcssa$i$i = 0;
  } else {
   $22 = $2;$accum$019$i$i = 0;
   while(1) {
    $21 = ((($22)) + 1|0);
    $23 = $21;
    $24 = HEAP8[$22>>0]|0;
    $25 = ($24<<24>>24)>(-1);
    if ($25) {
     $iter$sroa$0$5$ph$i$i = $23;
    } else {
     $26 = ($21|0)==($19|0);
     $27 = ((($22)) + 2|0);
     $28 = $27;
     $iter$sroa$0$1$i$i = $26 ? $23 : $28;
     $29 = $26 ? $19 : $27;
     $30 = ($24&255)>(223);
     if ($30) {
      $31 = ($29|0)==($19|0);
      $32 = ((($29)) + 1|0);
      $33 = $32;
      $iter$sroa$0$2$i$i = $31 ? $iter$sroa$0$1$i$i : $33;
      $34 = $31 ? $19 : $32;
      $35 = ($24&255)>(239);
      if ($35) {
       $36 = ($34|0)==($19|0);
       $37 = ((($34)) + 1|0);
       $38 = $37;
       $iter$sroa$0$3$i$i = $36 ? $iter$sroa$0$2$i$i : $38;
       $iter$sroa$0$5$ph$i$i = $iter$sroa$0$3$i$i;
      } else {
       $iter$sroa$0$5$ph$i$i = $iter$sroa$0$2$i$i;
      }
     } else {
      $iter$sroa$0$5$ph$i$i = $iter$sroa$0$1$i$i;
     }
    }
    $39 = (($accum$019$i$i) + 1)|0;
    $40 = $iter$sroa$0$5$ph$i$i;
    $41 = ($40|0)==($19|0);
    if ($41) {
     $accum$0$lcssa$i$i = $39;
     break;
    } else {
     $22 = $40;$accum$019$i$i = $39;
    }
   }
  }
  $42 = (($accum$0$lcssa$i$i) + ($width$0))|0;
  $width$1 = $42;
 }
 HEAP32[$write_prefix>>2] = $sign;
 $43 = ((($write_prefix)) + 4|0);
 HEAP32[$43>>2] = $prefixed;
 $44 = ((($write_prefix)) + 8|0);
 HEAP32[$44>>2] = $prefix;
 $45 = ((($0)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $switch = ($46|0)==(1);
 do {
  if ($switch) {
   $51 = ((($0)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52>>>0)>($width$1>>>0);
   if (!($53)) {
    $48 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17hd5329f5b54cc34e4E($write_prefix,$0)|0);
    $not$switch4$i45 = ($48<<24>>24)==(0);
    if (!($not$switch4$i45)) {
     label = 44;
     break;
    }
    $138 = ((($0)) + 28|0);
    $139 = ((($0)) + 32|0);
    $140 = HEAP32[$138>>2]|0;
    $141 = HEAP32[$139>>2]|0;
    $142 = ((($141)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (FUNCTION_TABLE_iiii[$143 & 255]($140,$4,$5)|0);
    $return$sroa$0$0 = $144;
    label = 41;
    break;
   }
   $54 = $17 & 8;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = (($52) - ($width$1))|0;
    $57 = ((($0)) + 8|0);
    $extract$t$i50 = HEAP8[$57>>0]|0;
    $cond$i49 = ($extract$t$i50<<24>>24)==(3);
    $align$0$off0$i51 = $cond$i49 ? 1 : $extract$t$i50;
    $align$0$off0$i51$clear = $align$0$off0$i51 & 3;
    switch ($align$0$off0$i51$clear<<24>>24) {
    case 0:  {
     $tmp3$sroa$0$0$i53 = 0;$tmp3$sroa$6$0$i54 = $56;
     break;
    }
    case 3: case 1:  {
     $tmp3$sroa$0$0$i53 = $56;$tmp3$sroa$6$0$i54 = 0;
     break;
    }
    case 2:  {
     $108 = $56 >>> 1;
     $109 = (($56) + 1)|0;
     $110 = $109 >>> 1;
     $tmp3$sroa$0$0$i53 = $108;$tmp3$sroa$6$0$i54 = $110;
     break;
    }
    default: {
     // unreachable;
    }
    }
    $58 = ((($0)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $buf21$i$i55 = $buf$i$i;
    $scevgep$i$i57 = ((($buf$i$i)) + 4|0);
    $scevgep17$i$i58 = $scevgep$i$i57;
    $scevgep18$i$i59 = ((($buf$i$i)) + 1|0);
    $scevgep1819$i$i60 = $scevgep18$i$i59;
    $60 = ($scevgep17$i$i58>>>0)>($scevgep1819$i$i60>>>0);
    $umax$i$i61 = $60 ? $scevgep17$i$i58 : $scevgep1819$i$i60;
    $umax20$i$i62 = $umax$i$i61;
    $61 = (0 - ($buf21$i$i55))|0;
    $scevgep22$i$i63 = (($umax20$i$i62) + ($61)|0);
    $scevgep2223$i$i64 = $scevgep22$i$i63;
    _memset(($buf$i$i|0),0,($scevgep2223$i$i64|0))|0;
    $62 = ($59>>>0)<(128);
    do {
     if ($62) {
      $64 = ((($buf$i$i)) + 3|0);
      $65 = $59&255;
      HEAP8[$64>>0] = $65;
      $$fca$2$gep$phi$trans$insert$i$i67 = ((($buf$i$i)) + 2|0);
      $$fca$2$load$pre$i$i68 = HEAP8[$$fca$2$gep$phi$trans$insert$i$i67>>0]|0;
      $$fca$2$load$i$i75 = $$fca$2$load$pre$i$i68;$$fca$3$load$i$i74 = $65;$pos$0$i$i76 = 3;
     } else {
      $63 = ($59>>>0)<(2048);
      if ($63) {
       $66 = $59 >>> 6;
       $67 = $66 & 31;
       $68 = $67&255;
       $69 = ((($buf$i$i)) + 2|0);
       $70 = $68 | -64;
       HEAP8[$69>>0] = $70;
       $71 = $59 & 63;
       $72 = $71&255;
       $73 = ((($buf$i$i)) + 3|0);
       $74 = $72 | -128;
       HEAP8[$73>>0] = $74;
       $$fca$2$load$i$i75 = $70;$$fca$3$load$i$i74 = $74;$pos$0$i$i76 = 2;
       break;
      }
      $75 = ($59>>>0)<(65536);
      if ($75) {
       $76 = $59 >>> 12;
       $77 = $76 & 15;
       $78 = $77&255;
       $79 = $78 | -32;
       HEAP8[$scevgep18$i$i59>>0] = $79;
       $80 = $59 >>> 6;
       $81 = $80 & 63;
       $82 = $81&255;
       $83 = ((($buf$i$i)) + 2|0);
       $84 = $82 | -128;
       HEAP8[$83>>0] = $84;
       $85 = $59 & 63;
       $86 = $85&255;
       $87 = ((($buf$i$i)) + 3|0);
       $88 = $86 | -128;
       HEAP8[$87>>0] = $88;
       $$fca$2$load$i$i75 = $84;$$fca$3$load$i$i74 = $88;$pos$0$i$i76 = 1;
       break;
      } else {
       $89 = $59 >>> 18;
       $90 = $89&255;
       $91 = $90 | -16;
       HEAP8[$buf$i$i>>0] = $91;
       $92 = $59 >>> 12;
       $93 = $92 & 63;
       $94 = $93&255;
       $95 = $94 | -128;
       HEAP8[$scevgep18$i$i59>>0] = $95;
       $96 = $59 >>> 6;
       $97 = $96 & 63;
       $98 = $97&255;
       $99 = ((($buf$i$i)) + 2|0);
       $100 = $98 | -128;
       HEAP8[$99>>0] = $100;
       $101 = $59 & 63;
       $102 = $101&255;
       $103 = ((($buf$i$i)) + 3|0);
       $104 = $102 | -128;
       HEAP8[$103>>0] = $104;
       $$fca$2$load$i$i75 = $100;$$fca$3$load$i$i74 = $104;$pos$0$i$i76 = 0;
       break;
      }
     }
    } while(0);
    $$fca$0$load$i$i77 = HEAP8[$buf$i$i>>0]|0;
    $$fca$1$load$i$i78 = HEAP8[$scevgep18$i$i59>>0]|0;
    HEAP8[$fill$i48>>0] = $$fca$0$load$i$i77;
    $$repack10$i$i79 = ((($fill$i48)) + 1|0);
    HEAP8[$$repack10$i$i79>>0] = $$fca$1$load$i$i78;
    $$repack12$i$i80 = ((($fill$i48)) + 2|0);
    HEAP8[$$repack12$i$i80>>0] = $$fca$2$load$i$i75;
    $$repack14$i$i81 = ((($fill$i48)) + 3|0);
    HEAP8[$$repack14$i$i81>>0] = $$fca$3$load$i$i74;
    $105 = ((($fill$i48)) + 4|0);
    HEAP32[$105>>2] = $pos$0$i$i76;
    __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($7,$fill$i48);
    $$sreg$field = HEAP32[$7>>2]|0;
    $$sreg$index2 = ((($7)) + 4|0);
    $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
    $106 = ((($0)) + 28|0);
    $107 = ((($0)) + 32|0);
    $iter$sroa$0$0$i84 = 0;
    while(1) {
     $111 = ($iter$sroa$0$0$i84>>>0)<($tmp3$sroa$0$0$i53>>>0);
     if (!($111)) {
      break;
     }
     $112 = (($iter$sroa$0$0$i84) + 1)|0;
     $113 = HEAP32[$106>>2]|0;
     $114 = HEAP32[$107>>2]|0;
     $115 = ((($114)) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (FUNCTION_TABLE_iiii[$116 & 255]($113,$$sreg$field,$$sreg$field3)|0);
     $not$switch4$i9$i = ($117<<24>>24)==(0);
     if ($not$switch4$i9$i) {
      $iter$sroa$0$0$i84 = $112;
     } else {
      label = 34;
      break;
     }
    }
    if ((label|0) == 34) {
     $return$sroa$0$0 = 1;
     label = 41;
     break;
    }
    $118 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17hd5329f5b54cc34e4E($write_prefix,$0)|0);
    $not$switch4$i$i$i = ($118<<24>>24)==(0);
    if ($not$switch4$i$i$i) {
     $119 = HEAP32[$106>>2]|0;
     $120 = HEAP32[$107>>2]|0;
     $121 = ((($120)) + 12|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_iiii[$122 & 255]($119,$4,$5)|0);
     $not$switch4$i3$i88 = ($123<<24>>24)==(0);
     if ($not$switch4$i3$i88) {
      $iter2$sroa$0$0$i92 = 0;
      while(1) {
       $124 = ($iter2$sroa$0$0$i92>>>0)<($tmp3$sroa$6$0$i54>>>0);
       if (!($124)) {
        label = 38;
        break;
       }
       $125 = (($iter2$sroa$0$0$i92) + 1)|0;
       $126 = HEAP32[$106>>2]|0;
       $127 = HEAP32[$107>>2]|0;
       $128 = ((($127)) + 12|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = (FUNCTION_TABLE_iiii[$129 & 255]($126,$$sreg$field,$$sreg$field3)|0);
       $not$switch4$i$i94 = ($130<<24>>24)==(0);
       if ($not$switch4$i$i94) {
        $iter2$sroa$0$0$i92 = $125;
       } else {
        label = 39;
        break;
       }
      }
      if ((label|0) == 38) {
       $return$sroa$0$0 = 0;
       label = 41;
       break;
      }
      else if ((label|0) == 39) {
       $return$sroa$0$0 = 1;
       label = 41;
       break;
      }
     }
    }
    $return$sroa$0$0 = 1;
    label = 41;
    break;
   } else {
    $49 = ((($0)) + 4|0);
    HEAP32[$49>>2] = 48;
    $50 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17hd5329f5b54cc34e4E($write_prefix,$0)|0);
    $not$switch4$i99 = ($50<<24>>24)==(0);
    if (!($not$switch4$i99)) {
     label = 44;
     break;
    }
    $145 = (($52) - ($width$1))|0;
    $146 = ((($0)) + 8|0);
    $extract$t$i = HEAP8[$146>>0]|0;
    $cond$i = ($extract$t$i<<24>>24)==(3);
    $align$0$off0$i = $cond$i ? 1 : $extract$t$i;
    $align$0$off0$i$clear = $align$0$off0$i & 3;
    switch ($align$0$off0$i$clear<<24>>24) {
    case 0:  {
     $tmp3$sroa$0$0$i = 0;$tmp3$sroa$6$0$i = $145;
     break;
    }
    case 3: case 1:  {
     $tmp3$sroa$0$0$i = $145;$tmp3$sroa$6$0$i = 0;
     break;
    }
    case 2:  {
     $196 = $145 >>> 1;
     $197 = (($145) + 1)|0;
     $198 = $197 >>> 1;
     $tmp3$sroa$0$0$i = $196;$tmp3$sroa$6$0$i = $198;
     break;
    }
    default: {
     // unreachable;
    }
    }
    $147 = HEAP32[$49>>2]|0;
    $buf21$i$i = $buf$i$i;
    $scevgep$i$i = ((($buf$i$i)) + 4|0);
    $scevgep17$i$i = $scevgep$i$i;
    $scevgep18$i$i = ((($buf$i$i)) + 1|0);
    $scevgep1819$i$i = $scevgep18$i$i;
    $148 = ($scevgep17$i$i>>>0)>($scevgep1819$i$i>>>0);
    $umax$i$i = $148 ? $scevgep17$i$i : $scevgep1819$i$i;
    $umax20$i$i = $umax$i$i;
    $149 = (0 - ($buf21$i$i))|0;
    $scevgep22$i$i = (($umax20$i$i) + ($149)|0);
    $scevgep2223$i$i = $scevgep22$i$i;
    _memset(($buf$i$i|0),0,($scevgep2223$i$i|0))|0;
    $150 = ($147>>>0)<(128);
    do {
     if ($150) {
      $152 = ((($buf$i$i)) + 3|0);
      $153 = $147&255;
      HEAP8[$152>>0] = $153;
      $$fca$2$gep$phi$trans$insert$i$i = ((($buf$i$i)) + 2|0);
      $$fca$2$load$pre$i$i = HEAP8[$$fca$2$gep$phi$trans$insert$i$i>>0]|0;
      $$fca$2$load$i$i = $$fca$2$load$pre$i$i;$$fca$3$load$i$i = $153;$pos$0$i$i = 3;
     } else {
      $151 = ($147>>>0)<(2048);
      if ($151) {
       $154 = $147 >>> 6;
       $155 = $154 & 31;
       $156 = $155&255;
       $157 = ((($buf$i$i)) + 2|0);
       $158 = $156 | -64;
       HEAP8[$157>>0] = $158;
       $159 = $147 & 63;
       $160 = $159&255;
       $161 = ((($buf$i$i)) + 3|0);
       $162 = $160 | -128;
       HEAP8[$161>>0] = $162;
       $$fca$2$load$i$i = $158;$$fca$3$load$i$i = $162;$pos$0$i$i = 2;
       break;
      }
      $163 = ($147>>>0)<(65536);
      if ($163) {
       $164 = $147 >>> 12;
       $165 = $164 & 15;
       $166 = $165&255;
       $167 = $166 | -32;
       HEAP8[$scevgep18$i$i>>0] = $167;
       $168 = $147 >>> 6;
       $169 = $168 & 63;
       $170 = $169&255;
       $171 = ((($buf$i$i)) + 2|0);
       $172 = $170 | -128;
       HEAP8[$171>>0] = $172;
       $173 = $147 & 63;
       $174 = $173&255;
       $175 = ((($buf$i$i)) + 3|0);
       $176 = $174 | -128;
       HEAP8[$175>>0] = $176;
       $$fca$2$load$i$i = $172;$$fca$3$load$i$i = $176;$pos$0$i$i = 1;
       break;
      } else {
       $177 = $147 >>> 18;
       $178 = $177&255;
       $179 = $178 | -16;
       HEAP8[$buf$i$i>>0] = $179;
       $180 = $147 >>> 12;
       $181 = $180 & 63;
       $182 = $181&255;
       $183 = $182 | -128;
       HEAP8[$scevgep18$i$i>>0] = $183;
       $184 = $147 >>> 6;
       $185 = $184 & 63;
       $186 = $185&255;
       $187 = ((($buf$i$i)) + 2|0);
       $188 = $186 | -128;
       HEAP8[$187>>0] = $188;
       $189 = $147 & 63;
       $190 = $189&255;
       $191 = ((($buf$i$i)) + 3|0);
       $192 = $190 | -128;
       HEAP8[$191>>0] = $192;
       $$fca$2$load$i$i = $188;$$fca$3$load$i$i = $192;$pos$0$i$i = 0;
       break;
      }
     }
    } while(0);
    $$fca$0$load$i$i = HEAP8[$buf$i$i>>0]|0;
    $$fca$1$load$i$i = HEAP8[$scevgep18$i$i>>0]|0;
    HEAP8[$fill$i>>0] = $$fca$0$load$i$i;
    $$repack10$i$i = ((($fill$i)) + 1|0);
    HEAP8[$$repack10$i$i>>0] = $$fca$1$load$i$i;
    $$repack12$i$i = ((($fill$i)) + 2|0);
    HEAP8[$$repack12$i$i>>0] = $$fca$2$load$i$i;
    $$repack14$i$i = ((($fill$i)) + 3|0);
    HEAP8[$$repack14$i$i>>0] = $$fca$3$load$i$i;
    $193 = ((($fill$i)) + 4|0);
    HEAP32[$193>>2] = $pos$0$i$i;
    __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($6,$fill$i);
    $$sreg1$field = HEAP32[$6>>2]|0;
    $$sreg1$index5 = ((($6)) + 4|0);
    $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
    $194 = ((($0)) + 28|0);
    $195 = ((($0)) + 32|0);
    $iter$sroa$0$0$i = 0;
    while(1) {
     $199 = ($iter$sroa$0$0$i>>>0)<($tmp3$sroa$0$0$i>>>0);
     $200 = HEAP32[$194>>2]|0;
     $201 = HEAP32[$195>>2]|0;
     if (!($199)) {
      break;
     }
     $202 = (($iter$sroa$0$0$i) + 1)|0;
     $203 = ((($201)) + 12|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (FUNCTION_TABLE_iiii[$204 & 255]($200,$$sreg1$field,$$sreg1$field6)|0);
     $not$switch4$i5$i = ($205<<24>>24)==(0);
     if ($not$switch4$i5$i) {
      $iter$sroa$0$0$i = $202;
     } else {
      label = 60;
      break;
     }
    }
    if ((label|0) == 60) {
     $return$sroa$0$0 = 1;
     label = 41;
     break;
    }
    $206 = ((($201)) + 12|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (FUNCTION_TABLE_iiii[$207 & 255]($200,$4,$5)|0);
    $not$switch4$i3$i = ($208<<24>>24)==(0);
    if ($not$switch4$i3$i) {
     $iter2$sroa$0$0$i = 0;
    } else {
     $return$sroa$0$0 = 1;
     label = 41;
     break;
    }
    while(1) {
     $209 = ($iter2$sroa$0$0$i>>>0)<($tmp3$sroa$6$0$i>>>0);
     if (!($209)) {
      label = 64;
      break;
     }
     $210 = (($iter2$sroa$0$0$i) + 1)|0;
     $211 = HEAP32[$194>>2]|0;
     $212 = HEAP32[$195>>2]|0;
     $213 = ((($212)) + 12|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (FUNCTION_TABLE_iiii[$214 & 255]($211,$$sreg1$field,$$sreg1$field6)|0);
     $not$switch4$i$i = ($215<<24>>24)==(0);
     if ($not$switch4$i$i) {
      $iter2$sroa$0$0$i = $210;
     } else {
      label = 65;
      break;
     }
    }
    if ((label|0) == 64) {
     $return$sroa$0$0 = 0;
     label = 41;
     break;
    }
    else if ((label|0) == 65) {
     $return$sroa$0$0 = 1;
     label = 41;
     break;
    }
   }
  } else {
   $47 = (__ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17hd5329f5b54cc34e4E($write_prefix,$0)|0);
   $not$switch4$i = ($47<<24>>24)==(0);
   if ($not$switch4$i) {
    $131 = ((($0)) + 28|0);
    $132 = ((($0)) + 32|0);
    $133 = HEAP32[$131>>2]|0;
    $134 = HEAP32[$132>>2]|0;
    $135 = ((($134)) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_iiii[$136 & 255]($133,$4,$5)|0);
    $return$sroa$0$0 = $137;
    label = 41;
   } else {
    label = 44;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  $return$sroa$0$1 = $return$sroa$0$0;
  STACKTOP = sp;return ($return$sroa$0$1|0);
 }
 else if ((label|0) == 44) {
  $return$sroa$0$1 = 1;
  STACKTOP = sp;return ($return$sroa$0$1|0);
 }
 return (0)|0;
}
function __ZN4core3fmt9Formatter12pad_integral28__u7b__u7b_closure_u7d__u7d_17hd5329f5b54cc34e4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load$i = 0, $$fca$1$load$i = 0, $$fca$2$gep$phi$trans$insert$i = 0, $$fca$2$load$i = 0, $$fca$2$load$pre$i = 0, $$fca$3$load$i = 0, $$repack10$i = 0, $$repack12$i = 0, $$repack14$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $buf$i = 0, $buf21$i = 0, $not$switch4$i = 0, $pos$0$i = 0, $return$sroa$0$0 = 0, $scevgep$i = 0, $scevgep17$i = 0, $scevgep18$i = 0, $scevgep1819$i = 0, $scevgep22$i = 0, $scevgep2223$i = 0, $switch = 0, $tmp10 = 0, $umax$i = 0;
 var $umax20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $buf$i = sp + 16|0;
 $tmp10 = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $switch = ($4|0)==(1);
 if ($switch) {
  $5 = ((($3)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 28|0);
  $8 = ((($1)) + 32|0);
  $9 = HEAP32[$7>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $buf21$i = $buf$i;
  $scevgep$i = ((($buf$i)) + 4|0);
  $scevgep17$i = $scevgep$i;
  $scevgep18$i = ((($buf$i)) + 1|0);
  $scevgep1819$i = $scevgep18$i;
  $11 = ($scevgep17$i>>>0)>($scevgep1819$i>>>0);
  $umax$i = $11 ? $scevgep17$i : $scevgep1819$i;
  $umax20$i = $umax$i;
  $12 = (0 - ($buf21$i))|0;
  $scevgep22$i = (($umax20$i) + ($12)|0);
  $scevgep2223$i = $scevgep22$i;
  _memset(($buf$i|0),0,($scevgep2223$i|0))|0;
  $13 = ($6>>>0)<(128);
  do {
   if ($13) {
    $15 = ((($buf$i)) + 3|0);
    $16 = $6&255;
    HEAP8[$15>>0] = $16;
    $$fca$2$gep$phi$trans$insert$i = ((($buf$i)) + 2|0);
    $$fca$2$load$pre$i = HEAP8[$$fca$2$gep$phi$trans$insert$i>>0]|0;
    $$fca$2$load$i = $$fca$2$load$pre$i;$$fca$3$load$i = $16;$pos$0$i = 3;
   } else {
    $14 = ($6>>>0)<(2048);
    if ($14) {
     $17 = $6 >>> 6;
     $18 = $17 & 31;
     $19 = $18&255;
     $20 = ((($buf$i)) + 2|0);
     $21 = $19 | -64;
     HEAP8[$20>>0] = $21;
     $22 = $6 & 63;
     $23 = $22&255;
     $24 = ((($buf$i)) + 3|0);
     $25 = $23 | -128;
     HEAP8[$24>>0] = $25;
     $$fca$2$load$i = $21;$$fca$3$load$i = $25;$pos$0$i = 2;
     break;
    }
    $26 = ($6>>>0)<(65536);
    if ($26) {
     $27 = $6 >>> 12;
     $28 = $27 & 15;
     $29 = $28&255;
     $30 = $29 | -32;
     HEAP8[$scevgep18$i>>0] = $30;
     $31 = $6 >>> 6;
     $32 = $31 & 63;
     $33 = $32&255;
     $34 = ((($buf$i)) + 2|0);
     $35 = $33 | -128;
     HEAP8[$34>>0] = $35;
     $36 = $6 & 63;
     $37 = $36&255;
     $38 = ((($buf$i)) + 3|0);
     $39 = $37 | -128;
     HEAP8[$38>>0] = $39;
     $$fca$2$load$i = $35;$$fca$3$load$i = $39;$pos$0$i = 1;
     break;
    } else {
     $40 = $6 >>> 18;
     $41 = $40&255;
     $42 = $41 | -16;
     HEAP8[$buf$i>>0] = $42;
     $43 = $6 >>> 12;
     $44 = $43 & 63;
     $45 = $44&255;
     $46 = $45 | -128;
     HEAP8[$scevgep18$i>>0] = $46;
     $47 = $6 >>> 6;
     $48 = $47 & 63;
     $49 = $48&255;
     $50 = ((($buf$i)) + 2|0);
     $51 = $49 | -128;
     HEAP8[$50>>0] = $51;
     $52 = $6 & 63;
     $53 = $52&255;
     $54 = ((($buf$i)) + 3|0);
     $55 = $53 | -128;
     HEAP8[$54>>0] = $55;
     $$fca$2$load$i = $51;$$fca$3$load$i = $55;$pos$0$i = 0;
     break;
    }
   }
  } while(0);
  $$fca$0$load$i = HEAP8[$buf$i>>0]|0;
  $$fca$1$load$i = HEAP8[$scevgep18$i>>0]|0;
  HEAP8[$tmp10>>0] = $$fca$0$load$i;
  $$repack10$i = ((($tmp10)) + 1|0);
  HEAP8[$$repack10$i>>0] = $$fca$1$load$i;
  $$repack12$i = ((($tmp10)) + 2|0);
  HEAP8[$$repack12$i>>0] = $$fca$2$load$i;
  $$repack14$i = ((($tmp10)) + 3|0);
  HEAP8[$$repack14$i>>0] = $$fca$3$load$i;
  $56 = ((($tmp10)) + 4|0);
  HEAP32[$56>>2] = $pos$0$i;
  __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp10);
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index1 = ((($2)) + 4|0);
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
  $57 = ((($10)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (FUNCTION_TABLE_iiii[$58 & 255]($9,$$sreg$field,$$sreg$field2)|0);
  $not$switch4$i = ($59<<24>>24)==(0);
  if (!($not$switch4$i)) {
   $return$sroa$0$0 = 1;
   STACKTOP = sp;return ($return$sroa$0$0|0);
  }
 }
 $60 = ((($0)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  $return$sroa$0$0 = 0;
  STACKTOP = sp;return ($return$sroa$0$0|0);
 }
 $64 = ((($1)) + 28|0);
 $65 = ((($1)) + 32|0);
 $66 = HEAP32[$64>>2]|0;
 $67 = HEAP32[$65>>2]|0;
 $68 = ((($0)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$69>>2]|0;
 $72 = HEAP32[$70>>2]|0;
 $73 = ((($67)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (FUNCTION_TABLE_iiii[$74 & 255]($66,$71,$72)|0);
 $return$sroa$0$0 = $75;
 STACKTOP = sp;return ($return$sroa$0$0|0);
}
function __ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$3>>2]|0;
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 255]($5,$1,$2)|0);
 return ($9|0);
}
function __ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp2 = sp;
 $2 = ((($0)) + 28|0);
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 ;HEAP32[$tmp2>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp2+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp2+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp2+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp2+20>>2]=HEAP32[$1+20>>2]|0;
 $6 = (__ZN4core3fmt5write17h02db2923adb244ceE($4,$5,$tmp2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN4core3fmt9Formatter9alternate17h6bcd8ef83c611da8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)!=(0);
 return ($3|0);
}
function __ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN4core3fmt9Formatter3pad17he78eabd2d8715314E($2,$0,$1)|0);
 return ($3|0);
}
function __ZN4core12char_private12is_printable17h9c4ca9429f2bf3a7E($0) {
 $0 = $0|0;
 var $$off = 0, $$off2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i18 = 0, $iter$sroa$0$0$in$i = 0, $iter$sroa$0$0$in$i6 = 0, $iter2$sroa$0$0$in$i = 0, $iter2$sroa$0$0$in$i12 = 0, $iter2$sroa$6$0$i = 0, $iter2$sroa$6$0$i13 = 0, $not$ = 0, $or$cond = 0, $return$0$shrunk = 0, $return$0$sroa$speculated$i$i$i = 0, $return$0$sroa$speculated$i$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = ($0>>>0)<(65536);
 if ($2) {
  $iter$sroa$0$0$in$i = 3492;
  while(1) {
   $3 = ($iter$sroa$0$0$in$i|0)==((4064)|0);
   if ($3) {
    break;
   }
   $4 = HEAP16[$iter$sroa$0$0$in$i>>1]|0;
   $5 = ($4<<16>>16)==($1<<16>>16);
   if ($5) {
    $return$0$shrunk = 0;
    label = 22;
    break;
   }
   $6 = ((($iter$sroa$0$0$in$i)) + 2|0);
   $7 = ($4&65535)>($1&65535);
   if ($7) {
    break;
   } else {
    $iter$sroa$0$0$in$i = $6;
   }
  }
  if ((label|0) == 22) {
   return ($return$0$shrunk|0);
  }
  $8 = $0 & 65535;
  $iter2$sroa$0$0$in$i = 4064;$iter2$sroa$6$0$i = 320;
  while(1) {
   $9 = ($iter2$sroa$6$0$i|0)==(0);
   if ($9) {
    $return$0$shrunk = 1;
    label = 22;
    break;
   }
   $10 = ($iter2$sroa$6$0$i>>>0)>(2);
   $return$0$sroa$speculated$i$i$i = $10 ? 2 : $iter2$sroa$6$0$i;
   $11 = (($iter2$sroa$0$0$in$i) + ($return$0$sroa$speculated$i$i$i<<1)|0);
   $12 = (($iter2$sroa$6$0$i) - ($return$0$sroa$speculated$i$i$i))|0;
   $cond$i = ($return$0$sroa$speculated$i$i$i|0)==(1);
   if ($cond$i) {
    label = 10;
    break;
   }
   $13 = HEAP16[$iter2$sroa$0$0$in$i>>1]|0;
   $14 = $13&65535;
   $15 = (($8) - ($14))|0;
   $16 = ($15|0)>(-1);
   if (!($16)) {
    $return$0$shrunk = 1;
    label = 22;
    break;
   }
   $17 = ((($iter2$sroa$0$0$in$i)) + 2|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = ($15|0)<($19|0);
   if ($20) {
    $return$0$shrunk = 0;
    label = 22;
    break;
   } else {
    $iter2$sroa$0$0$in$i = $11;$iter2$sroa$6$0$i = $12;
   }
  }
  if ((label|0) == 10) {
   __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2880,1,1);
   // unreachable;
  }
  else if ((label|0) == 22) {
   return ($return$0$shrunk|0);
  }
 }
 $21 = ($0>>>0)<(131072);
 if ($21) {
  $iter$sroa$0$0$in$i6 = 4704;
 } else {
  $40 = ($0>>>0)<(194560);
  $$off = (($0) + -195102)|0;
  $41 = ($$off>>>0)<(722658);
  $or$cond = $40 | $41;
  if ($or$cond) {
   $return$0$shrunk = 0;
   return ($return$0$shrunk|0);
  } else {
   $$off2 = (($0) + -918000)|0;
   $not$ = ($$off2>>>0)>(196111);
   return ($not$|0);
  }
 }
 while(1) {
  $22 = ($iter$sroa$0$0$in$i6|0)==((4896)|0);
  if ($22) {
   break;
  }
  $23 = HEAP16[$iter$sroa$0$0$in$i6>>1]|0;
  $24 = ($23<<16>>16)==($1<<16>>16);
  if ($24) {
   $return$0$shrunk = 0;
   label = 22;
   break;
  }
  $25 = ((($iter$sroa$0$0$in$i6)) + 2|0);
  $26 = ($23&65535)>($1&65535);
  if ($26) {
   break;
  } else {
   $iter$sroa$0$0$in$i6 = $25;
  }
 }
 if ((label|0) == 22) {
  return ($return$0$shrunk|0);
 }
 $27 = $0 & 65535;
 $iter2$sroa$0$0$in$i12 = 4896;$iter2$sroa$6$0$i13 = 172;
 while(1) {
  $28 = ($iter2$sroa$6$0$i13|0)==(0);
  if ($28) {
   $return$0$shrunk = 1;
   label = 22;
   break;
  }
  $29 = ($iter2$sroa$6$0$i13>>>0)>(2);
  $return$0$sroa$speculated$i$i$i15 = $29 ? 2 : $iter2$sroa$6$0$i13;
  $30 = (($iter2$sroa$0$0$in$i12) + ($return$0$sroa$speculated$i$i$i15<<1)|0);
  $31 = (($iter2$sroa$6$0$i13) - ($return$0$sroa$speculated$i$i$i15))|0;
  $cond$i18 = ($return$0$sroa$speculated$i$i$i15|0)==(1);
  if ($cond$i18) {
   label = 20;
   break;
  }
  $32 = HEAP16[$iter2$sroa$0$0$in$i12>>1]|0;
  $33 = $32&65535;
  $34 = (($27) - ($33))|0;
  $35 = ($34|0)>(-1);
  if (!($35)) {
   $return$0$shrunk = 1;
   label = 22;
   break;
  }
  $36 = ((($iter2$sroa$0$0$in$i12)) + 2|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($34|0)<($38|0);
  if ($39) {
   $return$0$shrunk = 0;
   label = 22;
   break;
  } else {
   $iter2$sroa$0$0$in$i12 = $30;$iter2$sroa$6$0$i13 = $31;
  }
 }
 if ((label|0) == 20) {
  __ZN4core9panicking18panic_bounds_check17hcb4974aae44fd21eE(2880,1,1);
  // unreachable;
 }
 else if ((label|0) == 22) {
  return ($return$0$shrunk|0);
 }
 return (0)|0;
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817ha52c5b0f35a8e6f3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load = 0, $$fca$1$load = 0, $$fca$2$gep$phi$trans$insert = 0, $$fca$2$load = 0, $$fca$2$load$pre = 0, $$fca$3$load = 0, $$repack10 = 0, $$repack12 = 0, $$repack14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf21 = 0, $pos$0 = 0, $scevgep = 0;
 var $scevgep17 = 0, $scevgep18 = 0, $scevgep1819 = 0, $scevgep22 = 0, $scevgep2223 = 0, $umax = 0, $umax20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf = sp;
 $buf21 = $buf;
 $scevgep = ((($buf)) + 4|0);
 $scevgep17 = $scevgep;
 $scevgep18 = ((($buf)) + 1|0);
 $scevgep1819 = $scevgep18;
 $2 = ($scevgep17>>>0)>($scevgep1819>>>0);
 $umax = $2 ? $scevgep17 : $scevgep1819;
 $umax20 = $umax;
 $3 = (0 - ($buf21))|0;
 $scevgep22 = (($umax20) + ($3)|0);
 $scevgep2223 = $scevgep22;
 _memset(($buf|0),0,($scevgep2223|0))|0;
 $4 = ($1>>>0)<(128);
 do {
  if ($4) {
   $6 = ((($buf)) + 3|0);
   $7 = $1&255;
   HEAP8[$6>>0] = $7;
   $$fca$2$gep$phi$trans$insert = ((($buf)) + 2|0);
   $$fca$2$load$pre = HEAP8[$$fca$2$gep$phi$trans$insert>>0]|0;
   $$fca$2$load = $$fca$2$load$pre;$$fca$3$load = $7;$pos$0 = 3;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $8 = $1 >>> 6;
    $9 = $8 & 31;
    $10 = $9&255;
    $11 = ((($buf)) + 2|0);
    $12 = $10 | -64;
    HEAP8[$11>>0] = $12;
    $13 = $1 & 63;
    $14 = $13&255;
    $15 = ((($buf)) + 3|0);
    $16 = $14 | -128;
    HEAP8[$15>>0] = $16;
    $$fca$2$load = $12;$$fca$3$load = $16;$pos$0 = 2;
    break;
   }
   $17 = ($1>>>0)<(65536);
   if ($17) {
    $18 = $1 >>> 12;
    $19 = $18 & 15;
    $20 = $19&255;
    $21 = $20 | -32;
    HEAP8[$scevgep18>>0] = $21;
    $22 = $1 >>> 6;
    $23 = $22 & 63;
    $24 = $23&255;
    $25 = ((($buf)) + 2|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $27 = $1 & 63;
    $28 = $27&255;
    $29 = ((($buf)) + 3|0);
    $30 = $28 | -128;
    HEAP8[$29>>0] = $30;
    $$fca$2$load = $26;$$fca$3$load = $30;$pos$0 = 1;
    break;
   } else {
    $31 = $1 >>> 18;
    $32 = $31 & 7;
    $33 = $32&255;
    $34 = $33 | -16;
    HEAP8[$buf>>0] = $34;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36&255;
    $38 = $37 | -128;
    HEAP8[$scevgep18>>0] = $38;
    $39 = $1 >>> 6;
    $40 = $39 & 63;
    $41 = $40&255;
    $42 = ((($buf)) + 2|0);
    $43 = $41 | -128;
    HEAP8[$42>>0] = $43;
    $44 = $1 & 63;
    $45 = $44&255;
    $46 = ((($buf)) + 3|0);
    $47 = $45 | -128;
    HEAP8[$46>>0] = $47;
    $$fca$2$load = $43;$$fca$3$load = $47;$pos$0 = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load = HEAP8[$buf>>0]|0;
 $$fca$1$load = HEAP8[$scevgep18>>0]|0;
 HEAP8[$0>>0] = $$fca$0$load;
 $$repack10 = ((($0)) + 1|0);
 HEAP8[$$repack10>>0] = $$fca$1$load;
 $$repack12 = ((($0)) + 2|0);
 HEAP8[$$repack12>>0] = $$fca$2$load;
 $$repack14 = ((($0)) + 3|0);
 HEAP8[$$repack14>>0] = $$fca$3$load;
 $48 = ((($0)) + 4|0);
 HEAP32[$48>>2] = $pos$0;
 STACKTOP = sp;return;
}
function __ZN76__LT_core__char__EscapeDefault_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h103d0873c4125157E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $trunc = $2&255;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  HEAP32[$0>>2] = 0;
  return;
  break;
 }
 case 1:  {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$1>>2] = 0;
  HEAP32[$0>>2] = 1;
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = $4;
  return;
  break;
 }
 case 2:  {
  HEAP32[$1>>2] = 1;
  HEAP32[$0>>2] = 1;
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = 92;
  return;
  break;
 }
 case 3:  {
  $7 = ((($1)) + 8|0);
  $trunc$i = HEAP8[$7>>0]|0;
  $trunc$i$clear = $trunc$i & 7;
  switch ($trunc$i$clear<<24>>24) {
  case 0:  {
   HEAP32[$0>>2] = 0;
   return;
   break;
  }
  case 1:  {
   HEAP8[$7>>0] = 0;
   HEAP32[$0>>2] = 1;
   $8 = ((($0)) + 4|0);
   HEAP32[$8>>2] = 125;
   return;
   break;
  }
  case 2:  {
   $9 = ((($1)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($1)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 << 2;
   $14 = $13 & 28;
   $15 = $10 >>> $14;
   $16 = $15 & 15;
   $17 = $16&255;
   $18 = ($17&255)<(10);
   $19 = $16 | 48;
   $20 = (($16) + 87)|0;
   $$sink$i = $18 ? $19 : $20;
   $21 = $$sink$i & 127;
   $22 = ($12|0)==(0);
   if ($22) {
    HEAP8[$7>>0] = 1;
   } else {
    $26 = (($12) + -1)|0;
    HEAP32[$11>>2] = $26;
   }
   HEAP32[$0>>2] = 1;
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $21;
   return;
   break;
  }
  case 3:  {
   HEAP8[$7>>0] = 2;
   HEAP32[$0>>2] = 1;
   $23 = ((($0)) + 4|0);
   HEAP32[$23>>2] = 123;
   return;
   break;
  }
  case 4:  {
   HEAP8[$7>>0] = 3;
   HEAP32[$0>>2] = 1;
   $24 = ((($0)) + 4|0);
   HEAP32[$24>>2] = 117;
   return;
   break;
  }
  case 5:  {
   HEAP8[$7>>0] = 4;
   HEAP32[$0>>2] = 1;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 92;
   return;
   break;
  }
  default: {
   // unreachable;
  }
  }
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h30454026f31a1b13E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN76__LT_core__char__EscapeDefault_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h103d0873c4125157E($0,$1);
 return;
}
function __ZN74__LT_core__char__EscapeDebug_u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h6d297809d8532353E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $return$0$i$i = 0, $tmp1$0$i$i$i = 0, $tmp2$sroa$0$0$$sroa_idx$i = 0, $tmp2$sroa$4$0$$sroa_idx2$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $trunc$i$i = $2&255;
 $trunc$i$i$clear = $trunc$i$i & 3;
 switch ($trunc$i$i$clear<<24>>24) {
 case 0:  {
  $return$0$i$i = 0;
  break;
 }
 case 1:  {
  $return$0$i$i = 1;
  break;
 }
 case 2:  {
  $return$0$i$i = 2;
  break;
 }
 case 3:  {
  $3 = ((($1)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($1)) + 8|0);
  $trunc$i$i$i = HEAP8[$5>>0]|0;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 0:  {
   $tmp1$0$i$i$i = 0;
   break;
  }
  case 1:  {
   $tmp1$0$i$i$i = 1;
   break;
  }
  case 2:  {
   $tmp1$0$i$i$i = 2;
   break;
  }
  case 3:  {
   $tmp1$0$i$i$i = 3;
   break;
  }
  case 4:  {
   $tmp1$0$i$i$i = 4;
   break;
  }
  case 5:  {
   $tmp1$0$i$i$i = 5;
   break;
  }
  default: {
   // unreachable;
  }
  }
  $6 = (($tmp1$0$i$i$i) + ($4))|0;
  $return$0$i$i = $6;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$0>>2] = $return$0$i$i;
 $tmp2$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 HEAP32[$tmp2$sroa$0$0$$sroa_idx$i>>2] = 1;
 $tmp2$sroa$4$0$$sroa_idx2$i = ((($0)) + 8|0);
 HEAP32[$tmp2$sroa$4$0$$sroa_idx2$i>>2] = $return$0$i$i;
 return;
}
function __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>(4);
 if ($3) {
  __ZN4core5slice22slice_index_order_fail17h9c242137b61045c7E($2,4);
  // unreachable;
 } else {
  $4 = (($0) + ($2)|0);
  $5 = (4 - ($2))|0;
  HEAP32[$retVal>>2] = $4;
  $retVal$index1 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index1>>2] = $5;
  return;
 }
}
function __ZN4drop17h1ee1e45039a9c687E_1046($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h99a667ef05a580e5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $builder = 0, $tmp10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $builder = sp;
 $tmp10 = sp + 8|0;
 __ZN4core3fmt8builders16debug_struct_new17hf20bda3204a7fc46E($builder,$1,7645,9);
 HEAP32[$tmp10>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17h13107e30f3c91f4cE($builder,7654,11,$tmp10,2112)|0);
 $2 = (__ZN4core3fmt8builders11DebugStruct6finish17h0059fdfd5fa3db64E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h689f6b1d580204e7E_1050($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17h21e5616eda417818E($2,$1)|0);
 return ($3|0);
}
function __ZN4core3str9Utf8Error11valid_up_to17h2f5b6e6067b7ec21E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN4core3str9from_utf817h62275e07c46015c9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off$i = 0, $$off114$i = 0, $$off116$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond12$i = 0, $cond13$i = 0, $cond14$i = 0, $cond15$i = 0;
 var $cond19$i = 0, $cond7$i = 0, $offset$0$be$i = 0, $offset$0131$i = 0, $offset$1$i = 0, $offset$2126$i = 0, $offset$3$ph$i = 0, $offset$3128$i = 0, $or$cond$i = 0, $or$cond100$i = 0, $or$cond103$i = 0, $or$cond104$i = 0, $or$cond106$i = 0, $or$cond107$i = 0, $or$cond108$i = 0, $or$cond109$i = 0, $or$cond110$i = 0, $or$cond111$i = 0, $or$cond112$i = 0, $or$cond113$i = 0;
 var $or$cond89$i = 0, $or$cond91$i = 0, $or$cond92$i = 0, $or$cond93$i = 0, $or$cond94$i = 0, $or$cond95$i = 0, $or$cond96$i = 0, $or$cond98$i = 0, $or$cond99$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = $1;
   $5 = ($2>>>0)<(8);
   $6 = (($2) + -8)|0;
   $offset$0131$i = 0;
   L3: while(1) {
    $7 = (($1) + ($offset$0131$i)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)<(0);
    L5: do {
     if ($9) {
      $13 = (($offset$0131$i) + 1)|0;
      $14 = ($13>>>0)<($2>>>0);
      if (!($14)) {
       break L3;
      }
      $15 = $8&255;
      $16 = (7665 + ($15)|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = (($1) + ($13)|0);
      $19 = HEAP8[$18>>0]|0;
      switch ($17<<24>>24) {
      case 2:  {
       $20 = $19 & -64;
       $21 = ($20<<24>>24)==(-128);
       if ($21) {
        $offset$1$i = $13;
       } else {
        break L3;
       }
       break;
      }
      case 3:  {
       $22 = (($offset$0131$i) + 2)|0;
       $23 = ($22>>>0)<($2>>>0);
       if (!($23)) {
        break L3;
       }
       $27 = (($1) + ($22)|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28 & -64;
       $cond14$i = ($8<<24>>24)==(-32);
       $30 = ($19&255)<(192);
       $31 = $19 & -32;
       $32 = ($31<<24>>24)==(-96);
       $33 = $cond14$i & $32;
       $cond19$i = ($29<<24>>24)==(-128);
       $or$cond89$i = $33 & $cond19$i;
       if ($or$cond89$i) {
        $offset$1$i = $22;
       } else {
        $$off116$i = (($8) + 31)<<24>>24;
        $34 = ($$off116$i&255)<(12);
        $35 = ($19<<24>>24)<(0);
        $or$cond91$i = $34 & $35;
        $or$cond92$i = $30 & $or$cond91$i;
        $or$cond93$i = $or$cond92$i & $cond19$i;
        if ($or$cond93$i) {
         $offset$1$i = $22;
        } else {
         $cond15$i = ($8<<24>>24)==(-19);
         $or$cond94$i = $cond15$i & $35;
         $36 = ($19&255)<(160);
         $or$cond95$i = $36 & $or$cond94$i;
         $or$cond96$i = $or$cond95$i & $cond19$i;
         if ($or$cond96$i) {
          $offset$1$i = $22;
         } else {
          $37 = $8 & -2;
          $38 = ($37<<24>>24)==(-18);
          $or$cond98$i = $38 & $35;
          $or$cond99$i = $30 & $or$cond98$i;
          $or$cond100$i = $or$cond99$i & $cond19$i;
          if ($or$cond100$i) {
           $offset$1$i = $22;
          } else {
           break L3;
          }
         }
        }
       }
       break;
      }
      case 4:  {
       $24 = (($offset$0131$i) + 2)|0;
       $25 = ($24>>>0)<($2>>>0);
       if (!($25)) {
        break L3;
       }
       $39 = (($offset$0131$i) + 3)|0;
       $40 = ($39>>>0)<($2>>>0);
       if (!($40)) {
        break L3;
       }
       $41 = (($1) + ($24)|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = $42 & -64;
       $44 = (($1) + ($39)|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45 & -64;
       $cond$i = ($8<<24>>24)==(-16);
       $$off$i = (($19) + 112)<<24>>24;
       $47 = ($$off$i&255)<(48);
       $48 = $cond$i & $47;
       $cond12$i = ($43<<24>>24)==(-128);
       $or$cond103$i = $48 & $cond12$i;
       $cond13$i = ($46<<24>>24)==(-128);
       $or$cond104$i = $or$cond103$i & $cond13$i;
       if ($or$cond104$i) {
        $offset$1$i = $39;
       } else {
        $49 = ($19&255)<(192);
        $$off114$i = (($8) + 15)<<24>>24;
        $50 = ($$off114$i&255)<(3);
        $51 = ($19<<24>>24)<(0);
        $or$cond106$i = $50 & $51;
        $or$cond107$i = $49 & $or$cond106$i;
        $or$cond108$i = $or$cond107$i & $cond12$i;
        $or$cond109$i = $or$cond108$i & $cond13$i;
        if ($or$cond109$i) {
         $offset$1$i = $39;
        } else {
         $cond7$i = ($8<<24>>24)==(-12);
         $or$cond110$i = $cond7$i & $51;
         $52 = ($19&255)<(144);
         $or$cond111$i = $52 & $or$cond110$i;
         $or$cond112$i = $or$cond111$i & $cond12$i;
         $or$cond113$i = $or$cond112$i & $cond13$i;
         if ($or$cond113$i) {
          $offset$1$i = $39;
         } else {
          break L3;
         }
        }
       }
       break;
      }
      default: {
       break L3;
      }
      }
      $26 = (($offset$1$i) + 1)|0;
      $offset$0$be$i = $26;
     } else {
      $10 = (($offset$0131$i) + ($4))|0;
      $11 = $10 & 3;
      $12 = ($11|0)==(0);
      if (!($12)) {
       $54 = (($offset$0131$i) + 1)|0;
       $offset$0$be$i = $54;
       break;
      }
      $53 = ($offset$0131$i>>>0)>($6>>>0);
      $or$cond$i = $5 | $53;
      L25: do {
       if ($or$cond$i) {
        $offset$3$ph$i = $offset$0131$i;
       } else {
        $offset$2126$i = $offset$0131$i;
        while(1) {
         $56 = (($1) + ($offset$2126$i)|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = (($offset$2126$i) + 4)|0;
         $59 = (($1) + ($58)|0);
         $60 = HEAP32[$59>>2]|0;
         $61 = $60 | $57;
         $62 = $61 & -2139062144;
         $63 = ($62|0)==(0);
         if (!($63)) {
          $offset$3$ph$i = $offset$2126$i;
          break L25;
         }
         $65 = (($offset$2126$i) + 8)|0;
         $66 = ($65>>>0)>($6>>>0);
         if ($66) {
          $offset$3$ph$i = $65;
          break;
         } else {
          $offset$2126$i = $65;
         }
        }
       }
      } while(0);
      $64 = ($offset$3$ph$i>>>0)<($2>>>0);
      if ($64) {
       $offset$3128$i = $offset$3$ph$i;
       while(1) {
        $67 = (($1) + ($offset$3128$i)|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = ($68<<24>>24)>(-1);
        if (!($69)) {
         $offset$0$be$i = $offset$3128$i;
         break L5;
        }
        $70 = (($offset$3128$i) + 1)|0;
        $71 = ($70>>>0)<($2>>>0);
        if ($71) {
         $offset$3128$i = $70;
        } else {
         $offset$0$be$i = $70;
         break;
        }
       }
      } else {
       $offset$0$be$i = $offset$3$ph$i;
      }
     }
    } while(0);
    $55 = ($offset$0$be$i>>>0)<($2>>>0);
    if ($55) {
     $offset$0131$i = $offset$0$be$i;
    } else {
     break L1;
    }
   }
   HEAP32[$0>>2] = 1;
   $74 = ((($0)) + 4|0);
   HEAP32[$74>>2] = $offset$0131$i;
   return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $72 = ((($0)) + 4|0);
 HEAP32[$72>>2] = $1;
 $73 = ((($0)) + 8|0);
 HEAP32[$73>>2] = $2;
 return;
}
function __ZN4core3str16slice_error_fail17hec153863008515e9E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $begin = 0, $ellipsis = 0, $end = 0, $max$0$i24 = 0, $not$$i$i = 0, $or$cond$i$i = 0, $s = 0, $tmp0$sroa$0$0 = 0, $tmp0$sroa$8$0 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp1$sroa$0$0$$sroa_idx$i8 = 0, $tmp14 = 0, $tmp36 = 0, $tmp41 = 0, $tmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $begin = sp + 132|0;
 $end = sp + 128|0;
 $s = sp + 120|0;
 $ellipsis = sp + 112|0;
 $tmp9 = sp + 88|0;
 $tmp14 = sp + 56|0;
 $tmp36 = sp + 32|0;
 $tmp41 = sp;
 HEAP32[$begin>>2] = $2;
 HEAP32[$end>>2] = $3;
 $4 = ($1>>>0)<(257);
 L1: do {
  if ($4) {
   $tmp0$sroa$0$0 = 1;$tmp0$sroa$8$0 = $1;
  } else {
   $max$0$i24 = 256;
   while(1) {
    $not$$i$i = ($max$0$i24>>>0)<($1>>>0);
    if ($not$$i$i) {
     $5 = (($0) + ($max$0$i24)|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)>(-65);
     if ($7) {
      $tmp0$sroa$0$0 = 0;$tmp0$sroa$8$0 = $max$0$i24;
      break L1;
     }
    }
    $8 = (($max$0$i24) + -1)|0;
    $9 = ($8|0)==(0);
    $10 = ($8|0)==($1|0);
    $or$cond$i$i = $9 | $10;
    if ($or$cond$i$i) {
     $tmp0$sroa$0$0 = 0;$tmp0$sroa$8$0 = $8;
     break;
    } else {
     $max$0$i24 = $8;
    }
   }
  }
 } while(0);
 $11 = $0;
 HEAP32[$s>>2] = $11;
 $12 = ((($s)) + 4|0);
 HEAP32[$12>>2] = $tmp0$sroa$8$0;
 $$ = $tmp0$sroa$0$0 ? 11004 : 7921;
 $$26 = $tmp0$sroa$0$0 ? 0 : 5;
 HEAP32[$ellipsis>>2] = $$;
 $13 = ((($ellipsis)) + 4|0);
 HEAP32[$13>>2] = $$26;
 $14 = ($2>>>0)>($3>>>0);
 if ($14) {
  $15 = $begin;
  $16 = $end;
  $17 = $s;
  $18 = $ellipsis;
  HEAP32[$tmp14>>2] = $15;
  $19 = ((($tmp14)) + 4|0);
  HEAP32[$19>>2] = (142);
  $20 = ((($tmp14)) + 8|0);
  HEAP32[$20>>2] = $16;
  $21 = ((($tmp14)) + 12|0);
  HEAP32[$21>>2] = (142);
  $22 = ((($tmp14)) + 16|0);
  HEAP32[$22>>2] = $17;
  $23 = ((($tmp14)) + 20|0);
  HEAP32[$23>>2] = (146);
  $24 = ((($tmp14)) + 24|0);
  HEAP32[$24>>2] = $18;
  $25 = ((($tmp14)) + 28|0);
  HEAP32[$25>>2] = (146);
  HEAP32[$tmp9>>2] = 2912;
  $26 = ((($tmp9)) + 4|0);
  HEAP32[$26>>2] = 4;
  $tmp1$sroa$0$0$$sroa_idx$i8 = ((($tmp9)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i8>>2] = 0;
  $27 = ((($tmp9)) + 16|0);
  HEAP32[$27>>2] = $tmp14;
  $28 = ((($tmp9)) + 20|0);
  HEAP32[$28>>2] = 4;
  __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp9,2944);
  // unreachable;
 } else {
  $29 = $begin;
  $30 = $end;
  $31 = $s;
  $32 = $ellipsis;
  HEAP32[$tmp41>>2] = $29;
  $33 = ((($tmp41)) + 4|0);
  HEAP32[$33>>2] = (142);
  $34 = ((($tmp41)) + 8|0);
  HEAP32[$34>>2] = $30;
  $35 = ((($tmp41)) + 12|0);
  HEAP32[$35>>2] = (142);
  $36 = ((($tmp41)) + 16|0);
  HEAP32[$36>>2] = $31;
  $37 = ((($tmp41)) + 20|0);
  HEAP32[$37>>2] = (146);
  $38 = ((($tmp41)) + 24|0);
  HEAP32[$38>>2] = $32;
  $39 = ((($tmp41)) + 28|0);
  HEAP32[$39>>2] = (146);
  HEAP32[$tmp36>>2] = 2956;
  $40 = ((($tmp36)) + 4|0);
  HEAP32[$40>>2] = 5;
  $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp36)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
  $41 = ((($tmp36)) + 16|0);
  HEAP32[$41>>2] = $tmp41;
  $42 = ((($tmp36)) + 20|0);
  HEAP32[$42>>2] = 4;
  __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp36,2996);
  // unreachable;
 }
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_1063($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN4core3fmt8builders11DebugStruct5field17h13107e30f3c91f4cE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$i$i = 0, $$14$i$i = 0, $$elt = 0, $$pre = 0, $$pre$phiZ2D = 0, $$unpack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $name = 0, $prefix$i$i = 0, $return$sroa$0$0$i = 0, $return$sroa$0$0$i$i = 0, $switch2$i = 0, $tmp1$sroa$0$0$$sroa_idx$i$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i13$i$i = 0, $tmp1$sroa$4$0$$sroa_idx2$i$i$i = 0, $tmp12$i$i = 0, $tmp28$i$i = 0, $tmp33$i$i = 0, $tmp7$i$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $prefix$i$i = sp + 120|0;
 $writer$i$i = sp + 112|0;
 $tmp7$i$i = sp + 88|0;
 $tmp12$i$i = sp + 64|0;
 $tmp28$i$i = sp + 40|0;
 $tmp33$i$i = sp + 16|0;
 $name = sp + 8|0;
 $value = sp;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$value>>2] = $3;
 $6 = ((($value)) + 4|0);
 HEAP32[$6>>2] = $4;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP8[$$elt>>0]|0;
 $7 = $name;
 $8 = $value;
 $switch2$i = ($$unpack<<24>>24)==(0);
 if (!($switch2$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$return$sroa$0$0$i = 1;
  HEAP8[$$elt>>0] = $return$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return ($0|0);
 }
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $$$i$i = $11 ? 8295 : 6166;
 $$14$i$i = $11 ? 2 : 1;
 HEAP32[$prefix$i$i>>2] = $$$i$i;
 $12 = ((($prefix$i$i)) + 4|0);
 HEAP32[$12>>2] = $$14$i$i;
 $13 = HEAP32[$0>>2]|0;
 $14 = (__ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($13)|0);
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 if ($16) {
  $29 = HEAP32[$0>>2]|0;
  $30 = $prefix$i$i;
  HEAP32[$tmp33$i$i>>2] = $30;
  $31 = ((($tmp33$i$i)) + 4|0);
  HEAP32[$31>>2] = (147);
  $32 = ((($tmp33$i$i)) + 8|0);
  HEAP32[$32>>2] = $7;
  $33 = ((($tmp33$i$i)) + 12|0);
  HEAP32[$33>>2] = (147);
  $34 = ((($tmp33$i$i)) + 16|0);
  HEAP32[$34>>2] = $8;
  $35 = ((($tmp33$i$i)) + 20|0);
  HEAP32[$35>>2] = (148);
  HEAP32[$tmp28$i$i>>2] = 3160;
  $36 = ((($tmp28$i$i)) + 4|0);
  HEAP32[$36>>2] = 3;
  $tmp1$sroa$0$0$$sroa_idx$i$i$i = ((($tmp28$i$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
  $37 = ((($tmp28$i$i)) + 16|0);
  HEAP32[$37>>2] = $tmp33$i$i;
  $38 = ((($tmp28$i$i)) + 20|0);
  HEAP32[$38>>2] = 3;
  $39 = (__ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E($29,$tmp28$i$i)|0);
  $return$sroa$0$0$i$i = $39;
 } else {
  $17 = HEAP32[$0>>2]|0;
  HEAP32[$writer$i$i>>2] = $17;
  $18 = ((($writer$i$i)) + 4|0);
  HEAP8[$18>>0] = 0;
  $19 = $prefix$i$i;
  HEAP32[$tmp12$i$i>>2] = $19;
  $20 = ((($tmp12$i$i)) + 4|0);
  HEAP32[$20>>2] = (147);
  $21 = ((($tmp12$i$i)) + 8|0);
  HEAP32[$21>>2] = $7;
  $22 = ((($tmp12$i$i)) + 12|0);
  HEAP32[$22>>2] = (147);
  $23 = ((($tmp12$i$i)) + 16|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($tmp12$i$i)) + 20|0);
  HEAP32[$24>>2] = (148);
  HEAP32[$tmp7$i$i>>2] = 3028;
  $25 = ((($tmp7$i$i)) + 4|0);
  HEAP32[$25>>2] = 3;
  $tmp1$sroa$0$0$$sroa_idx$i13$i$i = ((($tmp7$i$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i13$i$i>>2] = 3052;
  $tmp1$sroa$4$0$$sroa_idx2$i$i$i = ((($tmp7$i$i)) + 12|0);
  HEAP32[$tmp1$sroa$4$0$$sroa_idx2$i$i$i>>2] = 3;
  $26 = ((($tmp7$i$i)) + 16|0);
  HEAP32[$26>>2] = $tmp12$i$i;
  $27 = ((($tmp7$i$i)) + 20|0);
  HEAP32[$27>>2] = 3;
  $28 = (__ZN4core3fmt5write17h02db2923adb244ceE($writer$i$i,2128,$tmp7$i$i)|0);
  $return$sroa$0$0$i$i = $28;
 }
 $$pre$phiZ2D = $9;$return$sroa$0$0$i = $return$sroa$0$0$i$i;
 HEAP8[$$elt>>0] = $return$sroa$0$0$i;
 HEAP8[$$pre$phiZ2D>>0] = 1;
 STACKTOP = sp;return ($0|0);
}
function __ZN4drop17h1ee1e45039a9c687E_1088($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_1093($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hb51bac9a7676c320E($3,$4,$1)|0);
 return ($5|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h10dede25f4daf49eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 255]($3,$1)|0);
 return ($7|0);
}
function __ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc1c4184bcb72aabeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i$i = 0, $$cast$i$i$i$i$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i = 0, $not$$i$i$i = 0, $not$$i$i38 = 0, $not$switch4$i = 0, $not$switch4$i35 = 0, $or$cond$i$i37 = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i$i = 0, $phitmp33$i$i$i$i$i$i$i = 0;
 var $return$0$i10$i$i$i$i$i$i$i = 0, $return$0$i16$i$i$i$i$i$i$i = 0, $return$0$i23$i$i$i$i$i$i$i = 0, $return$sroa$0$0 = 0, $s$sroa$0$057 = 0, $s$sroa$10$058 = 0, $split$0 = 0, $tmp1$sroa$4$0$ph$i$i$i$i$i = 0, $tmp2$sroa$0$0$i$i$i = 0, $tmp2$sroa$6$0$i = 0, $tmp2$sroa$6$1$i = 0, $tmp2$sroa$8$0$i$i$i = 0, $tmp2$sroa$8$1$i$i$i = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $return$sroa$0$0 = 0;
  return ($return$sroa$0$0|0);
 }
 $4 = ((($0)) + 4|0);
 $s$sroa$0$057 = $1;$s$sroa$10$058 = $2;
 L4: while(1) {
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $7 = HEAP32[$0>>2]|0;
   $8 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($7,8299,4)|0);
   $not$switch4$i = ($8<<24>>24)==(0);
   if (!($not$switch4$i)) {
    $return$sroa$0$0 = 1;
    label = 5;
    break;
   }
  }
  $9 = (($s$sroa$0$057) + ($s$sroa$10$058)|0);
  $10 = $s$sroa$0$057;
  $11 = $10;$tmp2$sroa$6$0$i = 0;$tmp2$sroa$8$0$i$i$i = 0;
  L9: while(1) {
   $$cast$i$i$i$i$i = $11;
   $12 = ($$cast$i$i$i$i$i|0)==($9|0);
   if ($12) {
    $66 = $11;$tmp2$sroa$0$0$i$i$i = 2;$tmp2$sroa$6$1$i = $tmp2$sroa$6$0$i;$tmp2$sroa$8$1$i$i$i = $tmp2$sroa$8$0$i$i$i;
   } else {
    $15 = ((($$cast$i$i$i$i$i)) + 1|0);
    $14 = HEAP8[$$cast$i$i$i$i$i>>0]|0;
    $16 = ($14<<24>>24)>(-1);
    $17 = $15;
    if ($16) {
     $13 = $14&255;
     $52 = $17;$tmp1$sroa$4$0$ph$i$i$i$i$i = $13;
    } else {
     $18 = $14 & 31;
     $19 = $18&255;
     $20 = ($15|0)==($9|0);
     if ($20) {
      $28 = $9;$67 = $17;$return$0$i23$i$i$i$i$i$i$i = 0;
     } else {
      $21 = ((($$cast$i$i$i$i$i)) + 2|0);
      $22 = HEAP8[$15>>0]|0;
      $phitmp$i$i$i$i$i$i$i = $22 & 63;
      $23 = $21;
      $28 = $21;$67 = $23;$return$0$i23$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i;
     }
     $24 = $19 << 6;
     $25 = $return$0$i23$i$i$i$i$i$i$i&255;
     $26 = $25 | $24;
     $27 = ($14&255)>(223);
     if ($27) {
      $29 = ($28|0)==($9|0);
      if ($29) {
       $39 = $9;$68 = $67;$return$0$i16$i$i$i$i$i$i$i = 0;
      } else {
       $30 = ((($28)) + 1|0);
       $31 = HEAP8[$28>>0]|0;
       $phitmp32$i$i$i$i$i$i$i = $31 & 63;
       $32 = $30;
       $39 = $30;$68 = $32;$return$0$i16$i$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i$i;
      }
      $33 = $25 << 6;
      $34 = $return$0$i16$i$i$i$i$i$i$i&255;
      $35 = $34 | $33;
      $36 = $19 << 12;
      $37 = $35 | $36;
      $38 = ($14&255)>(239);
      if ($38) {
       $40 = ($39|0)==($9|0);
       if ($40) {
        $69 = $68;$return$0$i10$i$i$i$i$i$i$i = 0;
       } else {
        $41 = ((($39)) + 1|0);
        $42 = HEAP8[$39>>0]|0;
        $phitmp33$i$i$i$i$i$i$i = $42 & 63;
        $43 = $41;
        $69 = $43;$return$0$i10$i$i$i$i$i$i$i = $phitmp33$i$i$i$i$i$i$i;
       }
       $44 = $19 << 18;
       $45 = $44 & 1835008;
       $46 = $35 << 6;
       $47 = $return$0$i10$i$i$i$i$i$i$i&255;
       $48 = $46 | $45;
       $49 = $48 | $47;
       $52 = $69;$tmp1$sroa$4$0$ph$i$i$i$i$i = $49;
      } else {
       $52 = $68;$tmp1$sroa$4$0$ph$i$i$i$i$i = $37;
      }
     } else {
      $52 = $67;$tmp1$sroa$4$0$ph$i$i$i$i$i = $26;
     }
    }
    $50 = (($tmp2$sroa$6$0$i) - ($11))|0;
    $51 = (($50) + ($52))|0;
    $not$$i$i$i = ($tmp1$sroa$4$0$ph$i$i$i$i$i|0)!=(10);
    $$$i$i$i = $not$$i$i$i&1;
    $66 = $52;$tmp2$sroa$0$0$i$i$i = $$$i$i$i;$tmp2$sroa$6$1$i = $51;$tmp2$sroa$8$1$i$i$i = $tmp2$sroa$6$0$i;
   }
   $trunc$i$i$i = $tmp2$sroa$0$0$i$i$i&255;
   $trunc$i$i$i$clear = $trunc$i$i$i & 3;
   switch ($trunc$i$i$i$clear<<24>>24) {
   case 1:  {
    $11 = $66;$tmp2$sroa$6$0$i = $tmp2$sroa$6$1$i;$tmp2$sroa$8$0$i$i$i = $tmp2$sroa$8$1$i$i$i;
    break;
   }
   case 0:  {
    label = 23;
    break L9;
    break;
   }
   case 2:  {
    label = 22;
    break L9;
    break;
   }
   default: {
    label = 21;
    break L4;
   }
   }
  }
  if ((label|0) == 22) {
   label = 0;
   HEAP8[$4>>0] = 0;
   $split$0 = $s$sroa$10$058;
  }
  else if ((label|0) == 23) {
   label = 0;
   HEAP8[$4>>0] = 1;
   $53 = (($tmp2$sroa$8$1$i$i$i) + 1)|0;
   $split$0 = $53;
  }
  $54 = HEAP32[$0>>2]|0;
  $55 = ($split$0|0)==(0);
  $56 = ($s$sroa$10$058|0)==($split$0|0);
  $or$cond$i$i37 = $55 | $56;
  if (!($or$cond$i$i37)) {
   $not$$i$i38 = ($s$sroa$10$058>>>0)>($split$0>>>0);
   if (!($not$$i$i38)) {
    label = 27;
    break;
   }
   $57 = (($s$sroa$0$057) + ($split$0)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = ($58<<24>>24)>(-65);
   if (!($59)) {
    label = 27;
    break;
   }
  }
  $60 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($54,$s$sroa$0$057,$split$0)|0);
  $not$switch4$i35 = ($60<<24>>24)==(0);
  if (!($not$switch4$i35)) {
   $return$sroa$0$0 = 1;
   label = 5;
   break;
  }
  if ($or$cond$i$i37) {
   $$pre$i = (($s$sroa$0$057) + ($split$0)|0);
   $$pre$phi$iZ2D = $$pre$i;
  } else {
   $not$$i$i = ($s$sroa$10$058>>>0)>($split$0>>>0);
   if (!($not$$i$i)) {
    label = 33;
    break;
   }
   $61 = (($s$sroa$0$057) + ($split$0)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = ($62<<24>>24)>(-65);
   if ($63) {
    $$pre$phi$iZ2D = $61;
   } else {
    label = 33;
    break;
   }
  }
  $64 = (($s$sroa$10$058) - ($split$0))|0;
  $65 = ($64|0)==(0);
  if ($65) {
   $return$sroa$0$0 = 0;
   label = 5;
   break;
  } else {
   $s$sroa$0$057 = $$pre$phi$iZ2D;$s$sroa$10$058 = $64;
  }
 }
 if ((label|0) == 5) {
  return ($return$sroa$0$0|0);
 }
 else if ((label|0) == 21) {
  // unreachable;
 }
 else if ((label|0) == 27) {
  __ZN4core3str16slice_error_fail17hec153863008515e9E($s$sroa$0$057,$s$sroa$10$058,0,$split$0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  __ZN4core3str16slice_error_fail17hec153863008515e9E($s$sroa$0$057,$s$sroa$10$058,$split$0,$s$sroa$10$058);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt5Write10write_char17h2e13cc6b1d2a766aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $tmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $tmp6 = sp + 8|0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817ha52c5b0f35a8e6f3E($tmp6,$1);
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp6);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc1c4184bcb72aabeE($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17h734cb31f39261e83E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $tmp3 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3 = sp + 24|0;
 $tmp5 = sp;
 HEAP32[$tmp3>>2] = $0;
 ;HEAP32[$tmp5>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3,2152,$tmp5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hea54b1e6d6bd4e6cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc1c4184bcb72aabeE($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h715d26bb790dade1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$load$i = 0, $$fca$1$load$i = 0, $$fca$2$gep$phi$trans$insert$i = 0, $$fca$2$load$i = 0, $$fca$2$load$pre$i = 0, $$fca$3$load$i = 0, $$repack10$i = 0, $$repack12$i = 0, $$repack14$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf$i = 0, $buf21$i = 0, $pos$0$i = 0, $scevgep$i = 0, $scevgep17$i = 0, $scevgep18$i = 0, $scevgep1819$i = 0, $scevgep22$i = 0, $scevgep2223$i = 0, $tmp6$i = 0, $umax$i = 0, $umax20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $buf$i = sp + 16|0;
 $tmp6$i = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $buf21$i = $buf$i;
 $scevgep$i = ((($buf$i)) + 4|0);
 $scevgep17$i = $scevgep$i;
 $scevgep18$i = ((($buf$i)) + 1|0);
 $scevgep1819$i = $scevgep18$i;
 $4 = ($scevgep17$i>>>0)>($scevgep1819$i>>>0);
 $umax$i = $4 ? $scevgep17$i : $scevgep1819$i;
 $umax20$i = $umax$i;
 $5 = (0 - ($buf21$i))|0;
 $scevgep22$i = (($umax20$i) + ($5)|0);
 $scevgep2223$i = $scevgep22$i;
 _memset(($buf$i|0),0,($scevgep2223$i|0))|0;
 $6 = ($1>>>0)<(128);
 do {
  if ($6) {
   $8 = ((($buf$i)) + 3|0);
   $9 = $1&255;
   HEAP8[$8>>0] = $9;
   $$fca$2$gep$phi$trans$insert$i = ((($buf$i)) + 2|0);
   $$fca$2$load$pre$i = HEAP8[$$fca$2$gep$phi$trans$insert$i>>0]|0;
   $$fca$2$load$i = $$fca$2$load$pre$i;$$fca$3$load$i = $9;$pos$0$i = 3;
  } else {
   $7 = ($1>>>0)<(2048);
   if ($7) {
    $10 = $1 >>> 6;
    $11 = $10 & 31;
    $12 = $11&255;
    $13 = ((($buf$i)) + 2|0);
    $14 = $12 | -64;
    HEAP8[$13>>0] = $14;
    $15 = $1 & 63;
    $16 = $15&255;
    $17 = ((($buf$i)) + 3|0);
    $18 = $16 | -128;
    HEAP8[$17>>0] = $18;
    $$fca$2$load$i = $14;$$fca$3$load$i = $18;$pos$0$i = 2;
    break;
   }
   $19 = ($1>>>0)<(65536);
   if ($19) {
    $20 = $1 >>> 12;
    $21 = $20 & 15;
    $22 = $21&255;
    $23 = $22 | -32;
    HEAP8[$scevgep18$i>>0] = $23;
    $24 = $1 >>> 6;
    $25 = $24 & 63;
    $26 = $25&255;
    $27 = ((($buf$i)) + 2|0);
    $28 = $26 | -128;
    HEAP8[$27>>0] = $28;
    $29 = $1 & 63;
    $30 = $29&255;
    $31 = ((($buf$i)) + 3|0);
    $32 = $30 | -128;
    HEAP8[$31>>0] = $32;
    $$fca$2$load$i = $28;$$fca$3$load$i = $32;$pos$0$i = 1;
    break;
   } else {
    $33 = $1 >>> 18;
    $34 = $33 & 7;
    $35 = $34&255;
    $36 = $35 | -16;
    HEAP8[$buf$i>>0] = $36;
    $37 = $1 >>> 12;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = $39 | -128;
    HEAP8[$scevgep18$i>>0] = $40;
    $41 = $1 >>> 6;
    $42 = $41 & 63;
    $43 = $42&255;
    $44 = ((($buf$i)) + 2|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $46 = $1 & 63;
    $47 = $46&255;
    $48 = ((($buf$i)) + 3|0);
    $49 = $47 | -128;
    HEAP8[$48>>0] = $49;
    $$fca$2$load$i = $45;$$fca$3$load$i = $49;$pos$0$i = 0;
    break;
   }
  }
 } while(0);
 $$fca$0$load$i = HEAP8[$buf$i>>0]|0;
 $$fca$1$load$i = HEAP8[$scevgep18$i>>0]|0;
 HEAP8[$tmp6$i>>0] = $$fca$0$load$i;
 $$repack10$i = ((($tmp6$i)) + 1|0);
 HEAP8[$$repack10$i>>0] = $$fca$1$load$i;
 $$repack12$i = ((($tmp6$i)) + 2|0);
 HEAP8[$$repack12$i>>0] = $$fca$2$load$i;
 $$repack14$i = ((($tmp6$i)) + 3|0);
 HEAP8[$$repack14$i>>0] = $$fca$3$load$i;
 $50 = ((($tmp6$i)) + 4|0);
 HEAP32[$50>>2] = $pos$0$i;
 __ZN4core4char10EncodeUtf88as_slice17h4fc5655cea682db7E($2,$tmp6$i);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $51 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc1c4184bcb72aabeE($3,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($51|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h46371b52736f1807E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $tmp3$i = 0, $tmp5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp3$i = sp + 24|0;
 $tmp5$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$tmp3$i>>2] = $2;
 ;HEAP32[$tmp5$i>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp5$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp5$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp5$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$tmp5$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$tmp5$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17h02db2923adb244ceE($tmp3$i,2152,$tmp5$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt8builders10DebugTuple6finish17h99bd931958d7f818E($0) {
 $0 = $0|0;
 var $$elt$phi$trans$insert = 0, $$unpack = 0, $$unpack$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$switch4$i$i$i = 0, $not$switch4$i18$i$i = 0, $return$sroa$0$0$i = 0, $switch3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$elt$phi$trans$insert = ((($0)) + 4|0);
 $$unpack$pre = HEAP8[$$elt$phi$trans$insert>>0]|0;
 if ($3) {
  $$unpack = $$unpack$pre;
  return ($$unpack|0);
 }
 $switch3$i = ($$unpack$pre<<24>>24)==(0);
 do {
  if ($switch3$i) {
   $4 = HEAP32[$0>>2]|0;
   $5 = (__ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($4)|0);
   $6 = $5 & 4;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = HEAP32[$0>>2]|0;
    $9 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($8,8303,1)|0);
    $not$switch4$i$i$i = ($9<<24>>24)==(0);
    if (!($not$switch4$i$i$i)) {
     $return$sroa$0$0$i = 1;
     break;
    }
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = ((($0)) + 12|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $15 = HEAP32[$0>>2]|0;
     $16 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($15,6166,1)|0);
     $not$switch4$i18$i$i = ($16<<24>>24)==(0);
     if (!($not$switch4$i18$i$i)) {
      $return$sroa$0$0$i = 1;
      break;
     }
    }
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($17,8304,1)|0);
   $return$sroa$0$0$i = $18;
  } else {
   $return$sroa$0$0$i = 1;
  }
 } while(0);
 HEAP8[$$elt$phi$trans$insert>>0] = $return$sroa$0$0$i;
 $$unpack = $return$sroa$0$0$i;
 return ($$unpack|0);
}
function __ZN4core3fmt8builders10DebugTuple5field17h6e4856dbc1d95c67E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$15$i$i = 0, $$16$i$i = 0, $$elt = 0, $$unpack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $prefix$i$i = 0, $return$sroa$0$0$i = 0, $return$sroa$0$0$i$i = 0, $space$i$i = 0, $switch3$i = 0, $tmp1$sroa$0$0$$sroa_idx$i$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i17$i$i = 0, $tmp1$sroa$4$0$$sroa_idx2$i$i$i = 0, $tmp14$i$i = 0, $tmp26$i$i = 0, $tmp31$i$i = 0, $tmp9$i$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $prefix$i$i = sp + 112|0;
 $space$i$i = sp + 104|0;
 $writer$i$i = sp + 96|0;
 $tmp9$i$i = sp + 72|0;
 $tmp14$i$i = sp + 56|0;
 $tmp26$i$i = sp + 32|0;
 $tmp31$i$i = sp + 8|0;
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP8[$$elt>>0]|0;
 $4 = $value;
 $switch3$i = ($$unpack<<24>>24)==(0);
 $5 = ((($0)) + 8|0);
 if (!($switch3$i)) {
  $return$sroa$0$0$i = 1;
  HEAP8[$$elt>>0] = $return$sroa$0$0$i;
  $37 = HEAP32[$5>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$5>>2] = $38;
  STACKTOP = sp;return ($0|0);
 }
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $$$i$i = $7 ? 6158 : 6166;
 $$15$i$i = $7 ? 11004 : 6178;
 $8 = $7&1;
 $$16$i$i = $8 ^ 1;
 HEAP32[$prefix$i$i>>2] = $$$i$i;
 $9 = ((($prefix$i$i)) + 4|0);
 HEAP32[$9>>2] = 1;
 HEAP32[$space$i$i>>2] = $$15$i$i;
 $10 = ((($space$i$i)) + 4|0);
 HEAP32[$10>>2] = $$16$i$i;
 $11 = HEAP32[$0>>2]|0;
 $12 = (__ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($11)|0);
 $13 = $12 & 4;
 $14 = ($13|0)==(0);
 if ($14) {
  $25 = HEAP32[$0>>2]|0;
  $26 = $prefix$i$i;
  $27 = $space$i$i;
  HEAP32[$tmp31$i$i>>2] = $26;
  $28 = ((($tmp31$i$i)) + 4|0);
  HEAP32[$28>>2] = (147);
  $29 = ((($tmp31$i$i)) + 8|0);
  HEAP32[$29>>2] = $27;
  $30 = ((($tmp31$i$i)) + 12|0);
  HEAP32[$30>>2] = (147);
  $31 = ((($tmp31$i$i)) + 16|0);
  HEAP32[$31>>2] = $4;
  $32 = ((($tmp31$i$i)) + 20|0);
  HEAP32[$32>>2] = (148);
  HEAP32[$tmp26$i$i>>2] = 3272;
  $33 = ((($tmp26$i$i)) + 4|0);
  HEAP32[$33>>2] = 3;
  $tmp1$sroa$0$0$$sroa_idx$i$i$i = ((($tmp26$i$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
  $34 = ((($tmp26$i$i)) + 16|0);
  HEAP32[$34>>2] = $tmp31$i$i;
  $35 = ((($tmp26$i$i)) + 20|0);
  HEAP32[$35>>2] = 3;
  $36 = (__ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E($25,$tmp26$i$i)|0);
  $return$sroa$0$0$i$i = $36;
 } else {
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$writer$i$i>>2] = $15;
  $16 = ((($writer$i$i)) + 4|0);
  HEAP8[$16>>0] = 0;
  $17 = $prefix$i$i;
  HEAP32[$tmp14$i$i>>2] = $17;
  $18 = ((($tmp14$i$i)) + 4|0);
  HEAP32[$18>>2] = (147);
  $19 = ((($tmp14$i$i)) + 8|0);
  HEAP32[$19>>2] = $4;
  $20 = ((($tmp14$i$i)) + 12|0);
  HEAP32[$20>>2] = (148);
  HEAP32[$tmp9$i$i>>2] = 3184;
  $21 = ((($tmp9$i$i)) + 4|0);
  HEAP32[$21>>2] = 2;
  $tmp1$sroa$0$0$$sroa_idx$i17$i$i = ((($tmp9$i$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i17$i$i>>2] = 3200;
  $tmp1$sroa$4$0$$sroa_idx2$i$i$i = ((($tmp9$i$i)) + 12|0);
  HEAP32[$tmp1$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $22 = ((($tmp9$i$i)) + 16|0);
  HEAP32[$22>>2] = $tmp14$i$i;
  $23 = ((($tmp9$i$i)) + 20|0);
  HEAP32[$23>>2] = 2;
  $24 = (__ZN4core3fmt5write17h02db2923adb244ceE($writer$i$i,2128,$tmp9$i$i)|0);
  $return$sroa$0$0$i$i = $24;
 }
 $return$sroa$0$0$i = $return$sroa$0$0$i$i;
 HEAP8[$$elt>>0] = $return$sroa$0$0$i;
 $37 = HEAP32[$5>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$5>>2] = $38;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core5slice20slice_index_len_fail17h4749ae34ab6ab5b2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $len = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $index = sp + 44|0;
 $len = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 $2 = $index;
 $3 = $len;
 HEAP32[$tmp7>>2] = $2;
 $4 = ((($tmp7)) + 4|0);
 HEAP32[$4>>2] = (142);
 $5 = ((($tmp7)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($tmp7)) + 12|0);
 HEAP32[$6>>2] = (142);
 HEAP32[$tmp2>>2] = 3296;
 $7 = ((($tmp2)) + 4|0);
 HEAP32[$7>>2] = 2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($tmp2)) + 16|0);
 HEAP32[$8>>2] = $tmp7;
 $9 = ((($tmp2)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,3312);
 // unreachable;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb0bd39a04aff181E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf29 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf29 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 20;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (8095 + ($7)|0);
   $12 = (($buf29) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (8095 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf29) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (8095 + ($20)|0);
  $24 = (($buf29) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf29) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf29) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,11004,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (8095 + ($31)|0);
  $34 = (($buf29) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf29) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,11004,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core3fmt8builders10DebugInner5entry17ha55631e78797c218E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$14$i$i = 0, $$15$i$i = 0, $$elt = 0, $$pre = 0, $$pre$phiZ2D = 0, $$unpack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0;
 var $prefix$i$i = 0, $prefix1$i$i = 0, $return$sroa$0$0$i = 0, $switch3$i = 0, $tmp1$sroa$0$0$$sroa_idx$i$i$i = 0, $tmp1$sroa$0$0$$sroa_idx$i10$i$i = 0, $tmp1$sroa$4$0$$sroa_idx2$i$i$i = 0, $tmp12$i$i = 0, $tmp25$i$i = 0, $tmp30$i$i = 0, $tmp7$i$i = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $writer$i$i = sp + 104|0;
 $prefix$i$i = sp + 96|0;
 $prefix1$i$i = sp + 88|0;
 $tmp7$i$i = sp + 64|0;
 $tmp12$i$i = sp + 48|0;
 $tmp25$i$i = sp + 24|0;
 $tmp30$i$i = sp + 8|0;
 $entry = sp;
 HEAP32[$entry>>2] = $1;
 $3 = ((($entry)) + 4|0);
 HEAP32[$3>>2] = $2;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP8[$$elt>>0]|0;
 $4 = $entry;
 $switch3$i = ($$unpack<<24>>24)==(0);
 if (!($switch3$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$return$sroa$0$0$i = 1;
  HEAP8[$$elt>>0] = $return$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($5)|0);
 $7 = $6 & 4;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 if ($8) {
  $24 = ($10<<24>>24)==(0);
  $$14$i$i = $24 ? 11004 : 8345;
  $$15$i$i = $24 ? 0 : 2;
  HEAP32[$prefix1$i$i>>2] = $$14$i$i;
  $25 = ((($prefix1$i$i)) + 4|0);
  HEAP32[$25>>2] = $$15$i$i;
  $26 = HEAP32[$0>>2]|0;
  $27 = $prefix1$i$i;
  HEAP32[$tmp30$i$i>>2] = $27;
  $28 = ((($tmp30$i$i)) + 4|0);
  HEAP32[$28>>2] = (147);
  $29 = ((($tmp30$i$i)) + 8|0);
  HEAP32[$29>>2] = $4;
  $30 = ((($tmp30$i$i)) + 12|0);
  HEAP32[$30>>2] = (148);
  HEAP32[$tmp25$i$i>>2] = 3332;
  $31 = ((($tmp25$i$i)) + 4|0);
  HEAP32[$31>>2] = 2;
  $tmp1$sroa$0$0$$sroa_idx$i$i$i = ((($tmp25$i$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i$i$i>>2] = 0;
  $32 = ((($tmp25$i$i)) + 16|0);
  HEAP32[$32>>2] = $tmp30$i$i;
  $33 = ((($tmp25$i$i)) + 20|0);
  HEAP32[$33>>2] = 2;
  $34 = (__ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E($26,$tmp25$i$i)|0);
  $$pre$phiZ2D = $9;$return$sroa$0$0$i = $34;
  HEAP8[$$elt>>0] = $return$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $11 = HEAP32[$0>>2]|0;
  HEAP32[$writer$i$i>>2] = $11;
  $12 = ((($writer$i$i)) + 4|0);
  HEAP8[$12>>0] = 0;
  $13 = ($10<<24>>24)==(0);
  $$$i$i = $13 ? 11004 : 6166;
  $14 = $10&255;
  HEAP32[$prefix$i$i>>2] = $$$i$i;
  $15 = ((($prefix$i$i)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = $prefix$i$i;
  HEAP32[$tmp12$i$i>>2] = $16;
  $17 = ((($tmp12$i$i)) + 4|0);
  HEAP32[$17>>2] = (147);
  $18 = ((($tmp12$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($tmp12$i$i)) + 12|0);
  HEAP32[$19>>2] = (148);
  HEAP32[$tmp7$i$i>>2] = 3184;
  $20 = ((($tmp7$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $tmp1$sroa$0$0$$sroa_idx$i10$i$i = ((($tmp7$i$i)) + 8|0);
  HEAP32[$tmp1$sroa$0$0$$sroa_idx$i10$i$i>>2] = 3200;
  $tmp1$sroa$4$0$$sroa_idx2$i$i$i = ((($tmp7$i$i)) + 12|0);
  HEAP32[$tmp1$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $21 = ((($tmp7$i$i)) + 16|0);
  HEAP32[$21>>2] = $tmp12$i$i;
  $22 = ((($tmp7$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17h02db2923adb244ceE($writer$i$i,2128,$tmp7$i$i)|0);
  $$pre$phiZ2D = $9;$return$sroa$0$0$i = $23;
  HEAP8[$$elt>>0] = $return$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
}
function __ZN4core5slice22slice_index_order_fail17h9c242137b61045c7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $index = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp2 = 0, $tmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $index = sp + 44|0;
 $end = sp + 40|0;
 $tmp2 = sp + 16|0;
 $tmp7 = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = $index;
 $3 = $end;
 HEAP32[$tmp7>>2] = $2;
 $4 = ((($tmp7)) + 4|0);
 HEAP32[$4>>2] = (142);
 $5 = ((($tmp7)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($tmp7)) + 12|0);
 HEAP32[$6>>2] = (142);
 HEAP32[$tmp2>>2] = 3348;
 $7 = ((($tmp2)) + 4|0);
 HEAP32[$7>>2] = 2;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp2)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($tmp2)) + 16|0);
 HEAP32[$8>>2] = $tmp7;
 $9 = ((($tmp2)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE($tmp2,3364);
 // unreachable;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h22fac1342ae50bd0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf29 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf29 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 20;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (8095 + ($9)|0);
   $14 = (($buf29) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (8095 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf29) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (8095 + ($22)|0);
  $26 = (($buf29) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf29) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf29) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,$3,11004,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (8095 + ($33)|0);
  $36 = (($buf29) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf29) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,$3,11004,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h64fa9034f3e0160fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $buf75$i = 0, $curr$0$i = 0;
 var $iter$sroa$4$0$in$i = 0, $return$0$i15$i = 0, $scevgep$i = 0, $scevgep71$i = 0, $scevgep72$i = 0, $scevgep7273$i = 0, $scevgep76$i = 0, $scevgep7677$i = 0, $umax$i = 0, $umax74$i = 0, $x$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $buf$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $buf75$i = $buf$i;
 $3 = ((($buf$i)) + 64|0);
 $scevgep$i = ((($buf$i)) + 64|0);
 $scevgep71$i = $scevgep$i;
 $scevgep72$i = ((($buf$i)) + 1|0);
 $scevgep7273$i = $scevgep72$i;
 $4 = ($scevgep71$i>>>0)>($scevgep7273$i>>>0);
 $umax$i = $4 ? $scevgep71$i : $scevgep7273$i;
 $umax74$i = $umax$i;
 $5 = (0 - ($buf75$i))|0;
 $scevgep76$i = (($umax74$i) + ($5)|0);
 $scevgep7677$i = $scevgep76$i;
 _memset(($buf$i|0),0,($scevgep7677$i|0))|0;
 $curr$0$i = 64;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $6 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $7 = $x$0$i & 15;
  $8 = $x$0$i >>> 4;
  $9 = $7&255;
  $10 = ($9&255)<(10);
  $11 = $9 | 48;
  $12 = (($9) + 87)<<24>>24;
  $return$0$i15$i = $10 ? $11 : $12;
  HEAP8[$6>>0] = $return$0$i15$i;
  $13 = (($curr$0$i) + -1)|0;
  $14 = ($8|0)==(0);
  if ($14) {
   break;
  } else {
   $curr$0$i = $13;$iter$sroa$4$0$in$i = $6;$x$0$i = $8;
  }
 }
 $15 = ($13>>>0)>(64);
 if ($15) {
  __ZN4core5slice22slice_index_order_fail17h9c242137b61045c7E($13,64);
  // unreachable;
 } else {
  $16 = (($buf$i) + ($13)|0);
  $17 = (65 - ($curr$0$i))|0;
  $18 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,8382,2,$16,$17)|0);
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17h21e5616eda417818E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb0bd39a04aff181E($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17hcbe646009264c62aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf29$i = 0, $curr$231$i = 0, $curr$3$i = 0, $div$i = 0, $n1$030$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf29$i = sp;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = ($2&255)>(99);
 if ($4) {
  $5 = (($2&255) % 100)&-1;
  $6 = $5&255;
  $7 = $6 << 1;
  $div$i = (($2&255) / 100)&-1;
  $8 = $div$i&255;
  $9 = (8095 + ($7)|0);
  $10 = ((($buf29$i)) + 18|0);
  $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
  $curr$231$i = 17;$n1$030$i = $8;
  label = 4;
 } else {
  $12 = ($2&255)<(10);
  if ($12) {
   $curr$231$i = 19;$n1$030$i = $3;
   label = 4;
  } else {
   $16 = $3 << 1;
   $17 = (8095 + ($16)|0);
   $18 = ((($buf29$i)) + 18|0);
   $19 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $curr$3$i = 18;
  }
 }
 if ((label|0) == 4) {
  $13 = $n1$030$i&255;
  $14 = (($buf29$i) + ($curr$231$i)|0);
  $15 = (($13) + 48)<<24>>24;
  HEAP8[$14>>0] = $15;
  $curr$3$i = $curr$231$i;
 }
 $20 = (($buf29$i) + ($curr$3$i)|0);
 $21 = (20 - ($curr$3$i))|0;
 $22 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,11004,0,$20,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h1dd29bef2ec747e8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h56975e0b571519b5E($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h56975e0b571519b5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf29 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf29 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 20;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (8095 + ($9)|0);
   $14 = (($buf29) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (8095 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf29) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (8095 + ($22)|0);
  $26 = (($buf29) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf29) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf29) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,$3,11004,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (8095 + ($33)|0);
  $36 = (($buf29) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf29) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,$3,11004,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num53__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_u32_GT_3fmt17h28da9cfb2690ca58E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$i = 0, $buf75$i = 0, $curr$0$i = 0;
 var $iter$sroa$4$0$in$i = 0, $return$0$i15$i = 0, $scevgep$i = 0, $scevgep71$i = 0, $scevgep72$i = 0, $scevgep7273$i = 0, $scevgep76$i = 0, $scevgep7677$i = 0, $umax$i = 0, $umax74$i = 0, $x$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $buf$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $buf75$i = $buf$i;
 $3 = ((($buf$i)) + 64|0);
 $scevgep$i = ((($buf$i)) + 64|0);
 $scevgep71$i = $scevgep$i;
 $scevgep72$i = ((($buf$i)) + 1|0);
 $scevgep7273$i = $scevgep72$i;
 $4 = ($scevgep71$i>>>0)>($scevgep7273$i>>>0);
 $umax$i = $4 ? $scevgep71$i : $scevgep7273$i;
 $umax74$i = $umax$i;
 $5 = (0 - ($buf75$i))|0;
 $scevgep76$i = (($umax74$i) + ($5)|0);
 $scevgep7677$i = $scevgep76$i;
 _memset(($buf$i|0),0,($scevgep7677$i|0))|0;
 $curr$0$i = 64;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $6 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $7 = $x$0$i & 15;
  $8 = $x$0$i >>> 4;
  $9 = $7&255;
  $10 = ($9&255)<(10);
  $11 = $9 | 48;
  $12 = (($9) + 87)<<24>>24;
  $return$0$i15$i = $10 ? $11 : $12;
  HEAP8[$6>>0] = $return$0$i15$i;
  $13 = (($curr$0$i) + -1)|0;
  $14 = ($8|0)==(0);
  if ($14) {
   break;
  } else {
   $curr$0$i = $13;$iter$sroa$4$0$in$i = $6;$x$0$i = $8;
  }
 }
 $15 = ($13>>>0)>(64);
 if ($15) {
  __ZN4core5slice22slice_index_order_fail17h9c242137b61045c7E($13,64);
  // unreachable;
 } else {
  $16 = (($buf$i) + ($13)|0);
  $17 = (65 - ($curr$0$i))|0;
  $18 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,8382,2,$16,$17)|0);
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h9316b42cff23f739E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf29 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf29 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 20;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (8095 + ($7)|0);
   $12 = (($buf29) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (8095 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf29) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (8095 + ($20)|0);
  $24 = (($buf29) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf29) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf29) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,11004,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (8095 + ($31)|0);
  $34 = (($buf29) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf29) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17ha9f3482a9c11153dE($1,1,11004,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core3fmt8builders16debug_struct_new17hf20bda3204a7fc46E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$repack = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($1,$2,$3)|0);
 HEAP32[$0>>2] = $1;
 $$repack = ((($0)) + 4|0);
 HEAP8[$$repack>>0] = $4;
 $5 = ((($0)) + 5|0);
 HEAP8[$5>>0] = 0;
 return;
}
function __ZN4core3fmt8builders11DebugStruct6finish17h0059fdfd5fa3db64E($0) {
 $0 = $0|0;
 var $$elt$phi$trans$insert = 0, $$unpack = 0, $$unpack$pre = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $return$sroa$0$0$i = 0, $switch3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $$elt$phi$trans$insert = ((($0)) + 4|0);
 $$unpack$pre = HEAP8[$$elt$phi$trans$insert>>0]|0;
 if ($3) {
  $$unpack = $$unpack$pre;
  return ($$unpack|0);
 }
 $switch3$i = ($$unpack$pre<<24>>24)==(0);
 do {
  if ($switch3$i) {
   $4 = HEAP32[$0>>2]|0;
   $5 = (__ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($4)|0);
   $6 = $5 & 4;
   $7 = ($6|0)==(0);
   $8 = HEAP32[$0>>2]|0;
   if ($7) {
    $10 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($8,8093,2)|0);
    $return$sroa$0$0$i = $10;
    break;
   } else {
    $9 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($8,8091,2)|0);
    $return$sroa$0$0$i = $9;
    break;
   }
  } else {
   $return$sroa$0$0$i = 1;
  }
 } while(0);
 HEAP8[$$elt$phi$trans$insert>>0] = $return$sroa$0$0$i;
 $$unpack = $return$sroa$0$0$i;
 return ($$unpack|0);
}
function __ZN4core3fmt8builders15debug_tuple_new17h9e457d283f137044E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$repack = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($1,$2,$3)|0);
 $5 = ($3|0)==(0);
 HEAP32[$0>>2] = $1;
 $$repack = ((($0)) + 4|0);
 HEAP8[$$repack>>0] = $4;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 12|0);
 $8 = $5&1;
 HEAP8[$7>>0] = $8;
 return;
}
function __ZN4core3fmt8builders14debug_list_new17h4ba0cdd99c6e162bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $tmp1 = 0, $tmp1$sroa$0$0$$sroa_idx$i = 0, $tmp8$sroa$4$0$$sroa_idx = 0, $tmp8$sroa$5$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp1 = sp;
 HEAP32[$tmp1>>2] = 3324;
 $2 = ((($tmp1)) + 4|0);
 HEAP32[$2>>2] = 1;
 $tmp1$sroa$0$0$$sroa_idx$i = ((($tmp1)) + 8|0);
 HEAP32[$tmp1$sroa$0$0$$sroa_idx$i>>2] = 0;
 $3 = ((($tmp1)) + 16|0);
 HEAP32[$3>>2] = 10460;
 $4 = ((($tmp1)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = (__ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E($1,$tmp1)|0);
 HEAP32[$0>>2] = $1;
 $tmp8$sroa$4$0$$sroa_idx = ((($0)) + 4|0);
 HEAP8[$tmp8$sroa$4$0$$sroa_idx>>0] = $5;
 $tmp8$sroa$5$0$$sroa_idx = ((($0)) + 5|0);
 HEAP8[$tmp8$sroa$5$0$$sroa_idx>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN4core3fmt8builders9DebugList5entry17hb49e7a94744342b0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3fmt8builders10DebugInner5entry17ha55631e78797c218E($0,$1,$2);
 return ($0|0);
}
function __ZN4core3fmt8builders9DebugList6finish17h04c9d4f5fa6fe08bE($0) {
 $0 = $0|0;
 var $$elt$i = 0, $$unpack$i = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prefix$sroa$0$0$i = 0, $prefix$sroa$5$0$i = 0, $return$sroa$0$0$i = 0, $switch3$i = 0, $switch3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN4core3fmt9Formatter5flags17h5b1ddaa0c347b9fcE($1)|0);
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($0)) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   $prefix$sroa$0$0$i = 8303;$prefix$sroa$5$0$i = 1;
  }
 }
 if ((label|0) == 3) {
  $prefix$sroa$0$0$i = 11004;$prefix$sroa$5$0$i = 0;
 }
 $$elt$i = ((($0)) + 4|0);
 $$unpack$i = HEAP8[$$elt$i>>0]|0;
 $switch3$i$i = ($$unpack$i<<24>>24)==(0);
 if (!($switch3$i$i)) {
  HEAP8[$$elt$i>>0] = 1;
  $return$sroa$0$0$i = 1;
  return ($return$sroa$0$0$i|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($8,$prefix$sroa$0$0$i,$prefix$sroa$5$0$i)|0);
 HEAP8[$$elt$i>>0] = $9;
 $switch3$i = ($9<<24>>24)==(0);
 if (!($switch3$i)) {
  $return$sroa$0$0$i = 1;
  return ($return$sroa$0$0$i|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (__ZN4core3fmt9Formatter9write_str17h52f469e35c05ee48E($10,6196,1)|0);
 $return$sroa$0$0$i = $11;
 return ($return$sroa$0$0$i|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2615]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 10504;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 149;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[2615]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((150|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup_465($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[872]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[872]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((10488)|0));
   $$02325 = HEAP32[(10484)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((10488)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 255]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 255]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (8384 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 8472;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 8472;
  } else {
   $$01113 = 8472;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall4(4,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _htons($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[2627]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (10548 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[2627] = $24;
     } else {
      $25 = HEAP32[(10524)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(10516)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (10548 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[2627] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(10524)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(10528)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (10548 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[2627] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(10524)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(10516)>>2] = $84;
     HEAP32[(10528)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(10512)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (10812 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(10524)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (10812 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(10512)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(10524)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(10524)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(10524)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(10528)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (10548 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[2627] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(10524)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(10516)>>2] = $$0191$i;
      HEAP32[(10528)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(10512)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (10812 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (10812 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(10516)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(10524)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (10812 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(10512)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(10524)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(10524)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(10524)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (10548 + ($425<<2)|0);
          $427 = HEAP32[2627]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[2627] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(10524)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (10812 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(10512)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(10524)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(10524)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(10516)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(10528)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(10528)>>2] = $511;
   HEAP32[(10516)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(10516)>>2] = 0;
   HEAP32[(10528)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(10520)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(10520)>>2] = $526;
  $527 = HEAP32[(10532)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(10532)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[2745]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(10988)>>2] = 4096;
  HEAP32[(10984)>>2] = 4096;
  HEAP32[(10992)>>2] = -1;
  HEAP32[(10996)>>2] = -1;
  HEAP32[(11000)>>2] = 0;
  HEAP32[(10952)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[2745] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(10988)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(10948)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(10940)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(10952)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(10532)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (10956);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(10984)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(10940)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(10948)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(10988)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(10952)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(10952)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(10940)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(10940)>>2] = $624;
  $625 = HEAP32[(10944)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(10944)>>2] = $624;
  }
  $627 = HEAP32[(10532)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(10524)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(10524)>>2] = $$748$i;
    }
    HEAP32[(10956)>>2] = $$748$i;
    HEAP32[(10960)>>2] = $$723947$i;
    HEAP32[(10968)>>2] = 0;
    $632 = HEAP32[2745]|0;
    HEAP32[(10544)>>2] = $632;
    HEAP32[(10540)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (10548 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(10532)>>2] = $646;
    HEAP32[(10520)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(10996)>>2]|0;
    HEAP32[(10536)>>2] = $652;
   } else {
    $$024370$i = (10956);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(10520)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(10532)>>2] = $676;
       HEAP32[(10520)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(10996)>>2]|0;
       HEAP32[(10536)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(10524)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(10524)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (10956);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (10956);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(10520)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(10520)>>2] = $724;
        HEAP32[(10532)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(10528)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(10516)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(10516)>>2] = $730;
         HEAP32[(10528)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (10548 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[2627]|0;
            $757 = $756 & $755;
            HEAP32[2627] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (10812 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(10512)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(10512)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(10524)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(10524)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(10524)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (10548 + ($834<<2)|0);
         $836 = HEAP32[2627]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[2627] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(10524)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (10812 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(10512)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(10512)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(10524)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(10524)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (10956);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(10532)>>2] = $944;
    HEAP32[(10520)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(10996)>>2]|0;
    HEAP32[(10536)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(10956)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(10956)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(10956)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(10956)+12>>2]|0;
    HEAP32[(10956)>>2] = $$748$i;
    HEAP32[(10960)>>2] = $$723947$i;
    HEAP32[(10968)>>2] = 0;
    HEAP32[(10964)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (10548 + ($965<<2)|0);
      $967 = HEAP32[2627]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[2627] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(10524)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (10812 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(10512)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(10512)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(10524)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(10524)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(10520)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(10520)>>2] = $1047;
   $1048 = HEAP32[(10532)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(10532)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(10524)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(10528)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(10516)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (10548 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[2627]|0;
     $38 = $37 & $36;
     HEAP32[2627] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (10812 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(10512)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(10512)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(10524)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(10524)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(10524)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(10532)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(10520)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(10520)>>2] = $123;
   HEAP32[(10532)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(10528)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(10528)>>2] = 0;
   HEAP32[(10516)>>2] = 0;
   return;
  }
  $128 = HEAP32[(10528)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(10516)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(10516)>>2] = $131;
   HEAP32[(10528)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (10548 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(10524)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[2627]|0;
     $155 = $154 & $153;
     HEAP32[2627] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(10524)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(10524)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(10524)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (10812 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(10512)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(10512)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(10524)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(10524)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(10524)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(10528)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(10516)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (10548 + ($236<<2)|0);
  $238 = HEAP32[2627]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[2627] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(10524)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (10812 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(10512)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(10512)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(10524)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(10524)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(10540)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(10540)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (10964);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(10540)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(10524)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(10988)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(10532)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(10520)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(10532)>>2] = $40;
  HEAP32[(10520)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(10528)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(10516)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(10516)>>2] = $storemerge1;
  HEAP32[(10528)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (10548 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[2627]|0;
    $93 = $92 & $91;
    HEAP32[2627] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (10812 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(10512)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(10512)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(10524)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(10524)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(10524)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(10524)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(10528)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(10516)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (10548 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[2627]|0;
     $34 = $33 & $32;
     HEAP32[2627] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (10812 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(10512)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(10512)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(10524)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(10524)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(10524)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(10524)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(10532)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(10520)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(10520)>>2] = $118;
   HEAP32[(10532)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(10528)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(10528)>>2] = 0;
   HEAP32[(10516)>>2] = 0;
   return;
  }
  $123 = HEAP32[(10528)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(10516)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(10516)>>2] = $126;
   HEAP32[(10528)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (10548 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[2627]|0;
     $149 = $148 & $147;
     HEAP32[2627] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (10812 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(10512)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(10512)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(10524)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(10524)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(10524)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(10528)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(10516)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (10548 + ($227<<2)|0);
  $229 = HEAP32[2627]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[2627] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(10524)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (10812 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(10512)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(10512)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(10524)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(10524)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(16);
 $$ = $2 ? 16 : $0;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($$0100) + ($14)|0);
   $72 = $64 & 1;
   $73 = $14 | $72;
   $74 = $73 | 2;
   HEAP32[$63>>2] = $74;
   $75 = ((($71)) + 4|0);
   $76 = $70 | 3;
   HEAP32[$75>>2] = $76;
   $77 = (($71) + ($70)|0);
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 | 1;
   HEAP32[$78>>2] = $80;
   _dispose_chunk($71,$70);
  }
 }
 $81 = ((($$0100)) + 8|0);
 $$198 = $81;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)<(16);
    $$ = $14 ? 16 : $1;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_self() {
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b6() {
 ; nullFunc_v(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0;
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h983826f6a6667ffdE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he8f64d6428b852ecE,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h983826f6a6667ffdE_24,b0,b0,b0,b0,b0
,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0441139cedf92917E_45,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17he8f64d6428b852ecE_48,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc1c4184bcb72aabeE,b0
,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hea54b1e6d6bd4e6cE,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0,b0,__ZN4core3fmt5write17h02db2923adb244ceE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN78__LT_std__ffi__os_str__OsString_u20_as_u20_core__cmp__PartialEq_LT_str_GT__GT_2eq17hc1a180efe967a6adE,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17he908de228f92c287E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h4b815cb8da5a9cbfE,b1,b1,b1,__ZN3std10sys_common11thread_info14current_thread17h4ec9eec30c30b602E,b1,__ZN3std9panicking12LOCAL_STDERR7__getit17he651137d5f213785E,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN3std10sys_common6poison4Flag3new17h75c9b359b4e03250E,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,__ZN4drop17h8fd25e300f123baaE,b2,b2,b2,__ZN3std6thread5local2os13destroy_value17hd729142f06ddce1fE,__ZN4drop17hb53e40539eb19692E,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4drop17ha52c4fe1639e9104E,b2,b2,b2,b2,b2,b2,__ZN3std6thread5local2os13destroy_value17hf077399dfe1fe652E,b2,b2,b2,__ZN4drop17h94cfd518c9a91d16E,b2,__ZN3std6thread5local2os13destroy_value17h436f71fde916f283E
,__ZN4drop17ha52c4fe1639e9104E_44,b2,b2,b2,__ZN4drop17hb53e40539eb19692E_33,b2,b2,b2,__ZN4drop17h83a4656d82add0d1E,b2,b2,b2,b2,b2,__ZN4drop17hb53e40539eb19692E_53,b2,__ZN4drop17hb53e40539eb19692E_244,b2,__ZN4drop17hb53e40539eb19692E_428,b2,b2,__ZN4drop17h1ee1e45039a9c687E,b2,__ZN4drop17h1ee1e45039a9c687E_837,b2,__ZN4drop17h1ee1e45039a9c687E_1046,b2,__ZN4drop17h1ee1e45039a9c687E_1088,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core9panicking5panic17hf2309629b2721756E,b2,b2,b2,b2,b2,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h80c2a148e28b9a5dE_14,b2,b2,__ZN3std10sys_common4util10dumb_print17hcb899301f7c5af50E,__ZN3std9panicking12default_hook17h9649b29e270822abE,b2,b2,b2,b2,b2,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE,b2
,b2,__ZN63__LT_std__sync__condvar__Condvar_u20_as_u20_core__ops__Drop_GT_4drop17h2da1c552dcb919e6E,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17hf15f1d3312c3a1efE_34,b2,b2,b2,b2,__ZN3std10sys_common7condvar7Condvar3new17h4dc7607d38a4fadcE,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,__ZN4core6result13unwrap_failed17h0599078157cc6e6bE_423,__ZN3std10sys_common5mutex5Mutex3new17ha4051e0b0038a3ceE,b2,__ZN3std4sync7condvar7Condvar3new17h8ec377b696beaf51E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,_cleanup_465,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17ha572b2dc31c844a9E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN223__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17ha0587500bb8b89b0E,__ZN3std5error5Error5cause17he928b39861950681E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4core9panicking9panic_fmt17h4f5c833dc0afcf5aE,b3,b3,b3,b3,b3,b3,b3,__ZN4core6option13expect_failed17hd5a9053cc1d3d6b1E,b3,b3,b3,b3,b3,b3,__ZN3std6thread6Thread4name17hfa4698c20da3d899E,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZN4core5slice22slice_index_order_fail17h9c242137b61045c7E,__ZN3std9panicking11begin_panic17hb4a08e241830b1bcE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std9panicking15begin_panic_fmt17h4bc23b829f3f0569E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN106__LT_collections__string__String_u20_as_u20_core__convert__Into_LT_collections__vec__Vec_LT_u8_GT__GT__GT_4into17h685d95728ce4f82cE,__ZN3std3ffi5c_str7CString4_new17hdb108839b3ef2883E,b3,b3,b3,b3,b3,b3,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h58182ad79fce4c6dE_578,b3,b3,__ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hfd02a1f5201bc5ecE,__ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17h28f74963dd69ab05E,b3,__ZN3std3ffi5c_str4CStr8from_ptr17hccf32a6a0d5018c7E,b3,__ZN78__LT_std__ffi__os_str__OsString_u20_as_u20_std__sys__ext__ffi__OsStringExt_GT_8from_vec17hd1f9261da8a4be75E,b3,b3,b3,__ZN4core5slice20slice_index_len_fail17h4749ae34ab6ab5b2E,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h58182ad79fce4c6dE_717,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h58182ad79fce4c6dE_733,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h06b90f9153f183bbE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17he9dc3b6244070c2bE,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std5error5Error7type_id17h486480f3da311d9aE,b4,b4,b4,b4,b4,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h06b90f9153f183bbE_245,b4,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h06b90f9153f183bbE_433,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,___stdio_close,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std10sys_common12thread_local9StaticKey9lazy_init17he951209d5796c1e4E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN3std2io5error5Error4kind17he57c544533e5cb7bE,b4,b4,b4,__ZN79__LT_std__thread__Thread_u20_as_u20_std__sys_common__thread_info__NewThread_GT_3new17hda57180141716b21E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std3sys2fd8FileDesc3new17hb3e53d752e557ee1E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h729c7c8b7b7d95aaE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std9panicking11begin_panic17h23145ec831f26d17E,b5,b5,b5,b5,b5,b5,__ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h303ce6d812b248e6E,b5,b5
,b5,b5,b5,__ZN153__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_a_GT__u20_as_u20_core__convert__From_LT__RF__u27_b_u20_str_GT__GT_4from17hdebf881be2a57f8cE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN72__LT_std__ffi__os_str__OsStr_u20_as_u20_std__sys__ext__ffi__OsStrExt_GT_8as_bytes17h1d0287a3f83cc2deE,__ZN3std3ffi5c_str7CString3new17hba318d0e49c1dae4E_579,b5,b5,b5,b5,__ZN3std3ffi5c_str4CStr8to_bytes17h354e9e9265613016E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN5alloc3oom19default_oom_handler17ha6b91689c2e4b286E,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN5alloc3oom3oom17ha2998ef21a53f982E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core6result13unwrap_failed17h48edc837f7e8eb46E,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core6result13unwrap_failed17hb90ee81b509584c6E,b6,__ZN4core6result13unwrap_failed17hfdc0075334262a32E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iii = [b7,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h52db261aac16412dE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hab13550c701a111cE,b7,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h689f6b1d580204e7E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17he9eb7ff63965cd0eE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0f0fd6b6430ecf8aE,b7,b7,b7,b7,b7,b7,b7,__ZN4core3fmt5Write10write_char17h0215dfbe8d2aa2c1E,__ZN4core3fmt5Write9write_fmt17h36801230fc7a9465E,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9809e683662ad59fE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd1e739108faeaa9aE,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h52db261aac16412dE_25,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hab13550c701a111cE_26,b7,b7,b7
,b7,b7,__ZN4core3fmt5Write10write_char17h0215dfbe8d2aa2c1E_46,__ZN4core3fmt5Write9write_fmt17h36801230fc7a9465E_47,b7,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h9809e683662ad59fE_49,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd1e739108faeaa9aE_50,b7,b7,b7,b7,__ZN224__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h9e808362ecebd760E,__ZN222__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_Send_u20__u2b__u20_Sync_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17h189ecd2f6ce67aafE,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h8c153ec5b2aad6beE,b7,b7,b7,b7,b7,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h8f389b3fcbf5a1f8E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h689f6b1d580204e7E_845,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h689f6b1d580204e7E_1050,b7,b7,__ZN4core3fmt5Write10write_char17h2e13cc6b1d2a766aE
,__ZN4core3fmt5Write9write_fmt17h734cb31f39261e83E,b7,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h715d26bb790dade1E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h46371b52736f1807E,b7,b7,b7,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E,__ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17hb93036815c2ad437E,b7,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h7f4511395b6d9de2E,b7,b7,b7,__ZN56__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__LowerHex_GT_3fmt17h32aa074b0dd13e52E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_23
,__ZN86__LT_core__cell__BorrowMutError_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hfee5cf65b32ea8f6E,b7,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h9316b42cff23f739E,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_39,__ZN83__LT_core__cell__BorrowError_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h033bc02cc26e3131E,__ZN86__LT_core__cell__BorrowMutError_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h9a4fe785d9edec6cE,__ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h02254c6599924e14E,b7,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hbb9a2ccb9be42399E,__ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h09bbb9f46dad4ca8E,b7,__ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17hb4217629309309c3E_724,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h56975e0b571519b5E,__ZN4core3fmt9Formatter9write_fmt17hfb76180babbb0fd0E,b7,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h22fac1342ae50bd0E,__ZN50__LT__BP_mut_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h14f66fede04084e7E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_170,__ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17he2dd668edb6c58b5E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4b295a323119da67E_242,__ZN3std3sys9backtrace7tracing3imp5write8trace_fn17he3bb99171700a195E
,b7,b7,b7,b7,b7,b7,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_420,__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h99a667ef05a580e5E,b7,b7,b7,b7,b7,__ZN3std3ffi5c_str4CStr6as_ptr17h37ea75dc7b793328E,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb0bd39a04aff181E,__ZN4core3fmt10ArgumentV110show_usize17h9d1afd9306f3a633E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_844,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h15eb753f4b563f12E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_1063,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6172fd068b1323f8E_1093,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h10dede25f4daf49eE
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17h3c6c60dd43f3a89bE,b8,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h5c4ee812bccc755eE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std6memchr6memchr17ha93f0f8dbdee8760E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZN3std2io5error5Error4_new17h1c0b1f30736123e1E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std3sys2fd8FileDesc5write17h1978383ceb49334bE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];

  return { _llvm_bswap_i16: _llvm_bswap_i16, _malloc: _malloc, _fflush: _fflush, _ntohs: _ntohs, _htonl: _htonl, _i64Add: _i64Add, _memmove: _memmove, _pthread_self: _pthread_self, _memset: _memset, _pthread_mutex_unlock: _pthread_mutex_unlock, _digest: _digest, _free: _free, _pthread_mutex_lock: _pthread_mutex_lock, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _sbrk: _sbrk, _bitshift64Lshr: _bitshift64Lshr, _htons: _htons, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i16.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__digest = asm["_digest"]; asm["_digest"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__digest.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _malloc = Module["_malloc"] = asm["_malloc"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _digest = Module["_digest"] = asm["_digest"];
var _htons = Module["_htons"] = asm["_htons"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



